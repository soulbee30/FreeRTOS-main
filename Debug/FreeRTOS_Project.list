
FreeRTOS_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .privileged_functions 00008000  08000000  08000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         00002020  08008000  08008000  00018000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  0800a020  0800a020  0001a020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a108  0800a108  00028010  2**0
                  CONTENTS
  4 .ARM          00000000  0800a108  0800a108  00028010  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a108  0800a108  00028010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a108  0800a108  0001a108  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a10c  0800a10c  0001a10c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .privileged_data 00008000  20000000  0800a110  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000010  20008000  08012110  00028000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00000020  20008010  08012120  00028010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20008030  08012120  00028030  2**0
                  ALLOC
 12 .ARM.attributes 00000036  00000000  00000000  00028010  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00028046  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000b50c  00000000  00000000  00028089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001fd2  00000000  00000000  00033595  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000c38  00000000  00000000  00035568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000929  00000000  00000000  000361a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002ff04  00000000  00000000  00036ac9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000cc1b  00000000  00000000  000669cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00130a7d  00000000  00000000  000735e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002f88  00000000  00000000  001a4068  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005b  00000000  00000000  001a6ff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .privileged_functions:

08000000 <g_pfnVectors>:
 8000000:	00 00 03 20 8d 82 00 08 f1 81 00 08 f7 81 00 08     ... ............
 8000010:	fd 81 00 08 03 82 00 08 09 82 00 08 dd 82 00 08     ................
	...
 800002c:	67 4e 00 08 0f 82 00 08 00 00 00 00 c1 4d 00 08     gN...........M..
 800003c:	dd 82 00 08 dd 82 00 08 dd 82 00 08 dd 82 00 08     ................
 800004c:	dd 82 00 08 dd 82 00 08 dd 82 00 08 dd 82 00 08     ................
 800005c:	dd 82 00 08 dd 82 00 08 dd 82 00 08 dd 82 00 08     ................
 800006c:	dd 82 00 08 dd 82 00 08 dd 82 00 08 dd 82 00 08     ................
 800007c:	dd 82 00 08 dd 82 00 08 dd 82 00 08 dd 82 00 08     ................
 800008c:	dd 82 00 08 dd 82 00 08 dd 82 00 08 dd 82 00 08     ................
 800009c:	dd 82 00 08 dd 82 00 08 dd 82 00 08 dd 82 00 08     ................
 80000ac:	dd 82 00 08 00 00 00 00 dd 82 00 08 dd 82 00 08     ................
 80000bc:	dd 82 00 08 dd 82 00 08 dd 82 00 08 dd 82 00 08     ................
 80000cc:	dd 82 00 08 dd 82 00 08 dd 82 00 08 dd 82 00 08     ................
 80000dc:	dd 82 00 08 dd 82 00 08 dd 82 00 08 dd 82 00 08     ................
 80000ec:	dd 82 00 08 dd 82 00 08 dd 82 00 08 dd 82 00 08     ................
 80000fc:	dd 82 00 08 dd 82 00 08 dd 82 00 08 dd 82 00 08     ................
 800010c:	dd 82 00 08 dd 82 00 08 dd 82 00 08 dd 82 00 08     ................
 800011c:	dd 82 00 08 dd 82 00 08 dd 82 00 08 dd 82 00 08     ................
 800012c:	dd 82 00 08 dd 82 00 08 dd 82 00 08 dd 82 00 08     ................
 800013c:	dd 82 00 08 dd 82 00 08 dd 82 00 08 dd 82 00 08     ................
 800014c:	dd 82 00 08 dd 82 00 08 dd 82 00 08 dd 82 00 08     ................
 800015c:	dd 82 00 08 dd 82 00 08 dd 82 00 08 dd 82 00 08     ................
 800016c:	dd 82 00 08 dd 82 00 08 dd 82 00 08 dd 82 00 08     ................
 800017c:	dd 82 00 08 dd 82 00 08 dd 82 00 08 dd 82 00 08     ................
 800018c:	dd 82 00 08 dd 82 00 08 dd 82 00 08 dd 82 00 08     ................
 800019c:	dd 82 00 08 dd 82 00 08 dd 82 00 08 dd 82 00 08     ................
 80001ac:	dd 82 00 08 dd 82 00 08 00 00 00 00 dd 82 00 08     ................
 80001bc:	dd 82 00 08 dd 82 00 08 00 00 00 00 dd 82 00 08     ................
 80001cc:	dd 82 00 08 dd 82 00 08 dd 82 00 08 dd 82 00 08     ................
 80001dc:	dd 82 00 08 dd 82 00 08 dd 82 00 08 dd 82 00 08     ................
 80001ec:	dd 82 00 08 00 00 00 00 00 00 00 00 dd 82 00 08     ................
 80001fc:	dd 82 00 08 dd 82 00 08 dd 82 00 08 dd 82 00 08     ................
 800020c:	dd 82 00 08 dd 82 00 08 dd 82 00 08 dd 82 00 08     ................
 800021c:	dd 82 00 08 dd 82 00 08 dd 82 00 08 dd 82 00 08     ................
 800022c:	dd 82 00 08 dd 82 00 08 dd 82 00 08                 ............

08000238 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000238:	b480      	push	{r7}
 800023a:	b083      	sub	sp, #12
 800023c:	af00      	add	r7, sp, #0
 800023e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	f103 0208 	add.w	r2, r3, #8
 8000246:	687b      	ldr	r3, [r7, #4]
 8000248:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	f04f 32ff 	mov.w	r2, #4294967295
 8000250:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	f103 0208 	add.w	r2, r3, #8
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800025c:	687b      	ldr	r3, [r7, #4]
 800025e:	f103 0208 	add.w	r2, r3, #8
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	2200      	movs	r2, #0
 800026a:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800026c:	bf00      	nop
 800026e:	370c      	adds	r7, #12
 8000270:	46bd      	mov	sp, r7
 8000272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000276:	4770      	bx	lr

08000278 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000278:	b480      	push	{r7}
 800027a:	b083      	sub	sp, #12
 800027c:	af00      	add	r7, sp, #0
 800027e:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	2200      	movs	r2, #0
 8000284:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000286:	bf00      	nop
 8000288:	370c      	adds	r7, #12
 800028a:	46bd      	mov	sp, r7
 800028c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000290:	4770      	bx	lr

08000292 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8000292:	b480      	push	{r7}
 8000294:	b085      	sub	sp, #20
 8000296:	af00      	add	r7, sp, #0
 8000298:	6078      	str	r0, [r7, #4]
 800029a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800029c:	683b      	ldr	r3, [r7, #0]
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80002a2:	68bb      	ldr	r3, [r7, #8]
 80002a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80002a8:	d103      	bne.n	80002b2 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	691b      	ldr	r3, [r3, #16]
 80002ae:	60fb      	str	r3, [r7, #12]
 80002b0:	e00c      	b.n	80002cc <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	3308      	adds	r3, #8
 80002b6:	60fb      	str	r3, [r7, #12]
 80002b8:	e002      	b.n	80002c0 <vListInsert+0x2e>
 80002ba:	68fb      	ldr	r3, [r7, #12]
 80002bc:	685b      	ldr	r3, [r3, #4]
 80002be:	60fb      	str	r3, [r7, #12]
 80002c0:	68fb      	ldr	r3, [r7, #12]
 80002c2:	685b      	ldr	r3, [r3, #4]
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	68ba      	ldr	r2, [r7, #8]
 80002c8:	429a      	cmp	r2, r3
 80002ca:	d2f6      	bcs.n	80002ba <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80002cc:	68fb      	ldr	r3, [r7, #12]
 80002ce:	685a      	ldr	r2, [r3, #4]
 80002d0:	683b      	ldr	r3, [r7, #0]
 80002d2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80002d4:	683b      	ldr	r3, [r7, #0]
 80002d6:	685b      	ldr	r3, [r3, #4]
 80002d8:	683a      	ldr	r2, [r7, #0]
 80002da:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80002dc:	683b      	ldr	r3, [r7, #0]
 80002de:	68fa      	ldr	r2, [r7, #12]
 80002e0:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80002e2:	68fb      	ldr	r3, [r7, #12]
 80002e4:	683a      	ldr	r2, [r7, #0]
 80002e6:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80002e8:	683b      	ldr	r3, [r7, #0]
 80002ea:	687a      	ldr	r2, [r7, #4]
 80002ec:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80002ee:	687b      	ldr	r3, [r7, #4]
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	1c5a      	adds	r2, r3, #1
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	601a      	str	r2, [r3, #0]
}
 80002f8:	bf00      	nop
 80002fa:	3714      	adds	r7, #20
 80002fc:	46bd      	mov	sp, r7
 80002fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000302:	4770      	bx	lr

08000304 <vListInsertEnd>:
{
 8000304:	b480      	push	{r7}
 8000306:	b085      	sub	sp, #20
 8000308:	af00      	add	r7, sp, #0
 800030a:	6078      	str	r0, [r7, #4]
 800030c:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	685b      	ldr	r3, [r3, #4]
 8000312:	60fb      	str	r3, [r7, #12]
    pxNewListItem->pxNext = pxIndex;
 8000314:	683b      	ldr	r3, [r7, #0]
 8000316:	68fa      	ldr	r2, [r7, #12]
 8000318:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800031a:	68fb      	ldr	r3, [r7, #12]
 800031c:	689a      	ldr	r2, [r3, #8]
 800031e:	683b      	ldr	r3, [r7, #0]
 8000320:	609a      	str	r2, [r3, #8]
    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000322:	68fb      	ldr	r3, [r7, #12]
 8000324:	689b      	ldr	r3, [r3, #8]
 8000326:	683a      	ldr	r2, [r7, #0]
 8000328:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 800032a:	68fb      	ldr	r3, [r7, #12]
 800032c:	683a      	ldr	r2, [r7, #0]
 800032e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxContainer = pxList;
 8000330:	683b      	ldr	r3, [r7, #0]
 8000332:	687a      	ldr	r2, [r7, #4]
 8000334:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )++;
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	1c5a      	adds	r2, r3, #1
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	601a      	str	r2, [r3, #0]
}
 8000340:	bf00      	nop
 8000342:	3714      	adds	r7, #20
 8000344:	46bd      	mov	sp, r7
 8000346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034a:	4770      	bx	lr

0800034c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800034c:	b480      	push	{r7}
 800034e:	b085      	sub	sp, #20
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	691b      	ldr	r3, [r3, #16]
 8000358:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	685b      	ldr	r3, [r3, #4]
 800035e:	687a      	ldr	r2, [r7, #4]
 8000360:	6892      	ldr	r2, [r2, #8]
 8000362:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	689b      	ldr	r3, [r3, #8]
 8000368:	687a      	ldr	r2, [r7, #4]
 800036a:	6852      	ldr	r2, [r2, #4]
 800036c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800036e:	68fb      	ldr	r3, [r7, #12]
 8000370:	685b      	ldr	r3, [r3, #4]
 8000372:	687a      	ldr	r2, [r7, #4]
 8000374:	429a      	cmp	r2, r3
 8000376:	d103      	bne.n	8000380 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	689a      	ldr	r2, [r3, #8]
 800037c:	68fb      	ldr	r3, [r7, #12]
 800037e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	2200      	movs	r2, #0
 8000384:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8000386:	68fb      	ldr	r3, [r7, #12]
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	1e5a      	subs	r2, r3, #1
 800038c:	68fb      	ldr	r3, [r7, #12]
 800038e:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8000390:	68fb      	ldr	r3, [r7, #12]
 8000392:	681b      	ldr	r3, [r3, #0]
}
 8000394:	4618      	mov	r0, r3
 8000396:	3714      	adds	r7, #20
 8000398:	46bd      	mov	sp, r7
 800039a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039e:	4770      	bx	lr

080003a0 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b08a      	sub	sp, #40	; 0x28
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	60f8      	str	r0, [r7, #12]
 80003a8:	60b9      	str	r1, [r7, #8]
 80003aa:	607a      	str	r2, [r7, #4]
 80003ac:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80003ae:	2300      	movs	r3, #0
 80003b0:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80003b2:	68fb      	ldr	r3, [r7, #12]
 80003b4:	623b      	str	r3, [r7, #32]

    configASSERT( pxQueue );
 80003b6:	6a3b      	ldr	r3, [r7, #32]
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d102      	bne.n	80003c2 <xQueueGenericSend+0x22>
 80003bc:	f004 fceb 	bl	8004d96 <ulSetInterruptMask>
 80003c0:	e7fe      	b.n	80003c0 <xQueueGenericSend+0x20>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80003c2:	68bb      	ldr	r3, [r7, #8]
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d103      	bne.n	80003d0 <xQueueGenericSend+0x30>
 80003c8:	6a3b      	ldr	r3, [r7, #32]
 80003ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d101      	bne.n	80003d4 <xQueueGenericSend+0x34>
 80003d0:	2301      	movs	r3, #1
 80003d2:	e000      	b.n	80003d6 <xQueueGenericSend+0x36>
 80003d4:	2300      	movs	r3, #0
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d102      	bne.n	80003e0 <xQueueGenericSend+0x40>
 80003da:	f004 fcdc 	bl	8004d96 <ulSetInterruptMask>
 80003de:	e7fe      	b.n	80003de <xQueueGenericSend+0x3e>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80003e0:	683b      	ldr	r3, [r7, #0]
 80003e2:	2b02      	cmp	r3, #2
 80003e4:	d103      	bne.n	80003ee <xQueueGenericSend+0x4e>
 80003e6:	6a3b      	ldr	r3, [r7, #32]
 80003e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80003ea:	2b01      	cmp	r3, #1
 80003ec:	d101      	bne.n	80003f2 <xQueueGenericSend+0x52>
 80003ee:	2301      	movs	r3, #1
 80003f0:	e000      	b.n	80003f4 <xQueueGenericSend+0x54>
 80003f2:	2300      	movs	r3, #0
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d102      	bne.n	80003fe <xQueueGenericSend+0x5e>
 80003f8:	f004 fccd 	bl	8004d96 <ulSetInterruptMask>
 80003fc:	e7fe      	b.n	80003fc <xQueueGenericSend+0x5c>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80003fe:	f002 fff7 	bl	80033f0 <xTaskGetSchedulerState>
 8000402:	4603      	mov	r3, r0
 8000404:	2b00      	cmp	r3, #0
 8000406:	d102      	bne.n	800040e <xQueueGenericSend+0x6e>
 8000408:	687b      	ldr	r3, [r7, #4]
 800040a:	2b00      	cmp	r3, #0
 800040c:	d101      	bne.n	8000412 <xQueueGenericSend+0x72>
 800040e:	2301      	movs	r3, #1
 8000410:	e000      	b.n	8000414 <xQueueGenericSend+0x74>
 8000412:	2300      	movs	r3, #0
 8000414:	2b00      	cmp	r3, #0
 8000416:	d102      	bne.n	800041e <xQueueGenericSend+0x7e>
 8000418:	f004 fcbd 	bl	8004d96 <ulSetInterruptMask>
 800041c:	e7fe      	b.n	800041c <xQueueGenericSend+0x7c>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800041e:	f004 fbf7 	bl	8004c10 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8000422:	6a3b      	ldr	r3, [r7, #32]
 8000424:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000426:	6a3b      	ldr	r3, [r7, #32]
 8000428:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800042a:	429a      	cmp	r2, r3
 800042c:	d302      	bcc.n	8000434 <xQueueGenericSend+0x94>
 800042e:	683b      	ldr	r3, [r7, #0]
 8000430:	2b02      	cmp	r3, #2
 8000432:	d11d      	bne.n	8000470 <xQueueGenericSend+0xd0>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8000434:	683a      	ldr	r2, [r7, #0]
 8000436:	68b9      	ldr	r1, [r7, #8]
 8000438:	6a38      	ldr	r0, [r7, #32]
 800043a:	f000 fffb 	bl	8001434 <prvCopyDataToQueue>
 800043e:	61f8      	str	r0, [r7, #28]

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000440:	6a3b      	ldr	r3, [r7, #32]
 8000442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000444:	2b00      	cmp	r3, #0
 8000446:	d00a      	beq.n	800045e <xQueueGenericSend+0xbe>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000448:	6a3b      	ldr	r3, [r7, #32]
 800044a:	3324      	adds	r3, #36	; 0x24
 800044c:	4618      	mov	r0, r3
 800044e:	f002 fdc9 	bl	8002fe4 <xTaskRemoveFromEventList>
 8000452:	4603      	mov	r3, r0
 8000454:	2b00      	cmp	r3, #0
 8000456:	d007      	beq.n	8000468 <xQueueGenericSend+0xc8>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 8000458:	f004 fbc8 	bl	8004bec <vPortYield>
 800045c:	e004      	b.n	8000468 <xQueueGenericSend+0xc8>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 800045e:	69fb      	ldr	r3, [r7, #28]
 8000460:	2b00      	cmp	r3, #0
 8000462:	d001      	beq.n	8000468 <xQueueGenericSend+0xc8>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 8000464:	f004 fbc2 	bl	8004bec <vPortYield>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8000468:	f004 fbe4 	bl	8004c34 <vPortExitCritical>
                return pdPASS;
 800046c:	2301      	movs	r3, #1
 800046e:	e05c      	b.n	800052a <xQueueGenericSend+0x18a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	2b00      	cmp	r3, #0
 8000474:	d103      	bne.n	800047e <xQueueGenericSend+0xde>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8000476:	f004 fbdd 	bl	8004c34 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 800047a:	2300      	movs	r3, #0
 800047c:	e055      	b.n	800052a <xQueueGenericSend+0x18a>
                }
                else if( xEntryTimeSet == pdFALSE )
 800047e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000480:	2b00      	cmp	r3, #0
 8000482:	d106      	bne.n	8000492 <xQueueGenericSend+0xf2>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000484:	f107 0314 	add.w	r3, r7, #20
 8000488:	4618      	mov	r0, r3
 800048a:	f003 f9c1 	bl	8003810 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800048e:	2301      	movs	r3, #1
 8000490:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8000492:	f004 fbcf 	bl	8004c34 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8000496:	f001 fd41 	bl	8001f1c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800049a:	f004 fbb9 	bl	8004c10 <vPortEnterCritical>
 800049e:	6a3b      	ldr	r3, [r7, #32]
 80004a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80004a4:	b25b      	sxtb	r3, r3
 80004a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80004aa:	d103      	bne.n	80004b4 <xQueueGenericSend+0x114>
 80004ac:	6a3b      	ldr	r3, [r7, #32]
 80004ae:	2200      	movs	r2, #0
 80004b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80004b4:	6a3b      	ldr	r3, [r7, #32]
 80004b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80004ba:	b25b      	sxtb	r3, r3
 80004bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80004c0:	d103      	bne.n	80004ca <xQueueGenericSend+0x12a>
 80004c2:	6a3b      	ldr	r3, [r7, #32]
 80004c4:	2200      	movs	r2, #0
 80004c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80004ca:	f004 fbb3 	bl	8004c34 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80004ce:	1d3a      	adds	r2, r7, #4
 80004d0:	f107 0314 	add.w	r3, r7, #20
 80004d4:	4611      	mov	r1, r2
 80004d6:	4618      	mov	r0, r3
 80004d8:	f002 fb5a 	bl	8002b90 <xTaskCheckForTimeOut>
 80004dc:	4603      	mov	r3, r0
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d11d      	bne.n	800051e <xQueueGenericSend+0x17e>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80004e2:	6a38      	ldr	r0, [r7, #32]
 80004e4:	f000 ff8e 	bl	8001404 <prvIsQueueFull>
 80004e8:	4603      	mov	r3, r0
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d011      	beq.n	8000512 <xQueueGenericSend+0x172>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80004ee:	6a3b      	ldr	r3, [r7, #32]
 80004f0:	3310      	adds	r3, #16
 80004f2:	687a      	ldr	r2, [r7, #4]
 80004f4:	4611      	mov	r1, r2
 80004f6:	4618      	mov	r0, r3
 80004f8:	f002 fcd4 	bl	8002ea4 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80004fc:	6a38      	ldr	r0, [r7, #32]
 80004fe:	f000 ff19 	bl	8001334 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8000502:	f001 fd19 	bl	8001f38 <xTaskResumeAll>
 8000506:	4603      	mov	r3, r0
 8000508:	2b00      	cmp	r3, #0
 800050a:	d188      	bne.n	800041e <xQueueGenericSend+0x7e>
                {
                    portYIELD_WITHIN_API();
 800050c:	f004 fb6e 	bl	8004bec <vPortYield>
 8000510:	e785      	b.n	800041e <xQueueGenericSend+0x7e>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8000512:	6a38      	ldr	r0, [r7, #32]
 8000514:	f000 ff0e 	bl	8001334 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000518:	f001 fd0e 	bl	8001f38 <xTaskResumeAll>
 800051c:	e77f      	b.n	800041e <xQueueGenericSend+0x7e>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 800051e:	6a38      	ldr	r0, [r7, #32]
 8000520:	f000 ff08 	bl	8001334 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000524:	f001 fd08 	bl	8001f38 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8000528:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 800052a:	4618      	mov	r0, r3
 800052c:	3728      	adds	r7, #40	; 0x28
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}

08000532 <xQueuePeek>:
/*-----------------------------------------------------------*/

BaseType_t xQueuePeek( QueueHandle_t xQueue,
                       void * const pvBuffer,
                       TickType_t xTicksToWait )
{
 8000532:	b580      	push	{r7, lr}
 8000534:	b08a      	sub	sp, #40	; 0x28
 8000536:	af00      	add	r7, sp, #0
 8000538:	60f8      	str	r0, [r7, #12]
 800053a:	60b9      	str	r1, [r7, #8]
 800053c:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 800053e:	2300      	movs	r3, #0
 8000540:	627b      	str	r3, [r7, #36]	; 0x24
    TimeOut_t xTimeOut;
    int8_t * pcOriginalReadPosition;
    Queue_t * const pxQueue = xQueue;
 8000542:	68fb      	ldr	r3, [r7, #12]
 8000544:	623b      	str	r3, [r7, #32]

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8000546:	6a3b      	ldr	r3, [r7, #32]
 8000548:	2b00      	cmp	r3, #0
 800054a:	d102      	bne.n	8000552 <xQueuePeek+0x20>
 800054c:	f004 fc23 	bl	8004d96 <ulSetInterruptMask>
 8000550:	e7fe      	b.n	8000550 <xQueuePeek+0x1e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer. */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000552:	68bb      	ldr	r3, [r7, #8]
 8000554:	2b00      	cmp	r3, #0
 8000556:	d103      	bne.n	8000560 <xQueuePeek+0x2e>
 8000558:	6a3b      	ldr	r3, [r7, #32]
 800055a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800055c:	2b00      	cmp	r3, #0
 800055e:	d101      	bne.n	8000564 <xQueuePeek+0x32>
 8000560:	2301      	movs	r3, #1
 8000562:	e000      	b.n	8000566 <xQueuePeek+0x34>
 8000564:	2300      	movs	r3, #0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d102      	bne.n	8000570 <xQueuePeek+0x3e>
 800056a:	f004 fc14 	bl	8004d96 <ulSetInterruptMask>
 800056e:	e7fe      	b.n	800056e <xQueuePeek+0x3c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000570:	f002 ff3e 	bl	80033f0 <xTaskGetSchedulerState>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	d102      	bne.n	8000580 <xQueuePeek+0x4e>
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	2b00      	cmp	r3, #0
 800057e:	d101      	bne.n	8000584 <xQueuePeek+0x52>
 8000580:	2301      	movs	r3, #1
 8000582:	e000      	b.n	8000586 <xQueuePeek+0x54>
 8000584:	2300      	movs	r3, #0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d102      	bne.n	8000590 <xQueuePeek+0x5e>
 800058a:	f004 fc04 	bl	8004d96 <ulSetInterruptMask>
 800058e:	e7fe      	b.n	800058e <xQueuePeek+0x5c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8000590:	f004 fb3e 	bl	8004c10 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000594:	6a3b      	ldr	r3, [r7, #32]
 8000596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000598:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800059a:	69fb      	ldr	r3, [r7, #28]
 800059c:	2b00      	cmp	r3, #0
 800059e:	d01b      	beq.n	80005d8 <xQueuePeek+0xa6>
            {
                /* Remember the read position so it can be reset after the data
                 * is read from the queue as this function is only peeking the
                 * data, not removing it. */
                pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 80005a0:	6a3b      	ldr	r3, [r7, #32]
 80005a2:	68db      	ldr	r3, [r3, #12]
 80005a4:	61bb      	str	r3, [r7, #24]

                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80005a6:	68b9      	ldr	r1, [r7, #8]
 80005a8:	6a38      	ldr	r0, [r7, #32]
 80005aa:	f000 ffad 	bl	8001508 <prvCopyDataFromQueue>
                traceQUEUE_PEEK( pxQueue );

                /* The data is not being removed, so reset the read pointer. */
                pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 80005ae:	6a3b      	ldr	r3, [r7, #32]
 80005b0:	69ba      	ldr	r2, [r7, #24]
 80005b2:	60da      	str	r2, [r3, #12]

                /* The data is being left in the queue, so see if there are
                 * any other tasks waiting for the data. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80005b4:	6a3b      	ldr	r3, [r7, #32]
 80005b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d009      	beq.n	80005d0 <xQueuePeek+0x9e>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80005bc:	6a3b      	ldr	r3, [r7, #32]
 80005be:	3324      	adds	r3, #36	; 0x24
 80005c0:	4618      	mov	r0, r3
 80005c2:	f002 fd0f 	bl	8002fe4 <xTaskRemoveFromEventList>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <xQueuePeek+0x9e>
                    {
                        /* The task waiting has a higher priority than this task. */
                        queueYIELD_IF_USING_PREEMPTION();
 80005cc:	f004 fb0e 	bl	8004bec <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80005d0:	f004 fb30 	bl	8004c34 <vPortExitCritical>
                return pdPASS;
 80005d4:	2301      	movs	r3, #1
 80005d6:	e063      	b.n	80006a0 <xQueuePeek+0x16e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d103      	bne.n	80005e6 <xQueuePeek+0xb4>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80005de:	f004 fb29 	bl	8004c34 <vPortExitCritical>
                    traceQUEUE_PEEK_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80005e2:	2300      	movs	r3, #0
 80005e4:	e05c      	b.n	80006a0 <xQueuePeek+0x16e>
                }
                else if( xEntryTimeSet == pdFALSE )
 80005e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d106      	bne.n	80005fa <xQueuePeek+0xc8>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure ready to enter the blocked
                     * state. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80005ec:	f107 0310 	add.w	r3, r7, #16
 80005f0:	4618      	mov	r0, r3
 80005f2:	f003 f90d 	bl	8003810 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80005f6:	2301      	movs	r3, #1
 80005f8:	627b      	str	r3, [r7, #36]	; 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80005fa:	f004 fb1b 	bl	8004c34 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now that the critical section has been exited. */

        vTaskSuspendAll();
 80005fe:	f001 fc8d 	bl	8001f1c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000602:	f004 fb05 	bl	8004c10 <vPortEnterCritical>
 8000606:	6a3b      	ldr	r3, [r7, #32]
 8000608:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800060c:	b25b      	sxtb	r3, r3
 800060e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000612:	d103      	bne.n	800061c <xQueuePeek+0xea>
 8000614:	6a3b      	ldr	r3, [r7, #32]
 8000616:	2200      	movs	r2, #0
 8000618:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800061c:	6a3b      	ldr	r3, [r7, #32]
 800061e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000622:	b25b      	sxtb	r3, r3
 8000624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000628:	d103      	bne.n	8000632 <xQueuePeek+0x100>
 800062a:	6a3b      	ldr	r3, [r7, #32]
 800062c:	2200      	movs	r2, #0
 800062e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000632:	f004 faff 	bl	8004c34 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000636:	1d3a      	adds	r2, r7, #4
 8000638:	f107 0310 	add.w	r3, r7, #16
 800063c:	4611      	mov	r1, r2
 800063e:	4618      	mov	r0, r3
 8000640:	f002 faa6 	bl	8002b90 <xTaskCheckForTimeOut>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d11d      	bne.n	8000686 <xQueuePeek+0x154>
        {
            /* Timeout has not expired yet, check to see if there is data in the
            * queue now, and if not enter the Blocked state to wait for data. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800064a:	6a38      	ldr	r0, [r7, #32]
 800064c:	f000 fec4 	bl	80013d8 <prvIsQueueEmpty>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d011      	beq.n	800067a <xQueuePeek+0x148>
            {
                traceBLOCKING_ON_QUEUE_PEEK( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000656:	6a3b      	ldr	r3, [r7, #32]
 8000658:	3324      	adds	r3, #36	; 0x24
 800065a:	687a      	ldr	r2, [r7, #4]
 800065c:	4611      	mov	r1, r2
 800065e:	4618      	mov	r0, r3
 8000660:	f002 fc20 	bl	8002ea4 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8000664:	6a38      	ldr	r0, [r7, #32]
 8000666:	f000 fe65 	bl	8001334 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800066a:	f001 fc65 	bl	8001f38 <xTaskResumeAll>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d18d      	bne.n	8000590 <xQueuePeek+0x5e>
                {
                    portYIELD_WITHIN_API();
 8000674:	f004 faba 	bl	8004bec <vPortYield>
 8000678:	e78a      	b.n	8000590 <xQueuePeek+0x5e>
            }
            else
            {
                /* There is data in the queue now, so don't enter the blocked
                 * state, instead return to try and obtain the data. */
                prvUnlockQueue( pxQueue );
 800067a:	6a38      	ldr	r0, [r7, #32]
 800067c:	f000 fe5a 	bl	8001334 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000680:	f001 fc5a 	bl	8001f38 <xTaskResumeAll>
 8000684:	e784      	b.n	8000590 <xQueuePeek+0x5e>
        }
        else
        {
            /* The timeout has expired.  If there is still no data in the queue
             * exit, otherwise go back and try to read the data again. */
            prvUnlockQueue( pxQueue );
 8000686:	6a38      	ldr	r0, [r7, #32]
 8000688:	f000 fe54 	bl	8001334 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800068c:	f001 fc54 	bl	8001f38 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000690:	6a38      	ldr	r0, [r7, #32]
 8000692:	f000 fea1 	bl	80013d8 <prvIsQueueEmpty>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	f43f af79 	beq.w	8000590 <xQueuePeek+0x5e>
            {
                traceQUEUE_PEEK_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800069e:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80006a0:	4618      	mov	r0, r3
 80006a2:	3728      	adds	r7, #40	; 0x28
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}

080006a8 <xQueuePeekFromISR>:
}
/*-----------------------------------------------------------*/

BaseType_t xQueuePeekFromISR( QueueHandle_t xQueue,
                              void * const pvBuffer )
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b086      	sub	sp, #24
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
 80006b0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    int8_t * pcOriginalReadPosition;
    Queue_t * const pxQueue = xQueue;
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 80006b6:	693b      	ldr	r3, [r7, #16]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d102      	bne.n	80006c2 <xQueuePeekFromISR+0x1a>
 80006bc:	f004 fb6b 	bl	8004d96 <ulSetInterruptMask>
 80006c0:	e7fe      	b.n	80006c0 <xQueuePeekFromISR+0x18>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80006c2:	683b      	ldr	r3, [r7, #0]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d103      	bne.n	80006d0 <xQueuePeekFromISR+0x28>
 80006c8:	693b      	ldr	r3, [r7, #16]
 80006ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d101      	bne.n	80006d4 <xQueuePeekFromISR+0x2c>
 80006d0:	2301      	movs	r3, #1
 80006d2:	e000      	b.n	80006d6 <xQueuePeekFromISR+0x2e>
 80006d4:	2300      	movs	r3, #0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d102      	bne.n	80006e0 <xQueuePeekFromISR+0x38>
 80006da:	f004 fb5c 	bl	8004d96 <ulSetInterruptMask>
 80006de:	e7fe      	b.n	80006de <xQueuePeekFromISR+0x36>
    configASSERT( pxQueue->uxItemSize != 0 ); /* Can't peek a semaphore. */
 80006e0:	693b      	ldr	r3, [r7, #16]
 80006e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d102      	bne.n	80006ee <xQueuePeekFromISR+0x46>
 80006e8:	f004 fb55 	bl	8004d96 <ulSetInterruptMask>
 80006ec:	e7fe      	b.n	80006ec <xQueuePeekFromISR+0x44>
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80006ee:	f004 fb52 	bl	8004d96 <ulSetInterruptMask>
 80006f2:	60f8      	str	r0, [r7, #12]
    {
        /* Cannot block in an ISR, so check there is data available. */
        if( pxQueue->uxMessagesWaiting > ( UBaseType_t ) 0 )
 80006f4:	693b      	ldr	r3, [r7, #16]
 80006f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d00c      	beq.n	8000716 <xQueuePeekFromISR+0x6e>
        {
            traceQUEUE_PEEK_FROM_ISR( pxQueue );

            /* Remember the read position so it can be reset as nothing is
             * actually being removed from the queue. */
            pcOriginalReadPosition = pxQueue->u.xQueue.pcReadFrom;
 80006fc:	693b      	ldr	r3, [r7, #16]
 80006fe:	68db      	ldr	r3, [r3, #12]
 8000700:	60bb      	str	r3, [r7, #8]
            prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000702:	6839      	ldr	r1, [r7, #0]
 8000704:	6938      	ldr	r0, [r7, #16]
 8000706:	f000 feff 	bl	8001508 <prvCopyDataFromQueue>
            pxQueue->u.xQueue.pcReadFrom = pcOriginalReadPosition;
 800070a:	693b      	ldr	r3, [r7, #16]
 800070c:	68ba      	ldr	r2, [r7, #8]
 800070e:	60da      	str	r2, [r3, #12]

            xReturn = pdPASS;
 8000710:	2301      	movs	r3, #1
 8000712:	617b      	str	r3, [r7, #20]
 8000714:	e001      	b.n	800071a <xQueuePeekFromISR+0x72>
        }
        else
        {
            xReturn = pdFAIL;
 8000716:	2300      	movs	r3, #0
 8000718:	617b      	str	r3, [r7, #20]
            traceQUEUE_PEEK_FROM_ISR_FAILED( pxQueue );
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800071a:	68f8      	ldr	r0, [r7, #12]
 800071c:	f004 fb48 	bl	8004db0 <vClearInterruptMask>

    return xReturn;
 8000720:	697b      	ldr	r3, [r7, #20]
}
 8000722:	4618      	mov	r0, r3
 8000724:	3718      	adds	r7, #24
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}

0800072a <xQueueReceive>:
{
 800072a:	b580      	push	{r7, lr}
 800072c:	b08a      	sub	sp, #40	; 0x28
 800072e:	af00      	add	r7, sp, #0
 8000730:	60f8      	str	r0, [r7, #12]
 8000732:	60b9      	str	r1, [r7, #8]
 8000734:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8000736:	2300      	movs	r3, #0
 8000738:	627b      	str	r3, [r7, #36]	; 0x24
    Queue_t * const pxQueue = xQueue;
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	623b      	str	r3, [r7, #32]
    configASSERT( ( pxQueue ) );
 800073e:	6a3b      	ldr	r3, [r7, #32]
 8000740:	2b00      	cmp	r3, #0
 8000742:	d102      	bne.n	800074a <xQueueReceive+0x20>
 8000744:	f004 fb27 	bl	8004d96 <ulSetInterruptMask>
 8000748:	e7fe      	b.n	8000748 <xQueueReceive+0x1e>
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800074a:	68bb      	ldr	r3, [r7, #8]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d103      	bne.n	8000758 <xQueueReceive+0x2e>
 8000750:	6a3b      	ldr	r3, [r7, #32]
 8000752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000754:	2b00      	cmp	r3, #0
 8000756:	d101      	bne.n	800075c <xQueueReceive+0x32>
 8000758:	2301      	movs	r3, #1
 800075a:	e000      	b.n	800075e <xQueueReceive+0x34>
 800075c:	2300      	movs	r3, #0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d102      	bne.n	8000768 <xQueueReceive+0x3e>
 8000762:	f004 fb18 	bl	8004d96 <ulSetInterruptMask>
 8000766:	e7fe      	b.n	8000766 <xQueueReceive+0x3c>
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000768:	f002 fe42 	bl	80033f0 <xTaskGetSchedulerState>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d102      	bne.n	8000778 <xQueueReceive+0x4e>
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	2b00      	cmp	r3, #0
 8000776:	d101      	bne.n	800077c <xQueueReceive+0x52>
 8000778:	2301      	movs	r3, #1
 800077a:	e000      	b.n	800077e <xQueueReceive+0x54>
 800077c:	2300      	movs	r3, #0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d102      	bne.n	8000788 <xQueueReceive+0x5e>
 8000782:	f004 fb08 	bl	8004d96 <ulSetInterruptMask>
 8000786:	e7fe      	b.n	8000786 <xQueueReceive+0x5c>
        taskENTER_CRITICAL();
 8000788:	f004 fa42 	bl	8004c10 <vPortEnterCritical>
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800078c:	6a3b      	ldr	r3, [r7, #32]
 800078e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000790:	61fb      	str	r3, [r7, #28]
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000792:	69fb      	ldr	r3, [r7, #28]
 8000794:	2b00      	cmp	r3, #0
 8000796:	d019      	beq.n	80007cc <xQueueReceive+0xa2>
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000798:	68b9      	ldr	r1, [r7, #8]
 800079a:	6a38      	ldr	r0, [r7, #32]
 800079c:	f000 feb4 	bl	8001508 <prvCopyDataFromQueue>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80007a0:	69fb      	ldr	r3, [r7, #28]
 80007a2:	1e5a      	subs	r2, r3, #1
 80007a4:	6a3b      	ldr	r3, [r7, #32]
 80007a6:	639a      	str	r2, [r3, #56]	; 0x38
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80007a8:	6a3b      	ldr	r3, [r7, #32]
 80007aa:	691b      	ldr	r3, [r3, #16]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d009      	beq.n	80007c4 <xQueueReceive+0x9a>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80007b0:	6a3b      	ldr	r3, [r7, #32]
 80007b2:	3310      	adds	r3, #16
 80007b4:	4618      	mov	r0, r3
 80007b6:	f002 fc15 	bl	8002fe4 <xTaskRemoveFromEventList>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <xQueueReceive+0x9a>
                        queueYIELD_IF_USING_PREEMPTION();
 80007c0:	f004 fa14 	bl	8004bec <vPortYield>
                taskEXIT_CRITICAL();
 80007c4:	f004 fa36 	bl	8004c34 <vPortExitCritical>
                return pdPASS;
 80007c8:	2301      	movs	r3, #1
 80007ca:	e063      	b.n	8000894 <xQueueReceive+0x16a>
                if( xTicksToWait == ( TickType_t ) 0 )
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d103      	bne.n	80007da <xQueueReceive+0xb0>
                    taskEXIT_CRITICAL();
 80007d2:	f004 fa2f 	bl	8004c34 <vPortExitCritical>
                    return errQUEUE_EMPTY;
 80007d6:	2300      	movs	r3, #0
 80007d8:	e05c      	b.n	8000894 <xQueueReceive+0x16a>
                else if( xEntryTimeSet == pdFALSE )
 80007da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d106      	bne.n	80007ee <xQueueReceive+0xc4>
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80007e0:	f107 0314 	add.w	r3, r7, #20
 80007e4:	4618      	mov	r0, r3
 80007e6:	f003 f813 	bl	8003810 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80007ea:	2301      	movs	r3, #1
 80007ec:	627b      	str	r3, [r7, #36]	; 0x24
        taskEXIT_CRITICAL();
 80007ee:	f004 fa21 	bl	8004c34 <vPortExitCritical>
        vTaskSuspendAll();
 80007f2:	f001 fb93 	bl	8001f1c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80007f6:	f004 fa0b 	bl	8004c10 <vPortEnterCritical>
 80007fa:	6a3b      	ldr	r3, [r7, #32]
 80007fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000800:	b25b      	sxtb	r3, r3
 8000802:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000806:	d103      	bne.n	8000810 <xQueueReceive+0xe6>
 8000808:	6a3b      	ldr	r3, [r7, #32]
 800080a:	2200      	movs	r2, #0
 800080c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000810:	6a3b      	ldr	r3, [r7, #32]
 8000812:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000816:	b25b      	sxtb	r3, r3
 8000818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800081c:	d103      	bne.n	8000826 <xQueueReceive+0xfc>
 800081e:	6a3b      	ldr	r3, [r7, #32]
 8000820:	2200      	movs	r2, #0
 8000822:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000826:	f004 fa05 	bl	8004c34 <vPortExitCritical>
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800082a:	1d3a      	adds	r2, r7, #4
 800082c:	f107 0314 	add.w	r3, r7, #20
 8000830:	4611      	mov	r1, r2
 8000832:	4618      	mov	r0, r3
 8000834:	f002 f9ac 	bl	8002b90 <xTaskCheckForTimeOut>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d11d      	bne.n	800087a <xQueueReceive+0x150>
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800083e:	6a38      	ldr	r0, [r7, #32]
 8000840:	f000 fdca 	bl	80013d8 <prvIsQueueEmpty>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d011      	beq.n	800086e <xQueueReceive+0x144>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800084a:	6a3b      	ldr	r3, [r7, #32]
 800084c:	3324      	adds	r3, #36	; 0x24
 800084e:	687a      	ldr	r2, [r7, #4]
 8000850:	4611      	mov	r1, r2
 8000852:	4618      	mov	r0, r3
 8000854:	f002 fb26 	bl	8002ea4 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8000858:	6a38      	ldr	r0, [r7, #32]
 800085a:	f000 fd6b 	bl	8001334 <prvUnlockQueue>
                if( xTaskResumeAll() == pdFALSE )
 800085e:	f001 fb6b 	bl	8001f38 <xTaskResumeAll>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d18f      	bne.n	8000788 <xQueueReceive+0x5e>
                    portYIELD_WITHIN_API();
 8000868:	f004 f9c0 	bl	8004bec <vPortYield>
 800086c:	e78c      	b.n	8000788 <xQueueReceive+0x5e>
                prvUnlockQueue( pxQueue );
 800086e:	6a38      	ldr	r0, [r7, #32]
 8000870:	f000 fd60 	bl	8001334 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000874:	f001 fb60 	bl	8001f38 <xTaskResumeAll>
 8000878:	e786      	b.n	8000788 <xQueueReceive+0x5e>
            prvUnlockQueue( pxQueue );
 800087a:	6a38      	ldr	r0, [r7, #32]
 800087c:	f000 fd5a 	bl	8001334 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000880:	f001 fb5a 	bl	8001f38 <xTaskResumeAll>
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000884:	6a38      	ldr	r0, [r7, #32]
 8000886:	f000 fda7 	bl	80013d8 <prvIsQueueEmpty>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	f43f af7b 	beq.w	8000788 <xQueueReceive+0x5e>
                return errQUEUE_EMPTY;
 8000892:	2300      	movs	r3, #0
}
 8000894:	4618      	mov	r0, r3
 8000896:	3728      	adds	r7, #40	; 0x28
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}

0800089c <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b084      	sub	sp, #16
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    configASSERT( xQueue );
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d102      	bne.n	80008b0 <uxQueueMessagesWaiting+0x14>
 80008aa:	f004 fa74 	bl	8004d96 <ulSetInterruptMask>
 80008ae:	e7fe      	b.n	80008ae <uxQueueMessagesWaiting+0x12>

    taskENTER_CRITICAL();
 80008b0:	f004 f9ae 	bl	8004c10 <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80008b8:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 80008ba:	f004 f9bb 	bl	8004c34 <vPortExitCritical>

    return uxReturn;
 80008be:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80008c0:	4618      	mov	r0, r3
 80008c2:	3710      	adds	r7, #16
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}

080008c8 <uxQueueSpacesAvailable>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b084      	sub	sp, #16
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;
    Queue_t * const pxQueue = xQueue;
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d102      	bne.n	80008e0 <uxQueueSpacesAvailable+0x18>
 80008da:	f004 fa5c 	bl	8004d96 <ulSetInterruptMask>
 80008de:	e7fe      	b.n	80008de <uxQueueSpacesAvailable+0x16>

    taskENTER_CRITICAL();
 80008e0:	f004 f996 	bl	8004c10 <vPortEnterCritical>
    {
        uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80008ec:	1ad3      	subs	r3, r2, r3
 80008ee:	60bb      	str	r3, [r7, #8]
    }
    taskEXIT_CRITICAL();
 80008f0:	f004 f9a0 	bl	8004c34 <vPortExitCritical>

    return uxReturn;
 80008f4:	68bb      	ldr	r3, [r7, #8]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80008f6:	4618      	mov	r0, r3
 80008f8:	3710      	adds	r7, #16
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}

080008fe <vQueueDelete>:
    return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80008fe:	b580      	push	{r7, lr}
 8000900:	b084      	sub	sp, #16
 8000902:	af00      	add	r7, sp, #0
 8000904:	6078      	str	r0, [r7, #4]
    Queue_t * const pxQueue = xQueue;
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	2b00      	cmp	r3, #0
 800090e:	d102      	bne.n	8000916 <vQueueDelete+0x18>
 8000910:	f004 fa41 	bl	8004d96 <ulSetInterruptMask>
 8000914:	e7fe      	b.n	8000914 <vQueueDelete+0x16>
    traceQUEUE_DELETE( pxQueue );

    #if ( configQUEUE_REGISTRY_SIZE > 0 )
    {
        vQueueUnregisterQueue( pxQueue );
 8000916:	68f8      	ldr	r0, [r7, #12]
 8000918:	f000 fb9c 	bl	8001054 <vQueueUnregisterQueue>

    #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
    {
        /* The queue can only have been allocated dynamically - free it
         * again. */
        vPortFree( pxQueue );
 800091c:	68f8      	ldr	r0, [r7, #12]
 800091e:	f004 fb8d 	bl	800503c <vPortFree>
        /* The queue must have been statically allocated, so is not going to be
         * deleted.  Avoid compiler warnings about the unused parameter. */
        ( void ) pxQueue;
    }
    #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8000922:	bf00      	nop
 8000924:	3710      	adds	r7, #16
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}

0800092a <xQueueGenericSendFromISR>:
{
 800092a:	b580      	push	{r7, lr}
 800092c:	b08a      	sub	sp, #40	; 0x28
 800092e:	af00      	add	r7, sp, #0
 8000930:	60f8      	str	r0, [r7, #12]
 8000932:	60b9      	str	r1, [r7, #8]
 8000934:	607a      	str	r2, [r7, #4]
 8000936:	603b      	str	r3, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	623b      	str	r3, [r7, #32]
    configASSERT( pxQueue );
 800093c:	6a3b      	ldr	r3, [r7, #32]
 800093e:	2b00      	cmp	r3, #0
 8000940:	d102      	bne.n	8000948 <xQueueGenericSendFromISR+0x1e>
 8000942:	f004 fa28 	bl	8004d96 <ulSetInterruptMask>
 8000946:	e7fe      	b.n	8000946 <xQueueGenericSendFromISR+0x1c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000948:	68bb      	ldr	r3, [r7, #8]
 800094a:	2b00      	cmp	r3, #0
 800094c:	d103      	bne.n	8000956 <xQueueGenericSendFromISR+0x2c>
 800094e:	6a3b      	ldr	r3, [r7, #32]
 8000950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000952:	2b00      	cmp	r3, #0
 8000954:	d101      	bne.n	800095a <xQueueGenericSendFromISR+0x30>
 8000956:	2301      	movs	r3, #1
 8000958:	e000      	b.n	800095c <xQueueGenericSendFromISR+0x32>
 800095a:	2300      	movs	r3, #0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d102      	bne.n	8000966 <xQueueGenericSendFromISR+0x3c>
 8000960:	f004 fa19 	bl	8004d96 <ulSetInterruptMask>
 8000964:	e7fe      	b.n	8000964 <xQueueGenericSendFromISR+0x3a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	2b02      	cmp	r3, #2
 800096a:	d103      	bne.n	8000974 <xQueueGenericSendFromISR+0x4a>
 800096c:	6a3b      	ldr	r3, [r7, #32]
 800096e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000970:	2b01      	cmp	r3, #1
 8000972:	d101      	bne.n	8000978 <xQueueGenericSendFromISR+0x4e>
 8000974:	2301      	movs	r3, #1
 8000976:	e000      	b.n	800097a <xQueueGenericSendFromISR+0x50>
 8000978:	2300      	movs	r3, #0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d102      	bne.n	8000984 <xQueueGenericSendFromISR+0x5a>
 800097e:	f004 fa0a 	bl	8004d96 <ulSetInterruptMask>
 8000982:	e7fe      	b.n	8000982 <xQueueGenericSendFromISR+0x58>
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8000984:	f004 fa07 	bl	8004d96 <ulSetInterruptMask>
 8000988:	61f8      	str	r0, [r7, #28]
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800098a:	6a3b      	ldr	r3, [r7, #32]
 800098c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800098e:	6a3b      	ldr	r3, [r7, #32]
 8000990:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000992:	429a      	cmp	r2, r3
 8000994:	d302      	bcc.n	800099c <xQueueGenericSendFromISR+0x72>
 8000996:	683b      	ldr	r3, [r7, #0]
 8000998:	2b02      	cmp	r3, #2
 800099a:	d13c      	bne.n	8000a16 <xQueueGenericSendFromISR+0xec>
            const int8_t cTxLock = pxQueue->cTxLock;
 800099c:	6a3b      	ldr	r3, [r7, #32]
 800099e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80009a2:	76fb      	strb	r3, [r7, #27]
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80009a4:	6a3b      	ldr	r3, [r7, #32]
 80009a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80009a8:	617b      	str	r3, [r7, #20]
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80009aa:	683a      	ldr	r2, [r7, #0]
 80009ac:	68b9      	ldr	r1, [r7, #8]
 80009ae:	6a38      	ldr	r0, [r7, #32]
 80009b0:	f000 fd40 	bl	8001434 <prvCopyDataToQueue>
            if( cTxLock == queueUNLOCKED )
 80009b4:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80009b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009bc:	d112      	bne.n	80009e4 <xQueueGenericSendFromISR+0xba>
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80009be:	6a3b      	ldr	r3, [r7, #32]
 80009c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d024      	beq.n	8000a10 <xQueueGenericSendFromISR+0xe6>
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80009c6:	6a3b      	ldr	r3, [r7, #32]
 80009c8:	3324      	adds	r3, #36	; 0x24
 80009ca:	4618      	mov	r0, r3
 80009cc:	f002 fb0a 	bl	8002fe4 <xTaskRemoveFromEventList>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d01c      	beq.n	8000a10 <xQueueGenericSendFromISR+0xe6>
                            if( pxHigherPriorityTaskWoken != NULL )
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d019      	beq.n	8000a10 <xQueueGenericSendFromISR+0xe6>
                                *pxHigherPriorityTaskWoken = pdTRUE;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	2201      	movs	r2, #1
 80009e0:	601a      	str	r2, [r3, #0]
 80009e2:	e015      	b.n	8000a10 <xQueueGenericSendFromISR+0xe6>
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 80009e4:	f001 fbb8 	bl	8002158 <uxTaskGetNumberOfTasks>
 80009e8:	6138      	str	r0, [r7, #16]
 80009ea:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80009ee:	693a      	ldr	r2, [r7, #16]
 80009f0:	429a      	cmp	r2, r3
 80009f2:	d90d      	bls.n	8000a10 <xQueueGenericSendFromISR+0xe6>
 80009f4:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80009f8:	2b7f      	cmp	r3, #127	; 0x7f
 80009fa:	d102      	bne.n	8000a02 <xQueueGenericSendFromISR+0xd8>
 80009fc:	f004 f9cb 	bl	8004d96 <ulSetInterruptMask>
 8000a00:	e7fe      	b.n	8000a00 <xQueueGenericSendFromISR+0xd6>
 8000a02:	7efb      	ldrb	r3, [r7, #27]
 8000a04:	3301      	adds	r3, #1
 8000a06:	b2db      	uxtb	r3, r3
 8000a08:	b25a      	sxtb	r2, r3
 8000a0a:	6a3b      	ldr	r3, [r7, #32]
 8000a0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            xReturn = pdPASS;
 8000a10:	2301      	movs	r3, #1
 8000a12:	627b      	str	r3, [r7, #36]	; 0x24
        {
 8000a14:	e001      	b.n	8000a1a <xQueueGenericSendFromISR+0xf0>
            xReturn = errQUEUE_FULL;
 8000a16:	2300      	movs	r3, #0
 8000a18:	627b      	str	r3, [r7, #36]	; 0x24
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8000a1a:	69f8      	ldr	r0, [r7, #28]
 8000a1c:	f004 f9c8 	bl	8004db0 <vClearInterruptMask>
    return xReturn;
 8000a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	3728      	adds	r7, #40	; 0x28
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}

08000a2a <xQueueGiveFromISR>:
{
 8000a2a:	b580      	push	{r7, lr}
 8000a2c:	b088      	sub	sp, #32
 8000a2e:	af00      	add	r7, sp, #0
 8000a30:	6078      	str	r0, [r7, #4]
 8000a32:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	61bb      	str	r3, [r7, #24]
    configASSERT( pxQueue );
 8000a38:	69bb      	ldr	r3, [r7, #24]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d102      	bne.n	8000a44 <xQueueGiveFromISR+0x1a>
 8000a3e:	f004 f9aa 	bl	8004d96 <ulSetInterruptMask>
 8000a42:	e7fe      	b.n	8000a42 <xQueueGiveFromISR+0x18>
    configASSERT( pxQueue->uxItemSize == 0 );
 8000a44:	69bb      	ldr	r3, [r7, #24]
 8000a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d002      	beq.n	8000a52 <xQueueGiveFromISR+0x28>
 8000a4c:	f004 f9a3 	bl	8004d96 <ulSetInterruptMask>
 8000a50:	e7fe      	b.n	8000a50 <xQueueGiveFromISR+0x26>
    configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8000a52:	69bb      	ldr	r3, [r7, #24]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d103      	bne.n	8000a62 <xQueueGiveFromISR+0x38>
 8000a5a:	69bb      	ldr	r3, [r7, #24]
 8000a5c:	689b      	ldr	r3, [r3, #8]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d101      	bne.n	8000a66 <xQueueGiveFromISR+0x3c>
 8000a62:	2301      	movs	r3, #1
 8000a64:	e000      	b.n	8000a68 <xQueueGiveFromISR+0x3e>
 8000a66:	2300      	movs	r3, #0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d102      	bne.n	8000a72 <xQueueGiveFromISR+0x48>
 8000a6c:	f004 f993 	bl	8004d96 <ulSetInterruptMask>
 8000a70:	e7fe      	b.n	8000a70 <xQueueGiveFromISR+0x46>
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8000a72:	f004 f990 	bl	8004d96 <ulSetInterruptMask>
 8000a76:	6178      	str	r0, [r7, #20]
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000a78:	69bb      	ldr	r3, [r7, #24]
 8000a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a7c:	613b      	str	r3, [r7, #16]
        if( uxMessagesWaiting < pxQueue->uxLength )
 8000a7e:	69bb      	ldr	r3, [r7, #24]
 8000a80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a82:	693a      	ldr	r2, [r7, #16]
 8000a84:	429a      	cmp	r2, r3
 8000a86:	d238      	bcs.n	8000afa <xQueueGiveFromISR+0xd0>
            const int8_t cTxLock = pxQueue->cTxLock;
 8000a88:	69bb      	ldr	r3, [r7, #24]
 8000a8a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000a8e:	73fb      	strb	r3, [r7, #15]
            pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8000a90:	693b      	ldr	r3, [r7, #16]
 8000a92:	1c5a      	adds	r2, r3, #1
 8000a94:	69bb      	ldr	r3, [r7, #24]
 8000a96:	639a      	str	r2, [r3, #56]	; 0x38
            if( cTxLock == queueUNLOCKED )
 8000a98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000aa0:	d112      	bne.n	8000ac8 <xQueueGiveFromISR+0x9e>
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8000aa2:	69bb      	ldr	r3, [r7, #24]
 8000aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d024      	beq.n	8000af4 <xQueueGiveFromISR+0xca>
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8000aaa:	69bb      	ldr	r3, [r7, #24]
 8000aac:	3324      	adds	r3, #36	; 0x24
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f002 fa98 	bl	8002fe4 <xTaskRemoveFromEventList>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d01c      	beq.n	8000af4 <xQueueGiveFromISR+0xca>
                            if( pxHigherPriorityTaskWoken != NULL )
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d019      	beq.n	8000af4 <xQueueGiveFromISR+0xca>
                                *pxHigherPriorityTaskWoken = pdTRUE;
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	601a      	str	r2, [r3, #0]
 8000ac6:	e015      	b.n	8000af4 <xQueueGiveFromISR+0xca>
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 8000ac8:	f001 fb46 	bl	8002158 <uxTaskGetNumberOfTasks>
 8000acc:	60b8      	str	r0, [r7, #8]
 8000ace:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ad2:	68ba      	ldr	r2, [r7, #8]
 8000ad4:	429a      	cmp	r2, r3
 8000ad6:	d90d      	bls.n	8000af4 <xQueueGiveFromISR+0xca>
 8000ad8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000adc:	2b7f      	cmp	r3, #127	; 0x7f
 8000ade:	d102      	bne.n	8000ae6 <xQueueGiveFromISR+0xbc>
 8000ae0:	f004 f959 	bl	8004d96 <ulSetInterruptMask>
 8000ae4:	e7fe      	b.n	8000ae4 <xQueueGiveFromISR+0xba>
 8000ae6:	7bfb      	ldrb	r3, [r7, #15]
 8000ae8:	3301      	adds	r3, #1
 8000aea:	b2db      	uxtb	r3, r3
 8000aec:	b25a      	sxtb	r2, r3
 8000aee:	69bb      	ldr	r3, [r7, #24]
 8000af0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            xReturn = pdPASS;
 8000af4:	2301      	movs	r3, #1
 8000af6:	61fb      	str	r3, [r7, #28]
 8000af8:	e001      	b.n	8000afe <xQueueGiveFromISR+0xd4>
            xReturn = errQUEUE_FULL;
 8000afa:	2300      	movs	r3, #0
 8000afc:	61fb      	str	r3, [r7, #28]
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8000afe:	6978      	ldr	r0, [r7, #20]
 8000b00:	f004 f956 	bl	8004db0 <vClearInterruptMask>
    return xReturn;
 8000b04:	69fb      	ldr	r3, [r7, #28]
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	3720      	adds	r7, #32
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}

08000b0e <xQueueReceiveFromISR>:
{
 8000b0e:	b580      	push	{r7, lr}
 8000b10:	b08a      	sub	sp, #40	; 0x28
 8000b12:	af00      	add	r7, sp, #0
 8000b14:	60f8      	str	r0, [r7, #12]
 8000b16:	60b9      	str	r1, [r7, #8]
 8000b18:	607a      	str	r2, [r7, #4]
    Queue_t * const pxQueue = xQueue;
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	623b      	str	r3, [r7, #32]
    configASSERT( pxQueue );
 8000b1e:	6a3b      	ldr	r3, [r7, #32]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d102      	bne.n	8000b2a <xQueueReceiveFromISR+0x1c>
 8000b24:	f004 f937 	bl	8004d96 <ulSetInterruptMask>
 8000b28:	e7fe      	b.n	8000b28 <xQueueReceiveFromISR+0x1a>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8000b2a:	68bb      	ldr	r3, [r7, #8]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d103      	bne.n	8000b38 <xQueueReceiveFromISR+0x2a>
 8000b30:	6a3b      	ldr	r3, [r7, #32]
 8000b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d101      	bne.n	8000b3c <xQueueReceiveFromISR+0x2e>
 8000b38:	2301      	movs	r3, #1
 8000b3a:	e000      	b.n	8000b3e <xQueueReceiveFromISR+0x30>
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d102      	bne.n	8000b48 <xQueueReceiveFromISR+0x3a>
 8000b42:	f004 f928 	bl	8004d96 <ulSetInterruptMask>
 8000b46:	e7fe      	b.n	8000b46 <xQueueReceiveFromISR+0x38>
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8000b48:	f004 f925 	bl	8004d96 <ulSetInterruptMask>
 8000b4c:	61f8      	str	r0, [r7, #28]
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8000b4e:	6a3b      	ldr	r3, [r7, #32]
 8000b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b52:	61bb      	str	r3, [r7, #24]
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8000b54:	69bb      	ldr	r3, [r7, #24]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d03c      	beq.n	8000bd4 <xQueueReceiveFromISR+0xc6>
            const int8_t cRxLock = pxQueue->cRxLock;
 8000b5a:	6a3b      	ldr	r3, [r7, #32]
 8000b5c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000b60:	75fb      	strb	r3, [r7, #23]
            prvCopyDataFromQueue( pxQueue, pvBuffer );
 8000b62:	68b9      	ldr	r1, [r7, #8]
 8000b64:	6a38      	ldr	r0, [r7, #32]
 8000b66:	f000 fccf 	bl	8001508 <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8000b6a:	69bb      	ldr	r3, [r7, #24]
 8000b6c:	1e5a      	subs	r2, r3, #1
 8000b6e:	6a3b      	ldr	r3, [r7, #32]
 8000b70:	639a      	str	r2, [r3, #56]	; 0x38
            if( cRxLock == queueUNLOCKED )
 8000b72:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000b76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b7a:	d112      	bne.n	8000ba2 <xQueueReceiveFromISR+0x94>
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000b7c:	6a3b      	ldr	r3, [r7, #32]
 8000b7e:	691b      	ldr	r3, [r3, #16]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d024      	beq.n	8000bce <xQueueReceiveFromISR+0xc0>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000b84:	6a3b      	ldr	r3, [r7, #32]
 8000b86:	3310      	adds	r3, #16
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f002 fa2b 	bl	8002fe4 <xTaskRemoveFromEventList>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d01c      	beq.n	8000bce <xQueueReceiveFromISR+0xc0>
                        if( pxHigherPriorityTaskWoken != NULL )
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d019      	beq.n	8000bce <xQueueReceiveFromISR+0xc0>
                            *pxHigherPriorityTaskWoken = pdTRUE;
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	601a      	str	r2, [r3, #0]
 8000ba0:	e015      	b.n	8000bce <xQueueReceiveFromISR+0xc0>
                prvIncrementQueueRxLock( pxQueue, cRxLock );
 8000ba2:	f001 fad9 	bl	8002158 <uxTaskGetNumberOfTasks>
 8000ba6:	6138      	str	r0, [r7, #16]
 8000ba8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000bac:	693a      	ldr	r2, [r7, #16]
 8000bae:	429a      	cmp	r2, r3
 8000bb0:	d90d      	bls.n	8000bce <xQueueReceiveFromISR+0xc0>
 8000bb2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000bb6:	2b7f      	cmp	r3, #127	; 0x7f
 8000bb8:	d102      	bne.n	8000bc0 <xQueueReceiveFromISR+0xb2>
 8000bba:	f004 f8ec 	bl	8004d96 <ulSetInterruptMask>
 8000bbe:	e7fe      	b.n	8000bbe <xQueueReceiveFromISR+0xb0>
 8000bc0:	7dfb      	ldrb	r3, [r7, #23]
 8000bc2:	3301      	adds	r3, #1
 8000bc4:	b2db      	uxtb	r3, r3
 8000bc6:	b25a      	sxtb	r2, r3
 8000bc8:	6a3b      	ldr	r3, [r7, #32]
 8000bca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            xReturn = pdPASS;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	627b      	str	r3, [r7, #36]	; 0x24
 8000bd2:	e001      	b.n	8000bd8 <xQueueReceiveFromISR+0xca>
            xReturn = pdFAIL;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	627b      	str	r3, [r7, #36]	; 0x24
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8000bd8:	69f8      	ldr	r0, [r7, #28]
 8000bda:	f004 f8e9 	bl	8004db0 <vClearInterruptMask>
    return xReturn;
 8000bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	3728      	adds	r7, #40	; 0x28
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}

08000be8 <xQueueIsQueueEmptyFromISR>:
    return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueEmptyFromISR( const QueueHandle_t xQueue )
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b084      	sub	sp, #16
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    Queue_t * const pxQueue = xQueue;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	60bb      	str	r3, [r7, #8]

    configASSERT( pxQueue );
 8000bf4:	68bb      	ldr	r3, [r7, #8]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d102      	bne.n	8000c00 <xQueueIsQueueEmptyFromISR+0x18>
 8000bfa:	f004 f8cc 	bl	8004d96 <ulSetInterruptMask>
 8000bfe:	e7fe      	b.n	8000bfe <xQueueIsQueueEmptyFromISR+0x16>

    if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d102      	bne.n	8000c0e <xQueueIsQueueEmptyFromISR+0x26>
    {
        xReturn = pdTRUE;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	60fb      	str	r3, [r7, #12]
 8000c0c:	e001      	b.n	8000c12 <xQueueIsQueueEmptyFromISR+0x2a>
    }
    else
    {
        xReturn = pdFALSE;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	60fb      	str	r3, [r7, #12]
    }

    return xReturn;
 8000c12:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8000c14:	4618      	mov	r0, r3
 8000c16:	3710      	adds	r7, #16
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}

08000c1c <xQueueIsQueueFullFromISR>:
    return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b084      	sub	sp, #16
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    Queue_t * const pxQueue = xQueue;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	60bb      	str	r3, [r7, #8]

    configASSERT( pxQueue );
 8000c28:	68bb      	ldr	r3, [r7, #8]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d102      	bne.n	8000c34 <xQueueIsQueueFullFromISR+0x18>
 8000c2e:	f004 f8b2 	bl	8004d96 <ulSetInterruptMask>
 8000c32:	e7fe      	b.n	8000c32 <xQueueIsQueueFullFromISR+0x16>

    if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c3c:	429a      	cmp	r2, r3
 8000c3e:	d102      	bne.n	8000c46 <xQueueIsQueueFullFromISR+0x2a>
    {
        xReturn = pdTRUE;
 8000c40:	2301      	movs	r3, #1
 8000c42:	60fb      	str	r3, [r7, #12]
 8000c44:	e001      	b.n	8000c4a <xQueueIsQueueFullFromISR+0x2e>
    }
    else
    {
        xReturn = pdFALSE;
 8000c46:	2300      	movs	r3, #0
 8000c48:	60fb      	str	r3, [r7, #12]
    }

    return xReturn;
 8000c4a:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	3710      	adds	r7, #16
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}

08000c54 <uxQueueMessagesWaitingFromISR>:
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b084      	sub	sp, #16
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
    Queue_t * const pxQueue = xQueue;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	60fb      	str	r3, [r7, #12]
    configASSERT( pxQueue );
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d102      	bne.n	8000c6c <uxQueueMessagesWaitingFromISR+0x18>
 8000c66:	f004 f896 	bl	8004d96 <ulSetInterruptMask>
 8000c6a:	e7fe      	b.n	8000c6a <uxQueueMessagesWaitingFromISR+0x16>
    uxReturn = pxQueue->uxMessagesWaiting;
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c70:	60bb      	str	r3, [r7, #8]
    return uxReturn;
 8000c72:	68bb      	ldr	r3, [r7, #8]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8000c74:	4618      	mov	r0, r3
 8000c76:	3710      	adds	r7, #16
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}

08000c7c <xQueueCreateMutex>:
    {
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b086      	sub	sp, #24
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	4603      	mov	r3, r0
 8000c84:	71fb      	strb	r3, [r7, #7]
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8000c86:	2301      	movs	r3, #1
 8000c88:	617b      	str	r3, [r7, #20]
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	613b      	str	r3, [r7, #16]
        xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8000c8e:	79fb      	ldrb	r3, [r7, #7]
 8000c90:	461a      	mov	r2, r3
 8000c92:	6939      	ldr	r1, [r7, #16]
 8000c94:	6978      	ldr	r0, [r7, #20]
 8000c96:	f000 fa35 	bl	8001104 <xQueueGenericCreate>
 8000c9a:	60f8      	str	r0, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8000c9c:	68f8      	ldr	r0, [r7, #12]
 8000c9e:	f000 fc7c 	bl	800159a <prvInitialiseMutex>
        return xNewQueue;
 8000ca2:	68fb      	ldr	r3, [r7, #12]
    }
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	3718      	adds	r7, #24
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}

08000cac <xQueueCreateCountingSemaphore>:
    {
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b084      	sub	sp, #16
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
 8000cb4:	6039      	str	r1, [r7, #0]
        QueueHandle_t xHandle = NULL;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	60fb      	str	r3, [r7, #12]
        if( ( uxMaxCount != 0 ) &&
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d010      	beq.n	8000ce2 <xQueueCreateCountingSemaphore+0x36>
 8000cc0:	683a      	ldr	r2, [r7, #0]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	429a      	cmp	r2, r3
 8000cc6:	d80c      	bhi.n	8000ce2 <xQueueCreateCountingSemaphore+0x36>
            xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8000cc8:	2202      	movs	r2, #2
 8000cca:	2100      	movs	r1, #0
 8000ccc:	6878      	ldr	r0, [r7, #4]
 8000cce:	f000 fa19 	bl	8001104 <xQueueGenericCreate>
 8000cd2:	60f8      	str	r0, [r7, #12]
            if( xHandle != NULL )
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d009      	beq.n	8000cee <xQueueCreateCountingSemaphore+0x42>
                ( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	683a      	ldr	r2, [r7, #0]
 8000cde:	639a      	str	r2, [r3, #56]	; 0x38
            if( xHandle != NULL )
 8000ce0:	e005      	b.n	8000cee <xQueueCreateCountingSemaphore+0x42>
            configASSERT( xHandle );
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d102      	bne.n	8000cee <xQueueCreateCountingSemaphore+0x42>
 8000ce8:	f004 f855 	bl	8004d96 <ulSetInterruptMask>
 8000cec:	e7fe      	b.n	8000cec <xQueueCreateCountingSemaphore+0x40>
        return xHandle;
 8000cee:	68fb      	ldr	r3, [r7, #12]
    }
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	3710      	adds	r7, #16
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <xQueueSemaphoreTake>:
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b08a      	sub	sp, #40	; 0x28
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
 8000d00:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 8000d02:	2300      	movs	r3, #0
 8000d04:	627b      	str	r3, [r7, #36]	; 0x24
    Queue_t * const pxQueue = xQueue;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	61fb      	str	r3, [r7, #28]
        BaseType_t xInheritanceOccurred = pdFALSE;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	623b      	str	r3, [r7, #32]
    configASSERT( ( pxQueue ) );
 8000d0e:	69fb      	ldr	r3, [r7, #28]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d102      	bne.n	8000d1a <xQueueSemaphoreTake+0x22>
 8000d14:	f004 f83f 	bl	8004d96 <ulSetInterruptMask>
 8000d18:	e7fe      	b.n	8000d18 <xQueueSemaphoreTake+0x20>
    configASSERT( pxQueue->uxItemSize == 0 );
 8000d1a:	69fb      	ldr	r3, [r7, #28]
 8000d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d002      	beq.n	8000d28 <xQueueSemaphoreTake+0x30>
 8000d22:	f004 f838 	bl	8004d96 <ulSetInterruptMask>
 8000d26:	e7fe      	b.n	8000d26 <xQueueSemaphoreTake+0x2e>
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8000d28:	f002 fb62 	bl	80033f0 <xTaskGetSchedulerState>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d102      	bne.n	8000d38 <xQueueSemaphoreTake+0x40>
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d101      	bne.n	8000d3c <xQueueSemaphoreTake+0x44>
 8000d38:	2301      	movs	r3, #1
 8000d3a:	e000      	b.n	8000d3e <xQueueSemaphoreTake+0x46>
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d102      	bne.n	8000d48 <xQueueSemaphoreTake+0x50>
 8000d42:	f004 f828 	bl	8004d96 <ulSetInterruptMask>
 8000d46:	e7fe      	b.n	8000d46 <xQueueSemaphoreTake+0x4e>
        taskENTER_CRITICAL();
 8000d48:	f003 ff62 	bl	8004c10 <vPortEnterCritical>
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8000d4c:	69fb      	ldr	r3, [r7, #28]
 8000d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d50:	61bb      	str	r3, [r7, #24]
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8000d52:	69bb      	ldr	r3, [r7, #24]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d01e      	beq.n	8000d96 <xQueueSemaphoreTake+0x9e>
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8000d58:	69bb      	ldr	r3, [r7, #24]
 8000d5a:	1e5a      	subs	r2, r3, #1
 8000d5c:	69fb      	ldr	r3, [r7, #28]
 8000d5e:	639a      	str	r2, [r3, #56]	; 0x38
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000d60:	69fb      	ldr	r3, [r7, #28]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d104      	bne.n	8000d72 <xQueueSemaphoreTake+0x7a>
                        pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8000d68:	f002 fd3d 	bl	80037e6 <pvTaskIncrementMutexHeldCount>
 8000d6c:	4602      	mov	r2, r0
 8000d6e:	69fb      	ldr	r3, [r7, #28]
 8000d70:	609a      	str	r2, [r3, #8]
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	691b      	ldr	r3, [r3, #16]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d009      	beq.n	8000d8e <xQueueSemaphoreTake+0x96>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	3310      	adds	r3, #16
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f002 f930 	bl	8002fe4 <xTaskRemoveFromEventList>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <xQueueSemaphoreTake+0x96>
                        queueYIELD_IF_USING_PREEMPTION();
 8000d8a:	f003 ff2f 	bl	8004bec <vPortYield>
                taskEXIT_CRITICAL();
 8000d8e:	f003 ff51 	bl	8004c34 <vPortExitCritical>
                return pdPASS;
 8000d92:	2301      	movs	r3, #1
 8000d94:	e083      	b.n	8000e9e <xQueueSemaphoreTake+0x1a6>
                if( xTicksToWait == ( TickType_t ) 0 )
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d103      	bne.n	8000da4 <xQueueSemaphoreTake+0xac>
                    taskEXIT_CRITICAL();
 8000d9c:	f003 ff4a 	bl	8004c34 <vPortExitCritical>
                    return errQUEUE_EMPTY;
 8000da0:	2300      	movs	r3, #0
 8000da2:	e07c      	b.n	8000e9e <xQueueSemaphoreTake+0x1a6>
                else if( xEntryTimeSet == pdFALSE )
 8000da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d106      	bne.n	8000db8 <xQueueSemaphoreTake+0xc0>
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8000daa:	f107 030c 	add.w	r3, r7, #12
 8000dae:	4618      	mov	r0, r3
 8000db0:	f002 fd2e 	bl	8003810 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8000db4:	2301      	movs	r3, #1
 8000db6:	627b      	str	r3, [r7, #36]	; 0x24
        taskEXIT_CRITICAL();
 8000db8:	f003 ff3c 	bl	8004c34 <vPortExitCritical>
        vTaskSuspendAll();
 8000dbc:	f001 f8ae 	bl	8001f1c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8000dc0:	f003 ff26 	bl	8004c10 <vPortEnterCritical>
 8000dc4:	69fb      	ldr	r3, [r7, #28]
 8000dc6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000dca:	b25b      	sxtb	r3, r3
 8000dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dd0:	d103      	bne.n	8000dda <xQueueSemaphoreTake+0xe2>
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8000dda:	69fb      	ldr	r3, [r7, #28]
 8000ddc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000de0:	b25b      	sxtb	r3, r3
 8000de2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000de6:	d103      	bne.n	8000df0 <xQueueSemaphoreTake+0xf8>
 8000de8:	69fb      	ldr	r3, [r7, #28]
 8000dea:	2200      	movs	r2, #0
 8000dec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8000df0:	f003 ff20 	bl	8004c34 <vPortExitCritical>
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8000df4:	463a      	mov	r2, r7
 8000df6:	f107 030c 	add.w	r3, r7, #12
 8000dfa:	4611      	mov	r1, r2
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f001 fec7 	bl	8002b90 <xTaskCheckForTimeOut>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d12c      	bne.n	8000e62 <xQueueSemaphoreTake+0x16a>
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000e08:	69f8      	ldr	r0, [r7, #28]
 8000e0a:	f000 fae5 	bl	80013d8 <prvIsQueueEmpty>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d020      	beq.n	8000e56 <xQueueSemaphoreTake+0x15e>
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8000e14:	69fb      	ldr	r3, [r7, #28]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d109      	bne.n	8000e30 <xQueueSemaphoreTake+0x138>
                        taskENTER_CRITICAL();
 8000e1c:	f003 fef8 	bl	8004c10 <vPortEnterCritical>
                            xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8000e20:	69fb      	ldr	r3, [r7, #28]
 8000e22:	689b      	ldr	r3, [r3, #8]
 8000e24:	4618      	mov	r0, r3
 8000e26:	f002 fb01 	bl	800342c <xTaskPriorityInherit>
 8000e2a:	6238      	str	r0, [r7, #32]
                        taskEXIT_CRITICAL();
 8000e2c:	f003 ff02 	bl	8004c34 <vPortExitCritical>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8000e30:	69fb      	ldr	r3, [r7, #28]
 8000e32:	3324      	adds	r3, #36	; 0x24
 8000e34:	683a      	ldr	r2, [r7, #0]
 8000e36:	4611      	mov	r1, r2
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f002 f833 	bl	8002ea4 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8000e3e:	69f8      	ldr	r0, [r7, #28]
 8000e40:	f000 fa78 	bl	8001334 <prvUnlockQueue>
                if( xTaskResumeAll() == pdFALSE )
 8000e44:	f001 f878 	bl	8001f38 <xTaskResumeAll>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	f47f af7c 	bne.w	8000d48 <xQueueSemaphoreTake+0x50>
                    portYIELD_WITHIN_API();
 8000e50:	f003 fecc 	bl	8004bec <vPortYield>
 8000e54:	e778      	b.n	8000d48 <xQueueSemaphoreTake+0x50>
                prvUnlockQueue( pxQueue );
 8000e56:	69f8      	ldr	r0, [r7, #28]
 8000e58:	f000 fa6c 	bl	8001334 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8000e5c:	f001 f86c 	bl	8001f38 <xTaskResumeAll>
 8000e60:	e772      	b.n	8000d48 <xQueueSemaphoreTake+0x50>
            prvUnlockQueue( pxQueue );
 8000e62:	69f8      	ldr	r0, [r7, #28]
 8000e64:	f000 fa66 	bl	8001334 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8000e68:	f001 f866 	bl	8001f38 <xTaskResumeAll>
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8000e6c:	69f8      	ldr	r0, [r7, #28]
 8000e6e:	f000 fab3 	bl	80013d8 <prvIsQueueEmpty>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	f43f af67 	beq.w	8000d48 <xQueueSemaphoreTake+0x50>
                    if( xInheritanceOccurred != pdFALSE )
 8000e7a:	6a3b      	ldr	r3, [r7, #32]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d00d      	beq.n	8000e9c <xQueueSemaphoreTake+0x1a4>
                        taskENTER_CRITICAL();
 8000e80:	f003 fec6 	bl	8004c10 <vPortEnterCritical>
                            uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8000e84:	69f8      	ldr	r0, [r7, #28]
 8000e86:	f000 fba2 	bl	80015ce <prvGetDisinheritPriorityAfterTimeout>
 8000e8a:	6178      	str	r0, [r7, #20]
                            vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8000e8c:	69fb      	ldr	r3, [r7, #28]
 8000e8e:	689b      	ldr	r3, [r3, #8]
 8000e90:	6979      	ldr	r1, [r7, #20]
 8000e92:	4618      	mov	r0, r3
 8000e94:	f002 fbe2 	bl	800365c <vTaskPriorityDisinheritAfterTimeout>
                        taskEXIT_CRITICAL();
 8000e98:	f003 fecc 	bl	8004c34 <vPortExitCritical>
                return errQUEUE_EMPTY;
 8000e9c:	2300      	movs	r3, #0
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3728      	adds	r7, #40	; 0x28
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}

08000ea6 <xQueueGetMutexHolder>:
    {
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	b084      	sub	sp, #16
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	6078      	str	r0, [r7, #4]
        Queue_t * const pxSemaphore = ( Queue_t * ) xSemaphore;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	60bb      	str	r3, [r7, #8]
        configASSERT( xSemaphore );
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d102      	bne.n	8000ebe <xQueueGetMutexHolder+0x18>
 8000eb8:	f003 ff6d 	bl	8004d96 <ulSetInterruptMask>
 8000ebc:	e7fe      	b.n	8000ebc <xQueueGetMutexHolder+0x16>
        taskENTER_CRITICAL();
 8000ebe:	f003 fea7 	bl	8004c10 <vPortEnterCritical>
            if( pxSemaphore->uxQueueType == queueQUEUE_IS_MUTEX )
 8000ec2:	68bb      	ldr	r3, [r7, #8]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d103      	bne.n	8000ed2 <xQueueGetMutexHolder+0x2c>
                pxReturn = pxSemaphore->u.xSemaphore.xMutexHolder;
 8000eca:	68bb      	ldr	r3, [r7, #8]
 8000ecc:	689b      	ldr	r3, [r3, #8]
 8000ece:	60fb      	str	r3, [r7, #12]
 8000ed0:	e001      	b.n	8000ed6 <xQueueGetMutexHolder+0x30>
                pxReturn = NULL;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	60fb      	str	r3, [r7, #12]
        taskEXIT_CRITICAL();
 8000ed6:	f003 fead 	bl	8004c34 <vPortExitCritical>
        return pxReturn;
 8000eda:	68fb      	ldr	r3, [r7, #12]
    } /*lint !e818 xSemaphore cannot be a pointer to const because it is a typedef. */
 8000edc:	4618      	mov	r0, r3
 8000ede:	3710      	adds	r7, #16
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd80      	pop	{r7, pc}

08000ee4 <xQueueGetMutexHolderFromISR>:
    {
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
        configASSERT( xSemaphore );
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d102      	bne.n	8000ef8 <xQueueGetMutexHolderFromISR+0x14>
 8000ef2:	f003 ff50 	bl	8004d96 <ulSetInterruptMask>
 8000ef6:	e7fe      	b.n	8000ef6 <xQueueGetMutexHolderFromISR+0x12>
        if( ( ( Queue_t * ) xSemaphore )->uxQueueType == queueQUEUE_IS_MUTEX )
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d103      	bne.n	8000f08 <xQueueGetMutexHolderFromISR+0x24>
            pxReturn = ( ( Queue_t * ) xSemaphore )->u.xSemaphore.xMutexHolder;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	689b      	ldr	r3, [r3, #8]
 8000f04:	60fb      	str	r3, [r7, #12]
 8000f06:	e001      	b.n	8000f0c <xQueueGetMutexHolderFromISR+0x28>
            pxReturn = NULL;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	60fb      	str	r3, [r7, #12]
        return pxReturn;
 8000f0c:	68fb      	ldr	r3, [r7, #12]
    } /*lint !e818 xSemaphore cannot be a pointer to const because it is a typedef. */
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3710      	adds	r7, #16
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}

08000f16 <xQueueTakeMutexRecursive>:
    {
 8000f16:	b590      	push	{r4, r7, lr}
 8000f18:	b085      	sub	sp, #20
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	6078      	str	r0, [r7, #4]
 8000f1e:	6039      	str	r1, [r7, #0]
        Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	60bb      	str	r3, [r7, #8]
        configASSERT( pxMutex );
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d102      	bne.n	8000f30 <xQueueTakeMutexRecursive+0x1a>
 8000f2a:	f003 ff34 	bl	8004d96 <ulSetInterruptMask>
 8000f2e:	e7fe      	b.n	8000f2e <xQueueTakeMutexRecursive+0x18>
        if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	689c      	ldr	r4, [r3, #8]
 8000f34:	f002 fa40 	bl	80033b8 <xTaskGetCurrentTaskHandle>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	429c      	cmp	r4, r3
 8000f3c:	d107      	bne.n	8000f4e <xQueueTakeMutexRecursive+0x38>
            ( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8000f3e:	68bb      	ldr	r3, [r7, #8]
 8000f40:	68db      	ldr	r3, [r3, #12]
 8000f42:	1c5a      	adds	r2, r3, #1
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	60da      	str	r2, [r3, #12]
            xReturn = pdPASS;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	60fb      	str	r3, [r7, #12]
 8000f4c:	e00c      	b.n	8000f68 <xQueueTakeMutexRecursive+0x52>
            xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8000f4e:	6839      	ldr	r1, [r7, #0]
 8000f50:	68b8      	ldr	r0, [r7, #8]
 8000f52:	f7ff fed1 	bl	8000cf8 <xQueueSemaphoreTake>
 8000f56:	60f8      	str	r0, [r7, #12]
            if( xReturn != pdFAIL )
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d004      	beq.n	8000f68 <xQueueTakeMutexRecursive+0x52>
                ( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8000f5e:	68bb      	ldr	r3, [r7, #8]
 8000f60:	68db      	ldr	r3, [r3, #12]
 8000f62:	1c5a      	adds	r2, r3, #1
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	60da      	str	r2, [r3, #12]
        return xReturn;
 8000f68:	68fb      	ldr	r3, [r7, #12]
    }
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3714      	adds	r7, #20
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd90      	pop	{r4, r7, pc}

08000f72 <xQueueGiveMutexRecursive>:
    {
 8000f72:	b590      	push	{r4, r7, lr}
 8000f74:	b085      	sub	sp, #20
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	6078      	str	r0, [r7, #4]
        Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	60bb      	str	r3, [r7, #8]
        configASSERT( pxMutex );
 8000f7e:	68bb      	ldr	r3, [r7, #8]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d102      	bne.n	8000f8a <xQueueGiveMutexRecursive+0x18>
 8000f84:	f003 ff07 	bl	8004d96 <ulSetInterruptMask>
 8000f88:	e7fe      	b.n	8000f88 <xQueueGiveMutexRecursive+0x16>
        if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8000f8a:	68bb      	ldr	r3, [r7, #8]
 8000f8c:	689c      	ldr	r4, [r3, #8]
 8000f8e:	f002 fa13 	bl	80033b8 <xTaskGetCurrentTaskHandle>
 8000f92:	4603      	mov	r3, r0
 8000f94:	429c      	cmp	r4, r3
 8000f96:	d111      	bne.n	8000fbc <xQueueGiveMutexRecursive+0x4a>
            ( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	68db      	ldr	r3, [r3, #12]
 8000f9c:	1e5a      	subs	r2, r3, #1
 8000f9e:	68bb      	ldr	r3, [r7, #8]
 8000fa0:	60da      	str	r2, [r3, #12]
            if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8000fa2:	68bb      	ldr	r3, [r7, #8]
 8000fa4:	68db      	ldr	r3, [r3, #12]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d105      	bne.n	8000fb6 <xQueueGiveMutexRecursive+0x44>
                ( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8000faa:	2300      	movs	r3, #0
 8000fac:	2200      	movs	r2, #0
 8000fae:	2100      	movs	r1, #0
 8000fb0:	68b8      	ldr	r0, [r7, #8]
 8000fb2:	f7ff f9f5 	bl	80003a0 <xQueueGenericSend>
            xReturn = pdPASS;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	60fb      	str	r3, [r7, #12]
 8000fba:	e001      	b.n	8000fc0 <xQueueGiveMutexRecursive+0x4e>
            xReturn = pdFAIL;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	60fb      	str	r3, [r7, #12]
        return xReturn;
 8000fc0:	68fb      	ldr	r3, [r7, #12]
    }
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3714      	adds	r7, #20
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd90      	pop	{r4, r7, pc}

08000fca <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8000fca:	b580      	push	{r7, lr}
 8000fcc:	b084      	sub	sp, #16
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	6078      	str	r0, [r7, #4]
 8000fd2:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	60bb      	str	r3, [r7, #8]

        configASSERT( xQueue );
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d102      	bne.n	8000fe4 <vQueueAddToRegistry+0x1a>
 8000fde:	f003 feda 	bl	8004d96 <ulSetInterruptMask>
 8000fe2:	e7fe      	b.n	8000fe2 <vQueueAddToRegistry+0x18>

        if( pcQueueName != NULL )
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d024      	beq.n	8001034 <vQueueAddToRegistry+0x6a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8000fea:	2300      	movs	r3, #0
 8000fec:	60fb      	str	r3, [r7, #12]
 8000fee:	e01e      	b.n	800102e <vQueueAddToRegistry+0x64>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8000ff0:	4a17      	ldr	r2, [pc, #92]	; (8001050 <vQueueAddToRegistry+0x86>)
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	00db      	lsls	r3, r3, #3
 8000ff6:	4413      	add	r3, r2
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	687a      	ldr	r2, [r7, #4]
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	d105      	bne.n	800100c <vQueueAddToRegistry+0x42>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	00db      	lsls	r3, r3, #3
 8001004:	4a12      	ldr	r2, [pc, #72]	; (8001050 <vQueueAddToRegistry+0x86>)
 8001006:	4413      	add	r3, r2
 8001008:	60bb      	str	r3, [r7, #8]
                    break;
 800100a:	e013      	b.n	8001034 <vQueueAddToRegistry+0x6a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d10a      	bne.n	8001028 <vQueueAddToRegistry+0x5e>
 8001012:	4a0f      	ldr	r2, [pc, #60]	; (8001050 <vQueueAddToRegistry+0x86>)
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d104      	bne.n	8001028 <vQueueAddToRegistry+0x5e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	00db      	lsls	r3, r3, #3
 8001022:	4a0b      	ldr	r2, [pc, #44]	; (8001050 <vQueueAddToRegistry+0x86>)
 8001024:	4413      	add	r3, r2
 8001026:	60bb      	str	r3, [r7, #8]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	3301      	adds	r3, #1
 800102c:	60fb      	str	r3, [r7, #12]
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	2b07      	cmp	r3, #7
 8001032:	d9dd      	bls.n	8000ff0 <vQueueAddToRegistry+0x26>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d005      	beq.n	8001046 <vQueueAddToRegistry+0x7c>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 800103a:	68bb      	ldr	r3, [r7, #8]
 800103c:	683a      	ldr	r2, [r7, #0]
 800103e:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	687a      	ldr	r2, [r7, #4]
 8001044:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }
    }
 8001046:	bf00      	nop
 8001048:	3710      	adds	r7, #16
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	20000000 	.word	0x20000000

08001054 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueUnregisterQueue( QueueHandle_t xQueue )
    {
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
        UBaseType_t ux;

        configASSERT( xQueue );
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d102      	bne.n	8001068 <vQueueUnregisterQueue+0x14>
 8001062:	f003 fe98 	bl	8004d96 <ulSetInterruptMask>
 8001066:	e7fe      	b.n	8001066 <vQueueUnregisterQueue+0x12>

        /* See if the handle of the queue being unregistered in actually in the
         * registry. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001068:	2300      	movs	r3, #0
 800106a:	60fb      	str	r3, [r7, #12]
 800106c:	e016      	b.n	800109c <vQueueUnregisterQueue+0x48>
        {
            if( xQueueRegistry[ ux ].xHandle == xQueue )
 800106e:	4a0f      	ldr	r2, [pc, #60]	; (80010ac <vQueueUnregisterQueue+0x58>)
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	00db      	lsls	r3, r3, #3
 8001074:	4413      	add	r3, r2
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	687a      	ldr	r2, [r7, #4]
 800107a:	429a      	cmp	r2, r3
 800107c:	d10b      	bne.n	8001096 <vQueueUnregisterQueue+0x42>
            {
                /* Set the name to NULL to show that this slot if free again. */
                xQueueRegistry[ ux ].pcQueueName = NULL;
 800107e:	4a0b      	ldr	r2, [pc, #44]	; (80010ac <vQueueUnregisterQueue+0x58>)
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	2100      	movs	r1, #0
 8001084:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

                /* Set the handle to NULL to ensure the same queue handle cannot
                 * appear in the registry twice if it is added, removed, then
                 * added again. */
                xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8001088:	4a08      	ldr	r2, [pc, #32]	; (80010ac <vQueueUnregisterQueue+0x58>)
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	00db      	lsls	r3, r3, #3
 800108e:	4413      	add	r3, r2
 8001090:	2200      	movs	r2, #0
 8001092:	605a      	str	r2, [r3, #4]
                break;
 8001094:	e006      	b.n	80010a4 <vQueueUnregisterQueue+0x50>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	3301      	adds	r3, #1
 800109a:	60fb      	str	r3, [r7, #12]
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	2b07      	cmp	r3, #7
 80010a0:	d9e5      	bls.n	800106e <vQueueUnregisterQueue+0x1a>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80010a2:	bf00      	nop
 80010a4:	bf00      	nop
 80010a6:	3710      	adds	r7, #16
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	20000000 	.word	0x20000000

080010b0 <pcQueueGetName>:
    {
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
        const char * pcReturn = NULL; /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
 80010b8:	2300      	movs	r3, #0
 80010ba:	60bb      	str	r3, [r7, #8]
        configASSERT( xQueue );
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d102      	bne.n	80010c8 <pcQueueGetName+0x18>
 80010c2:	f003 fe68 	bl	8004d96 <ulSetInterruptMask>
 80010c6:	e7fe      	b.n	80010c6 <pcQueueGetName+0x16>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80010c8:	2300      	movs	r3, #0
 80010ca:	60fb      	str	r3, [r7, #12]
 80010cc:	e010      	b.n	80010f0 <pcQueueGetName+0x40>
            if( xQueueRegistry[ ux ].xHandle == xQueue )
 80010ce:	4a0c      	ldr	r2, [pc, #48]	; (8001100 <pcQueueGetName+0x50>)
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	00db      	lsls	r3, r3, #3
 80010d4:	4413      	add	r3, r2
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	687a      	ldr	r2, [r7, #4]
 80010da:	429a      	cmp	r2, r3
 80010dc:	d105      	bne.n	80010ea <pcQueueGetName+0x3a>
                pcReturn = xQueueRegistry[ ux ].pcQueueName;
 80010de:	4a08      	ldr	r2, [pc, #32]	; (8001100 <pcQueueGetName+0x50>)
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80010e6:	60bb      	str	r3, [r7, #8]
                break;
 80010e8:	e005      	b.n	80010f6 <pcQueueGetName+0x46>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	3301      	adds	r3, #1
 80010ee:	60fb      	str	r3, [r7, #12]
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	2b07      	cmp	r3, #7
 80010f4:	d9eb      	bls.n	80010ce <pcQueueGetName+0x1e>
        return pcReturn;
 80010f6:	68bb      	ldr	r3, [r7, #8]
    } /*lint !e818 xQueue cannot be a pointer to const because it is a typedef. */
 80010f8:	4618      	mov	r0, r3
 80010fa:	3710      	adds	r7, #16
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	20000000 	.word	0x20000000

08001104 <xQueueGenericCreate>:
    {
 8001104:	b580      	push	{r7, lr}
 8001106:	b08a      	sub	sp, #40	; 0x28
 8001108:	af02      	add	r7, sp, #8
 800110a:	60f8      	str	r0, [r7, #12]
 800110c:	60b9      	str	r1, [r7, #8]
 800110e:	4613      	mov	r3, r2
 8001110:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8001112:	2300      	movs	r3, #0
 8001114:	61fb      	str	r3, [r7, #28]
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d02e      	beq.n	800117a <xQueueGenericCreate+0x76>
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800111c:	2100      	movs	r1, #0
 800111e:	68ba      	ldr	r2, [r7, #8]
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	fba3 2302 	umull	r2, r3, r3, r2
 8001126:	2b00      	cmp	r3, #0
 8001128:	d000      	beq.n	800112c <xQueueGenericCreate+0x28>
 800112a:	2101      	movs	r1, #1
 800112c:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800112e:	2b00      	cmp	r3, #0
 8001130:	d123      	bne.n	800117a <xQueueGenericCreate+0x76>
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	68ba      	ldr	r2, [r7, #8]
 8001136:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800113a:	f113 0f51 	cmn.w	r3, #81	; 0x51
 800113e:	d81c      	bhi.n	800117a <xQueueGenericCreate+0x76>
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	68ba      	ldr	r2, [r7, #8]
 8001144:	fb02 f303 	mul.w	r3, r2, r3
 8001148:	61bb      	str	r3, [r7, #24]
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800114a:	69bb      	ldr	r3, [r7, #24]
 800114c:	3350      	adds	r3, #80	; 0x50
 800114e:	4618      	mov	r0, r3
 8001150:	f003 fe9a 	bl	8004e88 <pvPortMalloc>
 8001154:	61f8      	str	r0, [r7, #28]
            if( pxNewQueue != NULL )
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d014      	beq.n	8001186 <xQueueGenericCreate+0x82>
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	3350      	adds	r3, #80	; 0x50
 8001164:	617b      	str	r3, [r7, #20]
                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001166:	79fa      	ldrb	r2, [r7, #7]
 8001168:	69fb      	ldr	r3, [r7, #28]
 800116a:	9300      	str	r3, [sp, #0]
 800116c:	4613      	mov	r3, r2
 800116e:	697a      	ldr	r2, [r7, #20]
 8001170:	68b9      	ldr	r1, [r7, #8]
 8001172:	68f8      	ldr	r0, [r7, #12]
 8001174:	f000 f9ee 	bl	8001554 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8001178:	e005      	b.n	8001186 <xQueueGenericCreate+0x82>
            configASSERT( pxNewQueue );
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d102      	bne.n	8001186 <xQueueGenericCreate+0x82>
 8001180:	f003 fe09 	bl	8004d96 <ulSetInterruptMask>
 8001184:	e7fe      	b.n	8001184 <xQueueGenericCreate+0x80>
        return pxNewQueue;
 8001186:	69fb      	ldr	r3, [r7, #28]
    }
 8001188:	4618      	mov	r0, r3
 800118a:	3720      	adds	r7, #32
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8001190:	b580      	push	{r7, lr}
 8001192:	b086      	sub	sp, #24
 8001194:	af00      	add	r7, sp, #0
 8001196:	60f8      	str	r0, [r7, #12]
 8001198:	60b9      	str	r1, [r7, #8]
 800119a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80011a0:	f003 fd36 	bl	8004c10 <vPortEnterCritical>
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80011aa:	b25b      	sxtb	r3, r3
 80011ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011b0:	d103      	bne.n	80011ba <vQueueWaitForMessageRestricted+0x2a>
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	2200      	movs	r2, #0
 80011b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80011ba:	697b      	ldr	r3, [r7, #20]
 80011bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80011c0:	b25b      	sxtb	r3, r3
 80011c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011c6:	d103      	bne.n	80011d0 <vQueueWaitForMessageRestricted+0x40>
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	2200      	movs	r2, #0
 80011cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80011d0:	f003 fd30 	bl	8004c34 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d106      	bne.n	80011ea <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	3324      	adds	r3, #36	; 0x24
 80011e0:	687a      	ldr	r2, [r7, #4]
 80011e2:	68b9      	ldr	r1, [r7, #8]
 80011e4:	4618      	mov	r0, r3
 80011e6:	f001 febf 	bl	8002f68 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80011ea:	6978      	ldr	r0, [r7, #20]
 80011ec:	f000 f8a2 	bl	8001334 <prvUnlockQueue>
    }
 80011f0:	bf00      	nop
 80011f2:	3718      	adds	r7, #24
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}

080011f8 <xQueueGenericReset>:
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8001202:	2301      	movs	r3, #1
 8001204:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	60bb      	str	r3, [r7, #8]
    configASSERT( pxQueue );
 800120a:	68bb      	ldr	r3, [r7, #8]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d102      	bne.n	8001216 <xQueueGenericReset+0x1e>
 8001210:	f003 fdc1 	bl	8004d96 <ulSetInterruptMask>
 8001214:	e7fe      	b.n	8001214 <xQueueGenericReset+0x1c>
    if( ( pxQueue != NULL ) &&
 8001216:	68bb      	ldr	r3, [r7, #8]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d057      	beq.n	80012cc <xQueueGenericReset+0xd4>
        ( pxQueue->uxLength >= 1U ) &&
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8001220:	2b00      	cmp	r3, #0
 8001222:	d053      	beq.n	80012cc <xQueueGenericReset+0xd4>
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800122c:	2100      	movs	r1, #0
 800122e:	fba3 2302 	umull	r2, r3, r3, r2
 8001232:	2b00      	cmp	r3, #0
 8001234:	d000      	beq.n	8001238 <xQueueGenericReset+0x40>
 8001236:	2101      	movs	r1, #1
 8001238:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 800123a:	2b00      	cmp	r3, #0
 800123c:	d146      	bne.n	80012cc <xQueueGenericReset+0xd4>
        taskENTER_CRITICAL();
 800123e:	f003 fce7 	bl	8004c10 <vPortEnterCritical>
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001242:	68bb      	ldr	r3, [r7, #8]
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	68bb      	ldr	r3, [r7, #8]
 8001248:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800124a:	68b9      	ldr	r1, [r7, #8]
 800124c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800124e:	fb01 f303 	mul.w	r3, r1, r3
 8001252:	441a      	add	r2, r3
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	2200      	movs	r2, #0
 800125c:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800125e:	68bb      	ldr	r3, [r7, #8]
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	68bb      	ldr	r3, [r7, #8]
 8001264:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001266:	68bb      	ldr	r3, [r7, #8]
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	68bb      	ldr	r3, [r7, #8]
 800126c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800126e:	3b01      	subs	r3, #1
 8001270:	68b9      	ldr	r1, [r7, #8]
 8001272:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001274:	fb01 f303 	mul.w	r3, r1, r3
 8001278:	441a      	add	r2, r3
 800127a:	68bb      	ldr	r3, [r7, #8]
 800127c:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 800127e:	68bb      	ldr	r3, [r7, #8]
 8001280:	22ff      	movs	r2, #255	; 0xff
 8001282:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8001286:	68bb      	ldr	r3, [r7, #8]
 8001288:	22ff      	movs	r2, #255	; 0xff
 800128a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            if( xNewQueue == pdFALSE )
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d10e      	bne.n	80012b2 <xQueueGenericReset+0xba>
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	691b      	ldr	r3, [r3, #16]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d014      	beq.n	80012c6 <xQueueGenericReset+0xce>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	3310      	adds	r3, #16
 80012a0:	4618      	mov	r0, r3
 80012a2:	f001 fe9f 	bl	8002fe4 <xTaskRemoveFromEventList>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d00c      	beq.n	80012c6 <xQueueGenericReset+0xce>
                        queueYIELD_IF_USING_PREEMPTION();
 80012ac:	f003 fc9e 	bl	8004bec <vPortYield>
 80012b0:	e009      	b.n	80012c6 <xQueueGenericReset+0xce>
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80012b2:	68bb      	ldr	r3, [r7, #8]
 80012b4:	3310      	adds	r3, #16
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7fe ffbe 	bl	8000238 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	3324      	adds	r3, #36	; 0x24
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7fe ffb9 	bl	8000238 <vListInitialise>
        taskEXIT_CRITICAL();
 80012c6:	f003 fcb5 	bl	8004c34 <vPortExitCritical>
 80012ca:	e001      	b.n	80012d0 <xQueueGenericReset+0xd8>
        xReturn = pdFAIL;
 80012cc:	2300      	movs	r3, #0
 80012ce:	60fb      	str	r3, [r7, #12]
    configASSERT( xReturn != pdFAIL );
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d102      	bne.n	80012dc <xQueueGenericReset+0xe4>
 80012d6:	f003 fd5e 	bl	8004d96 <ulSetInterruptMask>
 80012da:	e7fe      	b.n	80012da <xQueueGenericReset+0xe2>
    return xReturn;
 80012dc:	68fb      	ldr	r3, [r7, #12]
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3710      	adds	r7, #16
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}

080012e6 <vQueueSetQueueNumber>:
    {
 80012e6:	b480      	push	{r7}
 80012e8:	b083      	sub	sp, #12
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	6078      	str	r0, [r7, #4]
 80012ee:	6039      	str	r1, [r7, #0]
        ( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	683a      	ldr	r2, [r7, #0]
 80012f4:	649a      	str	r2, [r3, #72]	; 0x48
    }
 80012f6:	bf00      	nop
 80012f8:	370c      	adds	r7, #12
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr

08001302 <uxQueueGetQueueNumber>:
    {
 8001302:	b480      	push	{r7}
 8001304:	b083      	sub	sp, #12
 8001306:	af00      	add	r7, sp, #0
 8001308:	6078      	str	r0, [r7, #4]
        return ( ( Queue_t * ) xQueue )->uxQueueNumber;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    }
 800130e:	4618      	mov	r0, r3
 8001310:	370c      	adds	r7, #12
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr

0800131a <ucQueueGetQueueType>:
    {
 800131a:	b480      	push	{r7}
 800131c:	b083      	sub	sp, #12
 800131e:	af00      	add	r7, sp, #0
 8001320:	6078      	str	r0, [r7, #4]
        return ( ( Queue_t * ) xQueue )->ucQueueType;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
    }
 8001328:	4618      	mov	r0, r3
 800132a:	370c      	adds	r7, #12
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr

08001334 <prvUnlockQueue>:
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
    taskENTER_CRITICAL();
 800133c:	f003 fc68 	bl	8004c10 <vPortEnterCritical>
        int8_t cTxLock = pxQueue->cTxLock;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001346:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8001348:	e011      	b.n	800136e <prvUnlockQueue+0x3a>
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800134e:	2b00      	cmp	r3, #0
 8001350:	d012      	beq.n	8001378 <prvUnlockQueue+0x44>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	3324      	adds	r3, #36	; 0x24
 8001356:	4618      	mov	r0, r3
 8001358:	f001 fe44 	bl	8002fe4 <xTaskRemoveFromEventList>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <prvUnlockQueue+0x32>
                        vTaskMissedYield();
 8001362:	f002 f839 	bl	80033d8 <vTaskMissedYield>
            --cTxLock;
 8001366:	7bfb      	ldrb	r3, [r7, #15]
 8001368:	3b01      	subs	r3, #1
 800136a:	b2db      	uxtb	r3, r3
 800136c:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800136e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001372:	2b00      	cmp	r3, #0
 8001374:	dce9      	bgt.n	800134a <prvUnlockQueue+0x16>
 8001376:	e000      	b.n	800137a <prvUnlockQueue+0x46>
                    break;
 8001378:	bf00      	nop
        pxQueue->cTxLock = queueUNLOCKED;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	22ff      	movs	r2, #255	; 0xff
 800137e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    taskEXIT_CRITICAL();
 8001382:	f003 fc57 	bl	8004c34 <vPortExitCritical>
    taskENTER_CRITICAL();
 8001386:	f003 fc43 	bl	8004c10 <vPortEnterCritical>
        int8_t cRxLock = pxQueue->cRxLock;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001390:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8001392:	e011      	b.n	80013b8 <prvUnlockQueue+0x84>
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	691b      	ldr	r3, [r3, #16]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d012      	beq.n	80013c2 <prvUnlockQueue+0x8e>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	3310      	adds	r3, #16
 80013a0:	4618      	mov	r0, r3
 80013a2:	f001 fe1f 	bl	8002fe4 <xTaskRemoveFromEventList>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <prvUnlockQueue+0x7c>
                    vTaskMissedYield();
 80013ac:	f002 f814 	bl	80033d8 <vTaskMissedYield>
                --cRxLock;
 80013b0:	7bbb      	ldrb	r3, [r7, #14]
 80013b2:	3b01      	subs	r3, #1
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80013b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	dce9      	bgt.n	8001394 <prvUnlockQueue+0x60>
 80013c0:	e000      	b.n	80013c4 <prvUnlockQueue+0x90>
                break;
 80013c2:	bf00      	nop
        pxQueue->cRxLock = queueUNLOCKED;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	22ff      	movs	r2, #255	; 0xff
 80013c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    taskEXIT_CRITICAL();
 80013cc:	f003 fc32 	bl	8004c34 <vPortExitCritical>
}
 80013d0:	bf00      	nop
 80013d2:	3710      	adds	r7, #16
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}

080013d8 <prvIsQueueEmpty>:
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
    taskENTER_CRITICAL();
 80013e0:	f003 fc16 	bl	8004c10 <vPortEnterCritical>
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d102      	bne.n	80013f2 <prvIsQueueEmpty+0x1a>
            xReturn = pdTRUE;
 80013ec:	2301      	movs	r3, #1
 80013ee:	60fb      	str	r3, [r7, #12]
 80013f0:	e001      	b.n	80013f6 <prvIsQueueEmpty+0x1e>
            xReturn = pdFALSE;
 80013f2:	2300      	movs	r3, #0
 80013f4:	60fb      	str	r3, [r7, #12]
    taskEXIT_CRITICAL();
 80013f6:	f003 fc1d 	bl	8004c34 <vPortExitCritical>
    return xReturn;
 80013fa:	68fb      	ldr	r3, [r7, #12]
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	3710      	adds	r7, #16
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}

08001404 <prvIsQueueFull>:
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
    taskENTER_CRITICAL();
 800140c:	f003 fc00 	bl	8004c10 <vPortEnterCritical>
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001418:	429a      	cmp	r2, r3
 800141a:	d102      	bne.n	8001422 <prvIsQueueFull+0x1e>
            xReturn = pdTRUE;
 800141c:	2301      	movs	r3, #1
 800141e:	60fb      	str	r3, [r7, #12]
 8001420:	e001      	b.n	8001426 <prvIsQueueFull+0x22>
            xReturn = pdFALSE;
 8001422:	2300      	movs	r3, #0
 8001424:	60fb      	str	r3, [r7, #12]
    taskEXIT_CRITICAL();
 8001426:	f003 fc05 	bl	8004c34 <vPortExitCritical>
    return xReturn;
 800142a:	68fb      	ldr	r3, [r7, #12]
}
 800142c:	4618      	mov	r0, r3
 800142e:	3710      	adds	r7, #16
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}

08001434 <prvCopyDataToQueue>:
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b086      	sub	sp, #24
 8001438:	af00      	add	r7, sp, #0
 800143a:	60f8      	str	r0, [r7, #12]
 800143c:	60b9      	str	r1, [r7, #8]
 800143e:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8001440:	2300      	movs	r3, #0
 8001442:	617b      	str	r3, [r7, #20]
    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001448:	613b      	str	r3, [r7, #16]
    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144e:	2b00      	cmp	r3, #0
 8001450:	d10d      	bne.n	800146e <prvCopyDataToQueue+0x3a>
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d14d      	bne.n	80014f6 <prvCopyDataToQueue+0xc2>
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	689b      	ldr	r3, [r3, #8]
 800145e:	4618      	mov	r0, r3
 8001460:	f002 f876 	bl	8003550 <xTaskPriorityDisinherit>
 8001464:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	2200      	movs	r2, #0
 800146a:	609a      	str	r2, [r3, #8]
 800146c:	e043      	b.n	80014f6 <prvCopyDataToQueue+0xc2>
    else if( xPosition == queueSEND_TO_BACK )
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d119      	bne.n	80014a8 <prvCopyDataToQueue+0x74>
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	6858      	ldr	r0, [r3, #4]
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147c:	461a      	mov	r2, r3
 800147e:	68b9      	ldr	r1, [r7, #8]
 8001480:	f008 fdb4 	bl	8009fec <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	685a      	ldr	r2, [r3, #4]
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148c:	441a      	add	r2, r3
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	605a      	str	r2, [r3, #4]
        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	685a      	ldr	r2, [r3, #4]
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	689b      	ldr	r3, [r3, #8]
 800149a:	429a      	cmp	r2, r3
 800149c:	d32b      	bcc.n	80014f6 <prvCopyDataToQueue+0xc2>
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	605a      	str	r2, [r3, #4]
 80014a6:	e026      	b.n	80014f6 <prvCopyDataToQueue+0xc2>
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	68d8      	ldr	r0, [r3, #12]
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b0:	461a      	mov	r2, r3
 80014b2:	68b9      	ldr	r1, [r7, #8]
 80014b4:	f008 fd9a 	bl	8009fec <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	68da      	ldr	r2, [r3, #12]
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c0:	425b      	negs	r3, r3
 80014c2:	441a      	add	r2, r3
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	60da      	str	r2, [r3, #12]
        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	68da      	ldr	r2, [r3, #12]
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d207      	bcs.n	80014e4 <prvCopyDataToQueue+0xb0>
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	689a      	ldr	r2, [r3, #8]
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014dc:	425b      	negs	r3, r3
 80014de:	441a      	add	r2, r3
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	60da      	str	r2, [r3, #12]
        if( xPosition == queueOVERWRITE )
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2b02      	cmp	r3, #2
 80014e8:	d105      	bne.n	80014f6 <prvCopyDataToQueue+0xc2>
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d002      	beq.n	80014f6 <prvCopyDataToQueue+0xc2>
                --uxMessagesWaiting;
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	3b01      	subs	r3, #1
 80014f4:	613b      	str	r3, [r7, #16]
    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80014f6:	693b      	ldr	r3, [r7, #16]
 80014f8:	1c5a      	adds	r2, r3, #1
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	639a      	str	r2, [r3, #56]	; 0x38
    return xReturn;
 80014fe:	697b      	ldr	r3, [r7, #20]
}
 8001500:	4618      	mov	r0, r3
 8001502:	3718      	adds	r7, #24
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}

08001508 <prvCopyDataFromQueue>:
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001516:	2b00      	cmp	r3, #0
 8001518:	d018      	beq.n	800154c <prvCopyDataFromQueue+0x44>
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	68da      	ldr	r2, [r3, #12]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001522:	441a      	add	r2, r3
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	60da      	str	r2, [r3, #12]
        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	68da      	ldr	r2, [r3, #12]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	689b      	ldr	r3, [r3, #8]
 8001530:	429a      	cmp	r2, r3
 8001532:	d303      	bcc.n	800153c <prvCopyDataFromQueue+0x34>
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	60da      	str	r2, [r3, #12]
        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	68d9      	ldr	r1, [r3, #12]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001544:	461a      	mov	r2, r3
 8001546:	6838      	ldr	r0, [r7, #0]
 8001548:	f008 fd50 	bl	8009fec <memcpy>
}
 800154c:	bf00      	nop
 800154e:	3708      	adds	r7, #8
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}

08001554 <prvInitialiseNewQueue>:
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af00      	add	r7, sp, #0
 800155a:	60f8      	str	r0, [r7, #12]
 800155c:	60b9      	str	r1, [r7, #8]
 800155e:	607a      	str	r2, [r7, #4]
 8001560:	70fb      	strb	r3, [r7, #3]
    if( uxItemSize == ( UBaseType_t ) 0 )
 8001562:	68bb      	ldr	r3, [r7, #8]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d103      	bne.n	8001570 <prvInitialiseNewQueue+0x1c>
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001568:	69bb      	ldr	r3, [r7, #24]
 800156a:	69ba      	ldr	r2, [r7, #24]
 800156c:	601a      	str	r2, [r3, #0]
 800156e:	e002      	b.n	8001576 <prvInitialiseNewQueue+0x22>
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001570:	69bb      	ldr	r3, [r7, #24]
 8001572:	687a      	ldr	r2, [r7, #4]
 8001574:	601a      	str	r2, [r3, #0]
    pxNewQueue->uxLength = uxQueueLength;
 8001576:	69bb      	ldr	r3, [r7, #24]
 8001578:	68fa      	ldr	r2, [r7, #12]
 800157a:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800157c:	69bb      	ldr	r3, [r7, #24]
 800157e:	68ba      	ldr	r2, [r7, #8]
 8001580:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001582:	2101      	movs	r1, #1
 8001584:	69b8      	ldr	r0, [r7, #24]
 8001586:	f7ff fe37 	bl	80011f8 <xQueueGenericReset>
        pxNewQueue->ucQueueType = ucQueueType;
 800158a:	69bb      	ldr	r3, [r7, #24]
 800158c:	78fa      	ldrb	r2, [r7, #3]
 800158e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 8001592:	bf00      	nop
 8001594:	3710      	adds	r7, #16
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}

0800159a <prvInitialiseMutex>:
    {
 800159a:	b580      	push	{r7, lr}
 800159c:	b082      	sub	sp, #8
 800159e:	af00      	add	r7, sp, #0
 80015a0:	6078      	str	r0, [r7, #4]
        if( pxNewQueue != NULL )
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d00e      	beq.n	80015c6 <prvInitialiseMutex+0x2c>
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2200      	movs	r2, #0
 80015ac:	609a      	str	r2, [r3, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2200      	movs	r2, #0
 80015b8:	60da      	str	r2, [r3, #12]
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80015ba:	2300      	movs	r3, #0
 80015bc:	2200      	movs	r2, #0
 80015be:	2100      	movs	r1, #0
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	f7fe feed 	bl	80003a0 <xQueueGenericSend>
    }
 80015c6:	bf00      	nop
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}

080015ce <prvGetDisinheritPriorityAfterTimeout>:
    {
 80015ce:	b480      	push	{r7}
 80015d0:	b085      	sub	sp, #20
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	6078      	str	r0, [r7, #4]
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d006      	beq.n	80015ec <prvGetDisinheritPriorityAfterTimeout+0x1e>
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80015e8:	60fb      	str	r3, [r7, #12]
 80015ea:	e001      	b.n	80015f0 <prvGetDisinheritPriorityAfterTimeout+0x22>
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80015ec:	2300      	movs	r3, #0
 80015ee:	60fb      	str	r3, [r7, #12]
        return uxHighestPriorityOfWaitingTasks;
 80015f0:	68fb      	ldr	r3, [r7, #12]
    }
 80015f2:	4618      	mov	r0, r3
 80015f4:	3714      	adds	r7, #20
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop

08001600 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8001600:	b580      	push	{r7, lr}
 8001602:	b08c      	sub	sp, #48	; 0x30
 8001604:	af04      	add	r7, sp, #16
 8001606:	60f8      	str	r0, [r7, #12]
 8001608:	60b9      	str	r1, [r7, #8]
 800160a:	603b      	str	r3, [r7, #0]
 800160c:	4613      	mov	r3, r2
 800160e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001610:	88fb      	ldrh	r3, [r7, #6]
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	4618      	mov	r0, r3
 8001616:	f003 fc37 	bl	8004e88 <pvPortMalloc>
 800161a:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d013      	beq.n	800164a <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001622:	2080      	movs	r0, #128	; 0x80
 8001624:	f003 fc30 	bl	8004e88 <pvPortMalloc>
 8001628:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d008      	beq.n	8001642 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8001630:	2280      	movs	r2, #128	; 0x80
 8001632:	2100      	movs	r1, #0
 8001634:	69f8      	ldr	r0, [r7, #28]
 8001636:	f008 fcad 	bl	8009f94 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	697a      	ldr	r2, [r7, #20]
 800163e:	655a      	str	r2, [r3, #84]	; 0x54
 8001640:	e005      	b.n	800164e <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8001642:	6978      	ldr	r0, [r7, #20]
 8001644:	f003 fcfa 	bl	800503c <vPortFree>
 8001648:	e001      	b.n	800164e <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 800164a:	2300      	movs	r3, #0
 800164c:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d017      	beq.n	8001684 <xTaskCreate+0x84>
        {
            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	2200      	movs	r2, #0
 8001658:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800165c:	88fa      	ldrh	r2, [r7, #6]
 800165e:	2300      	movs	r3, #0
 8001660:	9303      	str	r3, [sp, #12]
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	9302      	str	r3, [sp, #8]
 8001666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001668:	9301      	str	r3, [sp, #4]
 800166a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800166c:	9300      	str	r3, [sp, #0]
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	68b9      	ldr	r1, [r7, #8]
 8001672:	68f8      	ldr	r0, [r7, #12]
 8001674:	f002 faa8 	bl	8003bc8 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8001678:	69f8      	ldr	r0, [r7, #28]
 800167a:	f002 fb3b 	bl	8003cf4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800167e:	2301      	movs	r3, #1
 8001680:	61bb      	str	r3, [r7, #24]
 8001682:	e002      	b.n	800168a <xTaskCreate+0x8a>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001684:	f04f 33ff 	mov.w	r3, #4294967295
 8001688:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800168a:	69bb      	ldr	r3, [r7, #24]
    }
 800168c:	4618      	mov	r0, r3
 800168e:	3720      	adds	r7, #32
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}

08001694 <xTaskCreateRestricted>:
    {
 8001694:	b5b0      	push	{r4, r5, r7, lr}
 8001696:	b088      	sub	sp, #32
 8001698:	af04      	add	r7, sp, #16
 800169a:	6078      	str	r0, [r7, #4]
 800169c:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800169e:	f04f 33ff 	mov.w	r3, #4294967295
 80016a2:	60fb      	str	r3, [r7, #12]
        configASSERT( pxTaskDefinition->puxStackBuffer );
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	695b      	ldr	r3, [r3, #20]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d102      	bne.n	80016b2 <xTaskCreateRestricted+0x1e>
 80016ac:	f003 fb73 	bl	8004d96 <ulSetInterruptMask>
 80016b0:	e7fe      	b.n	80016b0 <xTaskCreateRestricted+0x1c>
        if( pxTaskDefinition->puxStackBuffer != NULL )
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	695b      	ldr	r3, [r3, #20]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d02f      	beq.n	800171a <xTaskCreateRestricted+0x86>
            pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 80016ba:	2080      	movs	r0, #128	; 0x80
 80016bc:	f003 fbe4 	bl	8004e88 <pvPortMalloc>
 80016c0:	60b8      	str	r0, [r7, #8]
            if( pxNewTCB != NULL )
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d028      	beq.n	800171a <xTaskCreateRestricted+0x86>
                memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80016c8:	2280      	movs	r2, #128	; 0x80
 80016ca:	2100      	movs	r1, #0
 80016cc:	68b8      	ldr	r0, [r7, #8]
 80016ce:	f008 fc61 	bl	8009f94 <memset>
                pxNewTCB->pxStack = pxTaskDefinition->puxStackBuffer;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	695a      	ldr	r2, [r3, #20]
 80016d6:	68bb      	ldr	r3, [r7, #8]
 80016d8:	655a      	str	r2, [r3, #84]	; 0x54
                    pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_ONLY;
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	2201      	movs	r2, #1
 80016de:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
                prvInitialiseNewTask( pxTaskDefinition->pvTaskCode,
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6818      	ldr	r0, [r3, #0]
                                      pxTaskDefinition->pcName,
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6859      	ldr	r1, [r3, #4]
                                      ( uint32_t ) pxTaskDefinition->usStackDepth,
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	891b      	ldrh	r3, [r3, #8]
                prvInitialiseNewTask( pxTaskDefinition->pvTaskCode,
 80016ee:	461d      	mov	r5, r3
                                      pxTaskDefinition->pvParameters,
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	68dc      	ldr	r4, [r3, #12]
                                      pxTaskDefinition->uxPriority,
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	691b      	ldr	r3, [r3, #16]
                                      pxTaskDefinition->xRegions );
 80016f8:	687a      	ldr	r2, [r7, #4]
 80016fa:	3218      	adds	r2, #24
                prvInitialiseNewTask( pxTaskDefinition->pvTaskCode,
 80016fc:	9203      	str	r2, [sp, #12]
 80016fe:	68ba      	ldr	r2, [r7, #8]
 8001700:	9202      	str	r2, [sp, #8]
 8001702:	683a      	ldr	r2, [r7, #0]
 8001704:	9201      	str	r2, [sp, #4]
 8001706:	9300      	str	r3, [sp, #0]
 8001708:	4623      	mov	r3, r4
 800170a:	462a      	mov	r2, r5
 800170c:	f002 fa5c 	bl	8003bc8 <prvInitialiseNewTask>
                prvAddNewTaskToReadyList( pxNewTCB );
 8001710:	68b8      	ldr	r0, [r7, #8]
 8001712:	f002 faef 	bl	8003cf4 <prvAddNewTaskToReadyList>
                xReturn = pdPASS;
 8001716:	2301      	movs	r3, #1
 8001718:	60fb      	str	r3, [r7, #12]
        return xReturn;
 800171a:	68fb      	ldr	r3, [r7, #12]
    }
 800171c:	4618      	mov	r0, r3
 800171e:	3710      	adds	r7, #16
 8001720:	46bd      	mov	sp, r7
 8001722:	bdb0      	pop	{r4, r5, r7, pc}

08001724 <vTaskAllocateMPURegions>:

#if ( portUSING_MPU_WRAPPERS == 1 )

    void vTaskAllocateMPURegions( TaskHandle_t xTaskToModify,
                                  const MemoryRegion_t * const xRegions )
    {
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	6039      	str	r1, [r7, #0]
        TCB_t * pxTCB;

        /* If null is passed in here then we are modifying the MPU settings of
         * the calling task. */
        pxTCB = prvGetTCBFromHandle( xTaskToModify );
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d102      	bne.n	800173a <vTaskAllocateMPURegions+0x16>
 8001734:	4b07      	ldr	r3, [pc, #28]	; (8001754 <vTaskAllocateMPURegions+0x30>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	e000      	b.n	800173c <vTaskAllocateMPURegions+0x18>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	60fb      	str	r3, [r7, #12]

        vPortStoreTaskMPUSettings( &( pxTCB->xMPUSettings ), xRegions, NULL, 0 );
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	1d18      	adds	r0, r3, #4
 8001742:	2300      	movs	r3, #0
 8001744:	2200      	movs	r2, #0
 8001746:	6839      	ldr	r1, [r7, #0]
 8001748:	f003 f896 	bl	8004878 <vPortStoreTaskMPUSettings>
    }
 800174c:	bf00      	nop
 800174e:	3710      	adds	r7, #16
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	20000040 	.word	0x20000040

08001758 <vTaskDelete>:
    {
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
        taskENTER_CRITICAL();
 8001760:	f003 fa56 	bl	8004c10 <vPortEnterCritical>
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d102      	bne.n	8001770 <vTaskDelete+0x18>
 800176a:	4b28      	ldr	r3, [pc, #160]	; (800180c <vTaskDelete+0xb4>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	e000      	b.n	8001772 <vTaskDelete+0x1a>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	60fb      	str	r3, [r7, #12]
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	3328      	adds	r3, #40	; 0x28
 8001778:	4618      	mov	r0, r3
 800177a:	f7fe fde7 	bl	800034c <uxListRemove>
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001782:	2b00      	cmp	r3, #0
 8001784:	d004      	beq.n	8001790 <vTaskDelete+0x38>
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	333c      	adds	r3, #60	; 0x3c
 800178a:	4618      	mov	r0, r3
 800178c:	f7fe fdde 	bl	800034c <uxListRemove>
            uxTaskNumber++;
 8001790:	4b1f      	ldr	r3, [pc, #124]	; (8001810 <vTaskDelete+0xb8>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	3301      	adds	r3, #1
 8001796:	4a1e      	ldr	r2, [pc, #120]	; (8001810 <vTaskDelete+0xb8>)
 8001798:	6013      	str	r3, [r2, #0]
            if( pxTCB == pxCurrentTCB )
 800179a:	4b1c      	ldr	r3, [pc, #112]	; (800180c <vTaskDelete+0xb4>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	68fa      	ldr	r2, [r7, #12]
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d10b      	bne.n	80017bc <vTaskDelete+0x64>
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	3328      	adds	r3, #40	; 0x28
 80017a8:	4619      	mov	r1, r3
 80017aa:	481a      	ldr	r0, [pc, #104]	; (8001814 <vTaskDelete+0xbc>)
 80017ac:	f7fe fdaa 	bl	8000304 <vListInsertEnd>
                ++uxDeletedTasksWaitingCleanUp;
 80017b0:	4b19      	ldr	r3, [pc, #100]	; (8001818 <vTaskDelete+0xc0>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	3301      	adds	r3, #1
 80017b6:	4a18      	ldr	r2, [pc, #96]	; (8001818 <vTaskDelete+0xc0>)
 80017b8:	6013      	str	r3, [r2, #0]
 80017ba:	e006      	b.n	80017ca <vTaskDelete+0x72>
                --uxCurrentNumberOfTasks;
 80017bc:	4b17      	ldr	r3, [pc, #92]	; (800181c <vTaskDelete+0xc4>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	3b01      	subs	r3, #1
 80017c2:	4a16      	ldr	r2, [pc, #88]	; (800181c <vTaskDelete+0xc4>)
 80017c4:	6013      	str	r3, [r2, #0]
                prvResetNextTaskUnblockTime();
 80017c6:	f002 f9e3 	bl	8003b90 <prvResetNextTaskUnblockTime>
        taskEXIT_CRITICAL();
 80017ca:	f003 fa33 	bl	8004c34 <vPortExitCritical>
        if( pxTCB != pxCurrentTCB )
 80017ce:	4b0f      	ldr	r3, [pc, #60]	; (800180c <vTaskDelete+0xb4>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	68fa      	ldr	r2, [r7, #12]
 80017d4:	429a      	cmp	r2, r3
 80017d6:	d002      	beq.n	80017de <vTaskDelete+0x86>
            prvDeleteTCB( pxTCB );
 80017d8:	68f8      	ldr	r0, [r7, #12]
 80017da:	f002 f8a7 	bl	800392c <prvDeleteTCB>
        if( xSchedulerRunning != pdFALSE )
 80017de:	4b10      	ldr	r3, [pc, #64]	; (8001820 <vTaskDelete+0xc8>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d00d      	beq.n	8001802 <vTaskDelete+0xaa>
            if( pxTCB == pxCurrentTCB )
 80017e6:	4b09      	ldr	r3, [pc, #36]	; (800180c <vTaskDelete+0xb4>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	68fa      	ldr	r2, [r7, #12]
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d108      	bne.n	8001802 <vTaskDelete+0xaa>
                configASSERT( uxSchedulerSuspended == 0 );
 80017f0:	4b0c      	ldr	r3, [pc, #48]	; (8001824 <vTaskDelete+0xcc>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d002      	beq.n	80017fe <vTaskDelete+0xa6>
 80017f8:	f003 facd 	bl	8004d96 <ulSetInterruptMask>
 80017fc:	e7fe      	b.n	80017fc <vTaskDelete+0xa4>
                portYIELD_WITHIN_API();
 80017fe:	f003 f9f5 	bl	8004bec <vPortYield>
    }
 8001802:	bf00      	nop
 8001804:	3710      	adds	r7, #16
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	20000040 	.word	0x20000040
 8001810:	20000530 	.word	0x20000530
 8001814:	200004e8 	.word	0x200004e8
 8001818:	200004fc 	.word	0x200004fc
 800181c:	20000514 	.word	0x20000514
 8001820:	20000520 	.word	0x20000520
 8001824:	2000053c 	.word	0x2000053c

08001828 <vTaskDelay>:
    {
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8001830:	2300      	movs	r3, #0
 8001832:	60fb      	str	r3, [r7, #12]
        if( xTicksToDelay > ( TickType_t ) 0U )
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d00f      	beq.n	800185a <vTaskDelay+0x32>
            configASSERT( uxSchedulerSuspended == 0 );
 800183a:	4b0c      	ldr	r3, [pc, #48]	; (800186c <vTaskDelay+0x44>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d002      	beq.n	8001848 <vTaskDelay+0x20>
 8001842:	f003 faa8 	bl	8004d96 <ulSetInterruptMask>
 8001846:	e7fe      	b.n	8001846 <vTaskDelay+0x1e>
            vTaskSuspendAll();
 8001848:	f000 fb68 	bl	8001f1c <vTaskSuspendAll>
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800184c:	2100      	movs	r1, #0
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	f002 f8c0 	bl	80039d4 <prvAddCurrentTaskToDelayedList>
            xAlreadyYielded = xTaskResumeAll();
 8001854:	f000 fb70 	bl	8001f38 <xTaskResumeAll>
 8001858:	60f8      	str	r0, [r7, #12]
        if( xAlreadyYielded == pdFALSE )
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d101      	bne.n	8001864 <vTaskDelay+0x3c>
            portYIELD_WITHIN_API();
 8001860:	f003 f9c4 	bl	8004bec <vPortYield>
    }
 8001864:	bf00      	nop
 8001866:	3710      	adds	r7, #16
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}
 800186c:	2000053c 	.word	0x2000053c

08001870 <xTaskDelayUntil>:
    {
 8001870:	b580      	push	{r7, lr}
 8001872:	b086      	sub	sp, #24
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	6039      	str	r1, [r7, #0]
        BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800187a:	2300      	movs	r3, #0
 800187c:	617b      	str	r3, [r7, #20]
        configASSERT( pxPreviousWakeTime );
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d102      	bne.n	800188a <xTaskDelayUntil+0x1a>
 8001884:	f003 fa87 	bl	8004d96 <ulSetInterruptMask>
 8001888:	e7fe      	b.n	8001888 <xTaskDelayUntil+0x18>
        configASSERT( ( xTimeIncrement > 0U ) );
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d102      	bne.n	8001896 <xTaskDelayUntil+0x26>
 8001890:	f003 fa81 	bl	8004d96 <ulSetInterruptMask>
 8001894:	e7fe      	b.n	8001894 <xTaskDelayUntil+0x24>
        configASSERT( uxSchedulerSuspended == 0 );
 8001896:	4b23      	ldr	r3, [pc, #140]	; (8001924 <xTaskDelayUntil+0xb4>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d002      	beq.n	80018a4 <xTaskDelayUntil+0x34>
 800189e:	f003 fa7a 	bl	8004d96 <ulSetInterruptMask>
 80018a2:	e7fe      	b.n	80018a2 <xTaskDelayUntil+0x32>
        vTaskSuspendAll();
 80018a4:	f000 fb3a 	bl	8001f1c <vTaskSuspendAll>
            const TickType_t xConstTickCount = xTickCount;
 80018a8:	4b1f      	ldr	r3, [pc, #124]	; (8001928 <xTaskDelayUntil+0xb8>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	613b      	str	r3, [r7, #16]
            xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	683a      	ldr	r2, [r7, #0]
 80018b4:	4413      	add	r3, r2
 80018b6:	60fb      	str	r3, [r7, #12]
            if( xConstTickCount < *pxPreviousWakeTime )
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	693a      	ldr	r2, [r7, #16]
 80018be:	429a      	cmp	r2, r3
 80018c0:	d20b      	bcs.n	80018da <xTaskDelayUntil+0x6a>
                if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	68fa      	ldr	r2, [r7, #12]
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d211      	bcs.n	80018f0 <xTaskDelayUntil+0x80>
 80018cc:	68fa      	ldr	r2, [r7, #12]
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d90d      	bls.n	80018f0 <xTaskDelayUntil+0x80>
                    xShouldDelay = pdTRUE;
 80018d4:	2301      	movs	r3, #1
 80018d6:	617b      	str	r3, [r7, #20]
 80018d8:	e00a      	b.n	80018f0 <xTaskDelayUntil+0x80>
                if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	68fa      	ldr	r2, [r7, #12]
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d303      	bcc.n	80018ec <xTaskDelayUntil+0x7c>
 80018e4:	68fa      	ldr	r2, [r7, #12]
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d901      	bls.n	80018f0 <xTaskDelayUntil+0x80>
                    xShouldDelay = pdTRUE;
 80018ec:	2301      	movs	r3, #1
 80018ee:	617b      	str	r3, [r7, #20]
            *pxPreviousWakeTime = xTimeToWake;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	68fa      	ldr	r2, [r7, #12]
 80018f4:	601a      	str	r2, [r3, #0]
            if( xShouldDelay != pdFALSE )
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d006      	beq.n	800190a <xTaskDelayUntil+0x9a>
                prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80018fc:	68fa      	ldr	r2, [r7, #12]
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	2100      	movs	r1, #0
 8001904:	4618      	mov	r0, r3
 8001906:	f002 f865 	bl	80039d4 <prvAddCurrentTaskToDelayedList>
        xAlreadyYielded = xTaskResumeAll();
 800190a:	f000 fb15 	bl	8001f38 <xTaskResumeAll>
 800190e:	60b8      	str	r0, [r7, #8]
        if( xAlreadyYielded == pdFALSE )
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d101      	bne.n	800191a <xTaskDelayUntil+0xaa>
            portYIELD_WITHIN_API();
 8001916:	f003 f969 	bl	8004bec <vPortYield>
        return xShouldDelay;
 800191a:	697b      	ldr	r3, [r7, #20]
    }
 800191c:	4618      	mov	r0, r3
 800191e:	3718      	adds	r7, #24
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	2000053c 	.word	0x2000053c
 8001928:	20000518 	.word	0x20000518

0800192c <uxTaskPriorityGet>:
    {
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
        taskENTER_CRITICAL();
 8001934:	f003 f96c 	bl	8004c10 <vPortEnterCritical>
            pxTCB = prvGetTCBFromHandle( xTask );
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d102      	bne.n	8001944 <uxTaskPriorityGet+0x18>
 800193e:	4b07      	ldr	r3, [pc, #28]	; (800195c <uxTaskPriorityGet+0x30>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	e000      	b.n	8001946 <uxTaskPriorityGet+0x1a>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	60fb      	str	r3, [r7, #12]
            uxReturn = pxTCB->uxPriority;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800194c:	60bb      	str	r3, [r7, #8]
        taskEXIT_CRITICAL();
 800194e:	f003 f971 	bl	8004c34 <vPortExitCritical>
        return uxReturn;
 8001952:	68bb      	ldr	r3, [r7, #8]
    }
 8001954:	4618      	mov	r0, r3
 8001956:	3710      	adds	r7, #16
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	20000040 	.word	0x20000040

08001960 <uxTaskPriorityGetFromISR>:
    {
 8001960:	b580      	push	{r7, lr}
 8001962:	b086      	sub	sp, #24
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
        uxSavedInterruptState = portSET_INTERRUPT_MASK_FROM_ISR();
 8001968:	f003 fa15 	bl	8004d96 <ulSetInterruptMask>
 800196c:	6178      	str	r0, [r7, #20]
            pxTCB = prvGetTCBFromHandle( xTask );
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d102      	bne.n	800197a <uxTaskPriorityGetFromISR+0x1a>
 8001974:	4b07      	ldr	r3, [pc, #28]	; (8001994 <uxTaskPriorityGetFromISR+0x34>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	e000      	b.n	800197c <uxTaskPriorityGetFromISR+0x1c>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	613b      	str	r3, [r7, #16]
            uxReturn = pxTCB->uxPriority;
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001982:	60fb      	str	r3, [r7, #12]
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptState );
 8001984:	6978      	ldr	r0, [r7, #20]
 8001986:	f003 fa13 	bl	8004db0 <vClearInterruptMask>
        return uxReturn;
 800198a:	68fb      	ldr	r3, [r7, #12]
    }
 800198c:	4618      	mov	r0, r3
 800198e:	3718      	adds	r7, #24
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	20000040 	.word	0x20000040

08001998 <eTaskGetState>:
    {
 8001998:	b580      	push	{r7, lr}
 800199a:	b088      	sub	sp, #32
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
        const TCB_t * const pxTCB = xTask;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	617b      	str	r3, [r7, #20]
        configASSERT( pxTCB );
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d102      	bne.n	80019b0 <eTaskGetState+0x18>
 80019aa:	f003 f9f4 	bl	8004d96 <ulSetInterruptMask>
 80019ae:	e7fe      	b.n	80019ae <eTaskGetState+0x16>
        if( pxTCB == pxCurrentTCB )
 80019b0:	4b29      	ldr	r3, [pc, #164]	; (8001a58 <eTaskGetState+0xc0>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	697a      	ldr	r2, [r7, #20]
 80019b6:	429a      	cmp	r2, r3
 80019b8:	d102      	bne.n	80019c0 <eTaskGetState+0x28>
            eReturn = eRunning;
 80019ba:	2300      	movs	r3, #0
 80019bc:	77fb      	strb	r3, [r7, #31]
 80019be:	e045      	b.n	8001a4c <eTaskGetState+0xb4>
            taskENTER_CRITICAL();
 80019c0:	f003 f926 	bl	8004c10 <vPortEnterCritical>
                pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019c8:	613b      	str	r3, [r7, #16]
                pxDelayedList = pxDelayedTaskList;
 80019ca:	4b24      	ldr	r3, [pc, #144]	; (8001a5c <eTaskGetState+0xc4>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	60fb      	str	r3, [r7, #12]
                pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 80019d0:	4b23      	ldr	r3, [pc, #140]	; (8001a60 <eTaskGetState+0xc8>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	60bb      	str	r3, [r7, #8]
            taskEXIT_CRITICAL();
 80019d6:	f003 f92d 	bl	8004c34 <vPortExitCritical>
            if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 80019da:	693a      	ldr	r2, [r7, #16]
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	429a      	cmp	r2, r3
 80019e0:	d003      	beq.n	80019ea <eTaskGetState+0x52>
 80019e2:	693a      	ldr	r2, [r7, #16]
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	429a      	cmp	r2, r3
 80019e8:	d102      	bne.n	80019f0 <eTaskGetState+0x58>
                eReturn = eBlocked;
 80019ea:	2302      	movs	r3, #2
 80019ec:	77fb      	strb	r3, [r7, #31]
 80019ee:	e02d      	b.n	8001a4c <eTaskGetState+0xb4>
                else if( pxStateList == &xSuspendedTaskList )
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	4a1c      	ldr	r2, [pc, #112]	; (8001a64 <eTaskGetState+0xcc>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d11d      	bne.n	8001a34 <eTaskGetState+0x9c>
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d116      	bne.n	8001a2e <eTaskGetState+0x96>
                            eReturn = eSuspended;
 8001a00:	2303      	movs	r3, #3
 8001a02:	77fb      	strb	r3, [r7, #31]
                            for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8001a04:	2300      	movs	r3, #0
 8001a06:	61bb      	str	r3, [r7, #24]
 8001a08:	e00d      	b.n	8001a26 <eTaskGetState+0x8e>
                                if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 8001a0a:	697a      	ldr	r2, [r7, #20]
 8001a0c:	69bb      	ldr	r3, [r7, #24]
 8001a0e:	4413      	add	r3, r2
 8001a10:	337c      	adds	r3, #124	; 0x7c
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d102      	bne.n	8001a20 <eTaskGetState+0x88>
                                    eReturn = eBlocked;
 8001a1a:	2302      	movs	r3, #2
 8001a1c:	77fb      	strb	r3, [r7, #31]
                                    break;
 8001a1e:	e015      	b.n	8001a4c <eTaskGetState+0xb4>
                            for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	3301      	adds	r3, #1
 8001a24:	61bb      	str	r3, [r7, #24]
 8001a26:	69bb      	ldr	r3, [r7, #24]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	ddee      	ble.n	8001a0a <eTaskGetState+0x72>
 8001a2c:	e00e      	b.n	8001a4c <eTaskGetState+0xb4>
                        eReturn = eBlocked;
 8001a2e:	2302      	movs	r3, #2
 8001a30:	77fb      	strb	r3, [r7, #31]
 8001a32:	e00b      	b.n	8001a4c <eTaskGetState+0xb4>
                else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	4a0c      	ldr	r2, [pc, #48]	; (8001a68 <eTaskGetState+0xd0>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d002      	beq.n	8001a42 <eTaskGetState+0xaa>
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d102      	bne.n	8001a48 <eTaskGetState+0xb0>
                    eReturn = eDeleted;
 8001a42:	2304      	movs	r3, #4
 8001a44:	77fb      	strb	r3, [r7, #31]
 8001a46:	e001      	b.n	8001a4c <eTaskGetState+0xb4>
                eReturn = eReady;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	77fb      	strb	r3, [r7, #31]
        return eReturn;
 8001a4c:	7ffb      	ldrb	r3, [r7, #31]
    } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3720      	adds	r7, #32
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	20000040 	.word	0x20000040
 8001a5c:	200004cc 	.word	0x200004cc
 8001a60:	200004d0 	.word	0x200004d0
 8001a64:	20000500 	.word	0x20000500
 8001a68:	200004e8 	.word	0x200004e8

08001a6c <vTaskGetInfo>:

    void vTaskGetInfo( TaskHandle_t xTask,
                       TaskStatus_t * pxTaskStatus,
                       BaseType_t xGetFreeStackSpace,
                       eTaskState eState )
    {
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b086      	sub	sp, #24
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	60f8      	str	r0, [r7, #12]
 8001a74:	60b9      	str	r1, [r7, #8]
 8001a76:	607a      	str	r2, [r7, #4]
 8001a78:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;

        /* xTask is NULL then get the state of the calling task. */
        pxTCB = prvGetTCBFromHandle( xTask );
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d102      	bne.n	8001a86 <vTaskGetInfo+0x1a>
 8001a80:	4b2c      	ldr	r3, [pc, #176]	; (8001b34 <vTaskGetInfo+0xc8>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	e000      	b.n	8001a88 <vTaskGetInfo+0x1c>
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	617b      	str	r3, [r7, #20]

        pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	697a      	ldr	r2, [r7, #20]
 8001a8e:	601a      	str	r2, [r3, #0]
        pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName[ 0 ] );
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	f103 0258 	add.w	r2, r3, #88	; 0x58
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	605a      	str	r2, [r3, #4]
        pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	611a      	str	r2, [r3, #16]
        pxTaskStatus->pxStackBase = pxTCB->pxStack;
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	61da      	str	r2, [r3, #28]
        #if ( ( portSTACK_GROWTH > 0 ) && ( configRECORD_STACK_HIGH_ADDRESS == 1 ) )
            pxTaskStatus->pxTopOfStack = pxTCB->pxTopOfStack;
            pxTaskStatus->pxEndOfStack = pxTCB->pxEndOfStack;
        #endif
        pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	609a      	str	r2, [r3, #8]

        #if ( configUSE_MUTEXES == 1 )
        {
            pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	615a      	str	r2, [r3, #20]
        {
            pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
        }
        #else
        {
            pxTaskStatus->ulRunTimeCounter = ( configRUN_TIME_COUNTER_TYPE ) 0;
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	2200      	movs	r2, #0
 8001abe:	619a      	str	r2, [r3, #24]
        #endif

        /* Obtaining the task state is a little fiddly, so is only done if the
         * value of eState passed into this function is eInvalid - otherwise the
         * state is just set to whatever is passed in. */
        if( eState != eInvalid )
 8001ac0:	78fb      	ldrb	r3, [r7, #3]
 8001ac2:	2b05      	cmp	r3, #5
 8001ac4:	d01a      	beq.n	8001afc <vTaskGetInfo+0x90>
        {
            if( pxTCB == pxCurrentTCB )
 8001ac6:	4b1b      	ldr	r3, [pc, #108]	; (8001b34 <vTaskGetInfo+0xc8>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	697a      	ldr	r2, [r7, #20]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d103      	bne.n	8001ad8 <vTaskGetInfo+0x6c>
            {
                pxTaskStatus->eCurrentState = eRunning;
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	731a      	strb	r2, [r3, #12]
 8001ad6:	e018      	b.n	8001b0a <vTaskGetInfo+0x9e>
            }
            else
            {
                pxTaskStatus->eCurrentState = eState;
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	78fa      	ldrb	r2, [r7, #3]
 8001adc:	731a      	strb	r2, [r3, #12]
                #if ( INCLUDE_vTaskSuspend == 1 )
                {
                    /* If the task is in the suspended list then there is a
                     *  chance it is actually just blocked indefinitely - so really
                     *  it should be reported as being in the Blocked state. */
                    if( eState == eSuspended )
 8001ade:	78fb      	ldrb	r3, [r7, #3]
 8001ae0:	2b03      	cmp	r3, #3
 8001ae2:	d112      	bne.n	8001b0a <vTaskGetInfo+0x9e>
                    {
                        vTaskSuspendAll();
 8001ae4:	f000 fa1a 	bl	8001f1c <vTaskSuspendAll>
                        {
                            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d002      	beq.n	8001af6 <vTaskGetInfo+0x8a>
                            {
                                pxTaskStatus->eCurrentState = eBlocked;
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	2202      	movs	r2, #2
 8001af4:	731a      	strb	r2, [r3, #12]
                            }
                        }
                        ( void ) xTaskResumeAll();
 8001af6:	f000 fa1f 	bl	8001f38 <xTaskResumeAll>
 8001afa:	e006      	b.n	8001b0a <vTaskGetInfo+0x9e>
                #endif /* INCLUDE_vTaskSuspend */
            }
        }
        else
        {
            pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 8001afc:	6978      	ldr	r0, [r7, #20]
 8001afe:	f7ff ff4b 	bl	8001998 <eTaskGetState>
 8001b02:	4603      	mov	r3, r0
 8001b04:	461a      	mov	r2, r3
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	731a      	strb	r2, [r3, #12]
        }

        /* Obtaining the stack space takes some time, so the xGetFreeStackSpace
         * parameter is provided to allow it to be skipped. */
        if( xGetFreeStackSpace != pdFALSE )
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d009      	beq.n	8001b24 <vTaskGetInfo+0xb8>
            {
                pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
            }
            #else
            {
                pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b14:	4618      	mov	r0, r3
 8001b16:	f002 f81f 	bl	8003b58 <prvTaskCheckFreeStackSpace>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	841a      	strh	r2, [r3, #32]
        }
        else
        {
            pxTaskStatus->usStackHighWaterMark = 0;
        }
    }
 8001b22:	e002      	b.n	8001b2a <vTaskGetInfo+0xbe>
            pxTaskStatus->usStackHighWaterMark = 0;
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	2200      	movs	r2, #0
 8001b28:	841a      	strh	r2, [r3, #32]
    }
 8001b2a:	bf00      	nop
 8001b2c:	3718      	adds	r7, #24
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	20000040 	.word	0x20000040

08001b38 <vTaskPrioritySet>:
    {
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b088      	sub	sp, #32
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	6039      	str	r1, [r7, #0]
        BaseType_t xYieldRequired = pdFALSE;
 8001b42:	2300      	movs	r3, #0
 8001b44:	61fb      	str	r3, [r7, #28]
        configASSERT( uxNewPriority < configMAX_PRIORITIES );
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	2b37      	cmp	r3, #55	; 0x37
 8001b4a:	d902      	bls.n	8001b52 <vTaskPrioritySet+0x1a>
 8001b4c:	f003 f923 	bl	8004d96 <ulSetInterruptMask>
 8001b50:	e7fe      	b.n	8001b50 <vTaskPrioritySet+0x18>
        if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	2b37      	cmp	r3, #55	; 0x37
 8001b56:	d901      	bls.n	8001b5c <vTaskPrioritySet+0x24>
            uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001b58:	2337      	movs	r3, #55	; 0x37
 8001b5a:	603b      	str	r3, [r7, #0]
        taskENTER_CRITICAL();
 8001b5c:	f003 f858 	bl	8004c10 <vPortEnterCritical>
            pxTCB = prvGetTCBFromHandle( xTask );
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d102      	bne.n	8001b6c <vTaskPrioritySet+0x34>
 8001b66:	4b4d      	ldr	r3, [pc, #308]	; (8001c9c <vTaskPrioritySet+0x164>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	e000      	b.n	8001b6e <vTaskPrioritySet+0x36>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	61bb      	str	r3, [r7, #24]
                uxCurrentBasePriority = pxTCB->uxBasePriority;
 8001b70:	69bb      	ldr	r3, [r7, #24]
 8001b72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b74:	617b      	str	r3, [r7, #20]
            if( uxCurrentBasePriority != uxNewPriority )
 8001b76:	697a      	ldr	r2, [r7, #20]
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	f000 8087 	beq.w	8001c8e <vTaskPrioritySet+0x156>
                if( uxNewPriority > uxCurrentBasePriority )
 8001b80:	683a      	ldr	r2, [r7, #0]
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d90d      	bls.n	8001ba4 <vTaskPrioritySet+0x6c>
                    if( pxTCB != pxCurrentTCB )
 8001b88:	4b44      	ldr	r3, [pc, #272]	; (8001c9c <vTaskPrioritySet+0x164>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d00f      	beq.n	8001bb2 <vTaskPrioritySet+0x7a>
                        if( uxNewPriority >= pxCurrentTCB->uxPriority )
 8001b92:	4b42      	ldr	r3, [pc, #264]	; (8001c9c <vTaskPrioritySet+0x164>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b98:	683a      	ldr	r2, [r7, #0]
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	d309      	bcc.n	8001bb2 <vTaskPrioritySet+0x7a>
                            xYieldRequired = pdTRUE;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	61fb      	str	r3, [r7, #28]
 8001ba2:	e006      	b.n	8001bb2 <vTaskPrioritySet+0x7a>
                else if( pxTCB == pxCurrentTCB )
 8001ba4:	4b3d      	ldr	r3, [pc, #244]	; (8001c9c <vTaskPrioritySet+0x164>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	429a      	cmp	r2, r3
 8001bac:	d101      	bne.n	8001bb2 <vTaskPrioritySet+0x7a>
                    xYieldRequired = pdTRUE;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	61fb      	str	r3, [r7, #28]
                uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8001bb2:	69bb      	ldr	r3, [r7, #24]
 8001bb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bb6:	613b      	str	r3, [r7, #16]
                    if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 8001bb8:	69bb      	ldr	r3, [r7, #24]
 8001bba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001bbc:	69bb      	ldr	r3, [r7, #24]
 8001bbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d102      	bne.n	8001bca <vTaskPrioritySet+0x92>
                        pxTCB->uxPriority = uxNewPriority;
 8001bc4:	69bb      	ldr	r3, [r7, #24]
 8001bc6:	683a      	ldr	r2, [r7, #0]
 8001bc8:	651a      	str	r2, [r3, #80]	; 0x50
                    pxTCB->uxBasePriority = uxNewPriority;
 8001bca:	69bb      	ldr	r3, [r7, #24]
 8001bcc:	683a      	ldr	r2, [r7, #0]
 8001bce:	671a      	str	r2, [r3, #112]	; 0x70
                if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8001bd0:	69bb      	ldr	r3, [r7, #24]
 8001bd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	db04      	blt.n	8001be2 <vTaskPrioritySet+0xaa>
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8001bde:	69bb      	ldr	r3, [r7, #24]
 8001be0:	63da      	str	r2, [r3, #60]	; 0x3c
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8001be2:	69bb      	ldr	r3, [r7, #24]
 8001be4:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001be6:	693a      	ldr	r2, [r7, #16]
 8001be8:	4613      	mov	r3, r2
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	4413      	add	r3, r2
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	4a2b      	ldr	r2, [pc, #172]	; (8001ca0 <vTaskPrioritySet+0x168>)
 8001bf2:	4413      	add	r3, r2
 8001bf4:	4299      	cmp	r1, r3
 8001bf6:	d145      	bne.n	8001c84 <vTaskPrioritySet+0x14c>
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001bf8:	69bb      	ldr	r3, [r7, #24]
 8001bfa:	3328      	adds	r3, #40	; 0x28
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f7fe fba5 	bl	800034c <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8001c02:	69bb      	ldr	r3, [r7, #24]
 8001c04:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c06:	4b27      	ldr	r3, [pc, #156]	; (8001ca4 <vTaskPrioritySet+0x16c>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d903      	bls.n	8001c16 <vTaskPrioritySet+0xde>
 8001c0e:	69bb      	ldr	r3, [r7, #24]
 8001c10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c12:	4a24      	ldr	r2, [pc, #144]	; (8001ca4 <vTaskPrioritySet+0x16c>)
 8001c14:	6013      	str	r3, [r2, #0]
 8001c16:	69bb      	ldr	r3, [r7, #24]
 8001c18:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c1a:	4921      	ldr	r1, [pc, #132]	; (8001ca0 <vTaskPrioritySet+0x168>)
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	4413      	add	r3, r2
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	440b      	add	r3, r1
 8001c26:	3304      	adds	r3, #4
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	60fb      	str	r3, [r7, #12]
 8001c2c:	69bb      	ldr	r3, [r7, #24]
 8001c2e:	68fa      	ldr	r2, [r7, #12]
 8001c30:	62da      	str	r2, [r3, #44]	; 0x2c
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	689a      	ldr	r2, [r3, #8]
 8001c36:	69bb      	ldr	r3, [r7, #24]
 8001c38:	631a      	str	r2, [r3, #48]	; 0x30
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	69ba      	ldr	r2, [r7, #24]
 8001c40:	3228      	adds	r2, #40	; 0x28
 8001c42:	605a      	str	r2, [r3, #4]
 8001c44:	69bb      	ldr	r3, [r7, #24]
 8001c46:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	609a      	str	r2, [r3, #8]
 8001c4e:	69bb      	ldr	r3, [r7, #24]
 8001c50:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c52:	4613      	mov	r3, r2
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	4413      	add	r3, r2
 8001c58:	009b      	lsls	r3, r3, #2
 8001c5a:	4a11      	ldr	r2, [pc, #68]	; (8001ca0 <vTaskPrioritySet+0x168>)
 8001c5c:	441a      	add	r2, r3
 8001c5e:	69bb      	ldr	r3, [r7, #24]
 8001c60:	639a      	str	r2, [r3, #56]	; 0x38
 8001c62:	69bb      	ldr	r3, [r7, #24]
 8001c64:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c66:	490e      	ldr	r1, [pc, #56]	; (8001ca0 <vTaskPrioritySet+0x168>)
 8001c68:	4613      	mov	r3, r2
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	4413      	add	r3, r2
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	440b      	add	r3, r1
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	1c59      	adds	r1, r3, #1
 8001c76:	480a      	ldr	r0, [pc, #40]	; (8001ca0 <vTaskPrioritySet+0x168>)
 8001c78:	4613      	mov	r3, r2
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	4413      	add	r3, r2
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	4403      	add	r3, r0
 8001c82:	6019      	str	r1, [r3, #0]
                if( xYieldRequired != pdFALSE )
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <vTaskPrioritySet+0x156>
                    taskYIELD_IF_USING_PREEMPTION();
 8001c8a:	f002 ffaf 	bl	8004bec <vPortYield>
        taskEXIT_CRITICAL();
 8001c8e:	f002 ffd1 	bl	8004c34 <vPortExitCritical>
    }
 8001c92:	bf00      	nop
 8001c94:	3720      	adds	r7, #32
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	20000040 	.word	0x20000040
 8001ca0:	20000044 	.word	0x20000044
 8001ca4:	2000051c 	.word	0x2000051c

08001ca8 <vTaskSuspend>:
    {
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b084      	sub	sp, #16
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
        taskENTER_CRITICAL();
 8001cb0:	f002 ffae 	bl	8004c10 <vPortEnterCritical>
            pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d102      	bne.n	8001cc0 <vTaskSuspend+0x18>
 8001cba:	4b2f      	ldr	r3, [pc, #188]	; (8001d78 <vTaskSuspend+0xd0>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	e000      	b.n	8001cc2 <vTaskSuspend+0x1a>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	60bb      	str	r3, [r7, #8]
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	3328      	adds	r3, #40	; 0x28
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f7fe fb3f 	bl	800034c <uxListRemove>
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d004      	beq.n	8001ce0 <vTaskSuspend+0x38>
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	333c      	adds	r3, #60	; 0x3c
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7fe fb36 	bl	800034c <uxListRemove>
            vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	3328      	adds	r3, #40	; 0x28
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	4825      	ldr	r0, [pc, #148]	; (8001d7c <vTaskSuspend+0xd4>)
 8001ce8:	f7fe fb0c 	bl	8000304 <vListInsertEnd>
                for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8001cec:	2300      	movs	r3, #0
 8001cee:	60fb      	str	r3, [r7, #12]
 8001cf0:	e010      	b.n	8001d14 <vTaskSuspend+0x6c>
                    if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 8001cf2:	68ba      	ldr	r2, [r7, #8]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	337c      	adds	r3, #124	; 0x7c
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d105      	bne.n	8001d0e <vTaskSuspend+0x66>
                        pxTCB->ucNotifyState[ x ] = taskNOT_WAITING_NOTIFICATION;
 8001d02:	68ba      	ldr	r2, [r7, #8]
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	4413      	add	r3, r2
 8001d08:	337c      	adds	r3, #124	; 0x7c
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	701a      	strb	r2, [r3, #0]
                for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	3301      	adds	r3, #1
 8001d12:	60fb      	str	r3, [r7, #12]
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	ddeb      	ble.n	8001cf2 <vTaskSuspend+0x4a>
        taskEXIT_CRITICAL();
 8001d1a:	f002 ff8b 	bl	8004c34 <vPortExitCritical>
        if( xSchedulerRunning != pdFALSE )
 8001d1e:	4b18      	ldr	r3, [pc, #96]	; (8001d80 <vTaskSuspend+0xd8>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d005      	beq.n	8001d32 <vTaskSuspend+0x8a>
            taskENTER_CRITICAL();
 8001d26:	f002 ff73 	bl	8004c10 <vPortEnterCritical>
                prvResetNextTaskUnblockTime();
 8001d2a:	f001 ff31 	bl	8003b90 <prvResetNextTaskUnblockTime>
            taskEXIT_CRITICAL();
 8001d2e:	f002 ff81 	bl	8004c34 <vPortExitCritical>
        if( pxTCB == pxCurrentTCB )
 8001d32:	4b11      	ldr	r3, [pc, #68]	; (8001d78 <vTaskSuspend+0xd0>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	68ba      	ldr	r2, [r7, #8]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d119      	bne.n	8001d70 <vTaskSuspend+0xc8>
            if( xSchedulerRunning != pdFALSE )
 8001d3c:	4b10      	ldr	r3, [pc, #64]	; (8001d80 <vTaskSuspend+0xd8>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d009      	beq.n	8001d58 <vTaskSuspend+0xb0>
                configASSERT( uxSchedulerSuspended == 0 );
 8001d44:	4b0f      	ldr	r3, [pc, #60]	; (8001d84 <vTaskSuspend+0xdc>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d002      	beq.n	8001d52 <vTaskSuspend+0xaa>
 8001d4c:	f003 f823 	bl	8004d96 <ulSetInterruptMask>
 8001d50:	e7fe      	b.n	8001d50 <vTaskSuspend+0xa8>
                portYIELD_WITHIN_API();
 8001d52:	f002 ff4b 	bl	8004bec <vPortYield>
    }
 8001d56:	e00b      	b.n	8001d70 <vTaskSuspend+0xc8>
                if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8001d58:	4b08      	ldr	r3, [pc, #32]	; (8001d7c <vTaskSuspend+0xd4>)
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	4b0a      	ldr	r3, [pc, #40]	; (8001d88 <vTaskSuspend+0xe0>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d103      	bne.n	8001d6c <vTaskSuspend+0xc4>
                    pxCurrentTCB = NULL;
 8001d64:	4b04      	ldr	r3, [pc, #16]	; (8001d78 <vTaskSuspend+0xd0>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	601a      	str	r2, [r3, #0]
    }
 8001d6a:	e001      	b.n	8001d70 <vTaskSuspend+0xc8>
                    vTaskSwitchContext();
 8001d6c:	f001 fab8 	bl	80032e0 <vTaskSwitchContext>
    }
 8001d70:	bf00      	nop
 8001d72:	3710      	adds	r7, #16
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	20000040 	.word	0x20000040
 8001d7c:	20000500 	.word	0x20000500
 8001d80:	20000520 	.word	0x20000520
 8001d84:	2000053c 	.word	0x2000053c
 8001d88:	20000514 	.word	0x20000514

08001d8c <vTaskResume>:
    {
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = xTaskToResume;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	60fb      	str	r3, [r7, #12]
        configASSERT( xTaskToResume );
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d102      	bne.n	8001da4 <vTaskResume+0x18>
 8001d9e:	f002 fffa 	bl	8004d96 <ulSetInterruptMask>
 8001da2:	e7fe      	b.n	8001da2 <vTaskResume+0x16>
        if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8001da4:	4b32      	ldr	r3, [pc, #200]	; (8001e70 <vTaskResume+0xe4>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	68fa      	ldr	r2, [r7, #12]
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d05b      	beq.n	8001e66 <vTaskResume+0xda>
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d058      	beq.n	8001e66 <vTaskResume+0xda>
            taskENTER_CRITICAL();
 8001db4:	f002 ff2c 	bl	8004c10 <vPortEnterCritical>
                if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8001db8:	68f8      	ldr	r0, [r7, #12]
 8001dba:	f001 fd3f 	bl	800383c <prvTaskIsTaskSuspended>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d04e      	beq.n	8001e62 <vTaskResume+0xd6>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	3328      	adds	r3, #40	; 0x28
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7fe fabf 	bl	800034c <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001dd2:	4b28      	ldr	r3, [pc, #160]	; (8001e74 <vTaskResume+0xe8>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	d903      	bls.n	8001de2 <vTaskResume+0x56>
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dde:	4a25      	ldr	r2, [pc, #148]	; (8001e74 <vTaskResume+0xe8>)
 8001de0:	6013      	str	r3, [r2, #0]
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001de6:	4924      	ldr	r1, [pc, #144]	; (8001e78 <vTaskResume+0xec>)
 8001de8:	4613      	mov	r3, r2
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	4413      	add	r3, r2
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	440b      	add	r3, r1
 8001df2:	3304      	adds	r3, #4
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	60bb      	str	r3, [r7, #8]
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	68ba      	ldr	r2, [r7, #8]
 8001dfc:	62da      	str	r2, [r3, #44]	; 0x2c
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	689a      	ldr	r2, [r3, #8]
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	631a      	str	r2, [r3, #48]	; 0x30
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	68fa      	ldr	r2, [r7, #12]
 8001e0c:	3228      	adds	r2, #40	; 0x28
 8001e0e:	605a      	str	r2, [r3, #4]
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	609a      	str	r2, [r3, #8]
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e1e:	4613      	mov	r3, r2
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	4413      	add	r3, r2
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	4a14      	ldr	r2, [pc, #80]	; (8001e78 <vTaskResume+0xec>)
 8001e28:	441a      	add	r2, r3
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	639a      	str	r2, [r3, #56]	; 0x38
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e32:	4911      	ldr	r1, [pc, #68]	; (8001e78 <vTaskResume+0xec>)
 8001e34:	4613      	mov	r3, r2
 8001e36:	009b      	lsls	r3, r3, #2
 8001e38:	4413      	add	r3, r2
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	440b      	add	r3, r1
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	1c59      	adds	r1, r3, #1
 8001e42:	480d      	ldr	r0, [pc, #52]	; (8001e78 <vTaskResume+0xec>)
 8001e44:	4613      	mov	r3, r2
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	4413      	add	r3, r2
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	4403      	add	r3, r0
 8001e4e:	6019      	str	r1, [r3, #0]
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e54:	4b06      	ldr	r3, [pc, #24]	; (8001e70 <vTaskResume+0xe4>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	d301      	bcc.n	8001e62 <vTaskResume+0xd6>
                        taskYIELD_IF_USING_PREEMPTION();
 8001e5e:	f002 fec5 	bl	8004bec <vPortYield>
            taskEXIT_CRITICAL();
 8001e62:	f002 fee7 	bl	8004c34 <vPortExitCritical>
    }
 8001e66:	bf00      	nop
 8001e68:	3710      	adds	r7, #16
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	20000040 	.word	0x20000040
 8001e74:	2000051c 	.word	0x2000051c
 8001e78:	20000044 	.word	0x20000044

08001e7c <vTaskStartScheduler>:
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b084      	sub	sp, #16
 8001e80:	af02      	add	r7, sp, #8
        xReturn = xTaskCreate( prvIdleTask,
 8001e82:	4b18      	ldr	r3, [pc, #96]	; (8001ee4 <vTaskStartScheduler+0x68>)
 8001e84:	9301      	str	r3, [sp, #4]
 8001e86:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001e8a:	9300      	str	r3, [sp, #0]
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	2280      	movs	r2, #128	; 0x80
 8001e90:	4915      	ldr	r1, [pc, #84]	; (8001ee8 <vTaskStartScheduler+0x6c>)
 8001e92:	4816      	ldr	r0, [pc, #88]	; (8001eec <vTaskStartScheduler+0x70>)
 8001e94:	f7ff fbb4 	bl	8001600 <xTaskCreate>
 8001e98:	6078      	str	r0, [r7, #4]
        if( xReturn == pdPASS )
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d102      	bne.n	8001ea6 <vTaskStartScheduler+0x2a>
            xReturn = xTimerCreateTimerTask();
 8001ea0:	f002 f912 	bl	80040c8 <xTimerCreateTimerTask>
 8001ea4:	6078      	str	r0, [r7, #4]
    if( xReturn == pdPASS )
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d10e      	bne.n	8001eca <vTaskStartScheduler+0x4e>
        portDISABLE_INTERRUPTS();
 8001eac:	f002 ff73 	bl	8004d96 <ulSetInterruptMask>
        xNextTaskUnblockTime = portMAX_DELAY;
 8001eb0:	4b0f      	ldr	r3, [pc, #60]	; (8001ef0 <vTaskStartScheduler+0x74>)
 8001eb2:	f04f 32ff 	mov.w	r2, #4294967295
 8001eb6:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8001eb8:	4b0e      	ldr	r3, [pc, #56]	; (8001ef4 <vTaskStartScheduler+0x78>)
 8001eba:	2201      	movs	r2, #1
 8001ebc:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001ebe:	4b0e      	ldr	r3, [pc, #56]	; (8001ef8 <vTaskStartScheduler+0x7c>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	601a      	str	r2, [r3, #0]
        xPortStartScheduler();
 8001ec4:	f002 fca8 	bl	8004818 <xPortStartScheduler>
 8001ec8:	e006      	b.n	8001ed8 <vTaskStartScheduler+0x5c>
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ed0:	d102      	bne.n	8001ed8 <vTaskStartScheduler+0x5c>
 8001ed2:	f002 ff60 	bl	8004d96 <ulSetInterruptMask>
 8001ed6:	e7fe      	b.n	8001ed6 <vTaskStartScheduler+0x5a>
    ( void ) uxTopUsedPriority;
 8001ed8:	4b08      	ldr	r3, [pc, #32]	; (8001efc <vTaskStartScheduler+0x80>)
 8001eda:	681b      	ldr	r3, [r3, #0]
}
 8001edc:	bf00      	nop
 8001ede:	3708      	adds	r7, #8
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	20000538 	.word	0x20000538
 8001ee8:	0800a020 	.word	0x0800a020
 8001eec:	0800390d 	.word	0x0800390d
 8001ef0:	20000534 	.word	0x20000534
 8001ef4:	20000520 	.word	0x20000520
 8001ef8:	20000518 	.word	0x20000518
 8001efc:	2000800c 	.word	0x2000800c

08001f00 <vTaskEndScheduler>:
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8001f04:	f002 ff47 	bl	8004d96 <ulSetInterruptMask>
    xSchedulerRunning = pdFALSE;
 8001f08:	4b03      	ldr	r3, [pc, #12]	; (8001f18 <vTaskEndScheduler+0x18>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	601a      	str	r2, [r3, #0]
    vPortEndScheduler();
 8001f0e:	f002 fca5 	bl	800485c <vPortEndScheduler>
}
 8001f12:	bf00      	nop
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	20000520 	.word	0x20000520

08001f1c <vTaskSuspendAll>:
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
    ++uxSchedulerSuspended;
 8001f20:	4b04      	ldr	r3, [pc, #16]	; (8001f34 <vTaskSuspendAll+0x18>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	3301      	adds	r3, #1
 8001f26:	4a03      	ldr	r2, [pc, #12]	; (8001f34 <vTaskSuspendAll+0x18>)
 8001f28:	6013      	str	r3, [r2, #0]
}
 8001f2a:	bf00      	nop
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr
 8001f34:	2000053c 	.word	0x2000053c

08001f38 <xTaskResumeAll>:
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b086      	sub	sp, #24
 8001f3c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	617b      	str	r3, [r7, #20]
    BaseType_t xAlreadyYielded = pdFALSE;
 8001f42:	2300      	movs	r3, #0
 8001f44:	613b      	str	r3, [r7, #16]
    configASSERT( uxSchedulerSuspended );
 8001f46:	4b6b      	ldr	r3, [pc, #428]	; (80020f4 <xTaskResumeAll+0x1bc>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d102      	bne.n	8001f54 <xTaskResumeAll+0x1c>
 8001f4e:	f002 ff22 	bl	8004d96 <ulSetInterruptMask>
 8001f52:	e7fe      	b.n	8001f52 <xTaskResumeAll+0x1a>
    taskENTER_CRITICAL();
 8001f54:	f002 fe5c 	bl	8004c10 <vPortEnterCritical>
        --uxSchedulerSuspended;
 8001f58:	4b66      	ldr	r3, [pc, #408]	; (80020f4 <xTaskResumeAll+0x1bc>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	3b01      	subs	r3, #1
 8001f5e:	4a65      	ldr	r2, [pc, #404]	; (80020f4 <xTaskResumeAll+0x1bc>)
 8001f60:	6013      	str	r3, [r2, #0]
        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001f62:	4b64      	ldr	r3, [pc, #400]	; (80020f4 <xTaskResumeAll+0x1bc>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	f040 80bc 	bne.w	80020e4 <xTaskResumeAll+0x1ac>
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001f6c:	4b62      	ldr	r3, [pc, #392]	; (80020f8 <xTaskResumeAll+0x1c0>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	f000 80b7 	beq.w	80020e4 <xTaskResumeAll+0x1ac>
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001f76:	e08c      	b.n	8002092 <xTaskResumeAll+0x15a>
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001f78:	4b60      	ldr	r3, [pc, #384]	; (80020fc <xTaskResumeAll+0x1c4>)
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	68db      	ldr	r3, [r3, #12]
 8001f7e:	617b      	str	r3, [r7, #20]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f84:	60bb      	str	r3, [r7, #8]
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8a:	697a      	ldr	r2, [r7, #20]
 8001f8c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001f8e:	609a      	str	r2, [r3, #8]
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f94:	697a      	ldr	r2, [r7, #20]
 8001f96:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001f98:	605a      	str	r2, [r3, #4]
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	685a      	ldr	r2, [r3, #4]
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	333c      	adds	r3, #60	; 0x3c
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d103      	bne.n	8001fae <xTaskResumeAll+0x76>
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	605a      	str	r2, [r3, #4]
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	64da      	str	r2, [r3, #76]	; 0x4c
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	1e5a      	subs	r2, r3, #1
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	601a      	str	r2, [r3, #0]
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fc2:	607b      	str	r3, [r7, #4]
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fc8:	697a      	ldr	r2, [r7, #20]
 8001fca:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001fcc:	609a      	str	r2, [r3, #8]
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd2:	697a      	ldr	r2, [r7, #20]
 8001fd4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001fd6:	605a      	str	r2, [r3, #4]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	685a      	ldr	r2, [r3, #4]
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	3328      	adds	r3, #40	; 0x28
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d103      	bne.n	8001fec <xTaskResumeAll+0xb4>
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	605a      	str	r2, [r3, #4]
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	639a      	str	r2, [r3, #56]	; 0x38
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	1e5a      	subs	r2, r3, #1
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002000:	4b3f      	ldr	r3, [pc, #252]	; (8002100 <xTaskResumeAll+0x1c8>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	429a      	cmp	r2, r3
 8002006:	d903      	bls.n	8002010 <xTaskResumeAll+0xd8>
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800200c:	4a3c      	ldr	r2, [pc, #240]	; (8002100 <xTaskResumeAll+0x1c8>)
 800200e:	6013      	str	r3, [r2, #0]
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002014:	493b      	ldr	r1, [pc, #236]	; (8002104 <xTaskResumeAll+0x1cc>)
 8002016:	4613      	mov	r3, r2
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	4413      	add	r3, r2
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	440b      	add	r3, r1
 8002020:	3304      	adds	r3, #4
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	603b      	str	r3, [r7, #0]
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	683a      	ldr	r2, [r7, #0]
 800202a:	62da      	str	r2, [r3, #44]	; 0x2c
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	689a      	ldr	r2, [r3, #8]
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	631a      	str	r2, [r3, #48]	; 0x30
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	697a      	ldr	r2, [r7, #20]
 800203a:	3228      	adds	r2, #40	; 0x28
 800203c:	605a      	str	r2, [r3, #4]
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	609a      	str	r2, [r3, #8]
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800204c:	4613      	mov	r3, r2
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	4413      	add	r3, r2
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	4a2b      	ldr	r2, [pc, #172]	; (8002104 <xTaskResumeAll+0x1cc>)
 8002056:	441a      	add	r2, r3
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	639a      	str	r2, [r3, #56]	; 0x38
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002060:	4928      	ldr	r1, [pc, #160]	; (8002104 <xTaskResumeAll+0x1cc>)
 8002062:	4613      	mov	r3, r2
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	4413      	add	r3, r2
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	440b      	add	r3, r1
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	1c59      	adds	r1, r3, #1
 8002070:	4824      	ldr	r0, [pc, #144]	; (8002104 <xTaskResumeAll+0x1cc>)
 8002072:	4613      	mov	r3, r2
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	4413      	add	r3, r2
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	4403      	add	r3, r0
 800207c:	6019      	str	r1, [r3, #0]
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002082:	4b21      	ldr	r3, [pc, #132]	; (8002108 <xTaskResumeAll+0x1d0>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002088:	429a      	cmp	r2, r3
 800208a:	d302      	bcc.n	8002092 <xTaskResumeAll+0x15a>
                        xYieldPending = pdTRUE;
 800208c:	4b1f      	ldr	r3, [pc, #124]	; (800210c <xTaskResumeAll+0x1d4>)
 800208e:	2201      	movs	r2, #1
 8002090:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002092:	4b1a      	ldr	r3, [pc, #104]	; (80020fc <xTaskResumeAll+0x1c4>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	2b00      	cmp	r3, #0
 8002098:	f47f af6e 	bne.w	8001f78 <xTaskResumeAll+0x40>
                if( pxTCB != NULL )
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <xTaskResumeAll+0x16e>
                    prvResetNextTaskUnblockTime();
 80020a2:	f001 fd75 	bl	8003b90 <prvResetNextTaskUnblockTime>
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80020a6:	4b1a      	ldr	r3, [pc, #104]	; (8002110 <xTaskResumeAll+0x1d8>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	60fb      	str	r3, [r7, #12]
                    if( xPendedCounts > ( TickType_t ) 0U )
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d010      	beq.n	80020d4 <xTaskResumeAll+0x19c>
                            if( xTaskIncrementTick() != pdFALSE )
 80020b2:	f000 fde7 	bl	8002c84 <xTaskIncrementTick>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d002      	beq.n	80020c2 <xTaskResumeAll+0x18a>
                                xYieldPending = pdTRUE;
 80020bc:	4b13      	ldr	r3, [pc, #76]	; (800210c <xTaskResumeAll+0x1d4>)
 80020be:	2201      	movs	r2, #1
 80020c0:	601a      	str	r2, [r3, #0]
                            --xPendedCounts;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	3b01      	subs	r3, #1
 80020c6:	60fb      	str	r3, [r7, #12]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d1f1      	bne.n	80020b2 <xTaskResumeAll+0x17a>
                        xPendedTicks = 0;
 80020ce:	4b10      	ldr	r3, [pc, #64]	; (8002110 <xTaskResumeAll+0x1d8>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	601a      	str	r2, [r3, #0]
                if( xYieldPending != pdFALSE )
 80020d4:	4b0d      	ldr	r3, [pc, #52]	; (800210c <xTaskResumeAll+0x1d4>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d003      	beq.n	80020e4 <xTaskResumeAll+0x1ac>
                        xAlreadyYielded = pdTRUE;
 80020dc:	2301      	movs	r3, #1
 80020de:	613b      	str	r3, [r7, #16]
                    taskYIELD_IF_USING_PREEMPTION();
 80020e0:	f002 fd84 	bl	8004bec <vPortYield>
    taskEXIT_CRITICAL();
 80020e4:	f002 fda6 	bl	8004c34 <vPortExitCritical>
    return xAlreadyYielded;
 80020e8:	693b      	ldr	r3, [r7, #16]
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3718      	adds	r7, #24
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	2000053c 	.word	0x2000053c
 80020f8:	20000514 	.word	0x20000514
 80020fc:	200004d4 	.word	0x200004d4
 8002100:	2000051c 	.word	0x2000051c
 8002104:	20000044 	.word	0x20000044
 8002108:	20000040 	.word	0x20000040
 800210c:	20000528 	.word	0x20000528
 8002110:	20000524 	.word	0x20000524

08002114 <xTaskGetTickCount>:
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
        xTicks = xTickCount;
 800211a:	4b05      	ldr	r3, [pc, #20]	; (8002130 <xTaskGetTickCount+0x1c>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	607b      	str	r3, [r7, #4]
    return xTicks;
 8002120:	687b      	ldr	r3, [r7, #4]
}
 8002122:	4618      	mov	r0, r3
 8002124:	370c      	adds	r7, #12
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	20000518 	.word	0x20000518

08002134 <xTaskGetTickCountFromISR>:
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800213a:	2300      	movs	r3, #0
 800213c:	607b      	str	r3, [r7, #4]
        xReturn = xTickCount;
 800213e:	4b05      	ldr	r3, [pc, #20]	; (8002154 <xTaskGetTickCountFromISR+0x20>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	603b      	str	r3, [r7, #0]
    return xReturn;
 8002144:	683b      	ldr	r3, [r7, #0]
}
 8002146:	4618      	mov	r0, r3
 8002148:	370c      	adds	r7, #12
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	20000518 	.word	0x20000518

08002158 <uxTaskGetNumberOfTasks>:
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
    return uxCurrentNumberOfTasks;
 800215c:	4b03      	ldr	r3, [pc, #12]	; (800216c <uxTaskGetNumberOfTasks+0x14>)
 800215e:	681b      	ldr	r3, [r3, #0]
}
 8002160:	4618      	mov	r0, r3
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	20000514 	.word	0x20000514

08002170 <pcTaskGetName>:
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b084      	sub	sp, #16
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
    pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d102      	bne.n	8002184 <pcTaskGetName+0x14>
 800217e:	4b08      	ldr	r3, [pc, #32]	; (80021a0 <pcTaskGetName+0x30>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	e000      	b.n	8002186 <pcTaskGetName+0x16>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	60fb      	str	r3, [r7, #12]
    configASSERT( pxTCB );
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d102      	bne.n	8002194 <pcTaskGetName+0x24>
 800218e:	f002 fe02 	bl	8004d96 <ulSetInterruptMask>
 8002192:	e7fe      	b.n	8002192 <pcTaskGetName+0x22>
    return &( pxTCB->pcTaskName[ 0 ] );
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	3358      	adds	r3, #88	; 0x58
}
 8002198:	4618      	mov	r0, r3
 800219a:	3710      	adds	r7, #16
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	20000040 	.word	0x20000040

080021a4 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

    UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
    {
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b086      	sub	sp, #24
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;
        uint8_t * pucEndOfStack;
        UBaseType_t uxReturn;

        pxTCB = prvGetTCBFromHandle( xTask );
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d102      	bne.n	80021b8 <uxTaskGetStackHighWaterMark+0x14>
 80021b2:	4b09      	ldr	r3, [pc, #36]	; (80021d8 <uxTaskGetStackHighWaterMark+0x34>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	e000      	b.n	80021ba <uxTaskGetStackHighWaterMark+0x16>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	617b      	str	r3, [r7, #20]

        #if portSTACK_GROWTH < 0
        {
            pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021c0:	613b      	str	r3, [r7, #16]
        {
            pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
        }
        #endif

        uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 80021c2:	6938      	ldr	r0, [r7, #16]
 80021c4:	f001 fcc8 	bl	8003b58 <prvTaskCheckFreeStackSpace>
 80021c8:	4603      	mov	r3, r0
 80021ca:	60fb      	str	r3, [r7, #12]

        return uxReturn;
 80021cc:	68fb      	ldr	r3, [r7, #12]
    }
 80021ce:	4618      	mov	r0, r3
 80021d0:	3718      	adds	r7, #24
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	20000040 	.word	0x20000040

080021dc <uxTaskGetSystemState>:
    {
 80021dc:	b580      	push	{r7, lr}
 80021de:	b086      	sub	sp, #24
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	60f8      	str	r0, [r7, #12]
 80021e4:	60b9      	str	r1, [r7, #8]
 80021e6:	607a      	str	r2, [r7, #4]
        UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 80021e8:	2300      	movs	r3, #0
 80021ea:	617b      	str	r3, [r7, #20]
 80021ec:	2338      	movs	r3, #56	; 0x38
 80021ee:	613b      	str	r3, [r7, #16]
        vTaskSuspendAll();
 80021f0:	f7ff fe94 	bl	8001f1c <vTaskSuspendAll>
            if( uxArraySize >= uxCurrentNumberOfTasks )
 80021f4:	4b3a      	ldr	r3, [pc, #232]	; (80022e0 <uxTaskGetSystemState+0x104>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	68ba      	ldr	r2, [r7, #8]
 80021fa:	429a      	cmp	r2, r3
 80021fc:	d368      	bcc.n	80022d0 <uxTaskGetSystemState+0xf4>
                    uxQueue--;
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	3b01      	subs	r3, #1
 8002202:	613b      	str	r3, [r7, #16]
                    uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 8002204:	697a      	ldr	r2, [r7, #20]
 8002206:	4613      	mov	r3, r2
 8002208:	00db      	lsls	r3, r3, #3
 800220a:	4413      	add	r3, r2
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	461a      	mov	r2, r3
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	1898      	adds	r0, r3, r2
 8002214:	693a      	ldr	r2, [r7, #16]
 8002216:	4613      	mov	r3, r2
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	4413      	add	r3, r2
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	4a31      	ldr	r2, [pc, #196]	; (80022e4 <uxTaskGetSystemState+0x108>)
 8002220:	4413      	add	r3, r2
 8002222:	2201      	movs	r2, #1
 8002224:	4619      	mov	r1, r3
 8002226:	f001 fc45 	bl	8003ab4 <prvListTasksWithinSingleList>
 800222a:	4602      	mov	r2, r0
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	4413      	add	r3, r2
 8002230:	617b      	str	r3, [r7, #20]
                } while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d1e2      	bne.n	80021fe <uxTaskGetSystemState+0x22>
                uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 8002238:	697a      	ldr	r2, [r7, #20]
 800223a:	4613      	mov	r3, r2
 800223c:	00db      	lsls	r3, r3, #3
 800223e:	4413      	add	r3, r2
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	461a      	mov	r2, r3
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	4413      	add	r3, r2
 8002248:	4a27      	ldr	r2, [pc, #156]	; (80022e8 <uxTaskGetSystemState+0x10c>)
 800224a:	6811      	ldr	r1, [r2, #0]
 800224c:	2202      	movs	r2, #2
 800224e:	4618      	mov	r0, r3
 8002250:	f001 fc30 	bl	8003ab4 <prvListTasksWithinSingleList>
 8002254:	4602      	mov	r2, r0
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	4413      	add	r3, r2
 800225a:	617b      	str	r3, [r7, #20]
                uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 800225c:	697a      	ldr	r2, [r7, #20]
 800225e:	4613      	mov	r3, r2
 8002260:	00db      	lsls	r3, r3, #3
 8002262:	4413      	add	r3, r2
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	461a      	mov	r2, r3
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	4413      	add	r3, r2
 800226c:	4a1f      	ldr	r2, [pc, #124]	; (80022ec <uxTaskGetSystemState+0x110>)
 800226e:	6811      	ldr	r1, [r2, #0]
 8002270:	2202      	movs	r2, #2
 8002272:	4618      	mov	r0, r3
 8002274:	f001 fc1e 	bl	8003ab4 <prvListTasksWithinSingleList>
 8002278:	4602      	mov	r2, r0
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	4413      	add	r3, r2
 800227e:	617b      	str	r3, [r7, #20]
                    uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 8002280:	697a      	ldr	r2, [r7, #20]
 8002282:	4613      	mov	r3, r2
 8002284:	00db      	lsls	r3, r3, #3
 8002286:	4413      	add	r3, r2
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	461a      	mov	r2, r3
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	4413      	add	r3, r2
 8002290:	2204      	movs	r2, #4
 8002292:	4917      	ldr	r1, [pc, #92]	; (80022f0 <uxTaskGetSystemState+0x114>)
 8002294:	4618      	mov	r0, r3
 8002296:	f001 fc0d 	bl	8003ab4 <prvListTasksWithinSingleList>
 800229a:	4602      	mov	r2, r0
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	4413      	add	r3, r2
 80022a0:	617b      	str	r3, [r7, #20]
                    uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 80022a2:	697a      	ldr	r2, [r7, #20]
 80022a4:	4613      	mov	r3, r2
 80022a6:	00db      	lsls	r3, r3, #3
 80022a8:	4413      	add	r3, r2
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	461a      	mov	r2, r3
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	4413      	add	r3, r2
 80022b2:	2203      	movs	r2, #3
 80022b4:	490f      	ldr	r1, [pc, #60]	; (80022f4 <uxTaskGetSystemState+0x118>)
 80022b6:	4618      	mov	r0, r3
 80022b8:	f001 fbfc 	bl	8003ab4 <prvListTasksWithinSingleList>
 80022bc:	4602      	mov	r2, r0
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	4413      	add	r3, r2
 80022c2:	617b      	str	r3, [r7, #20]
                    if( pulTotalRunTime != NULL )
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d002      	beq.n	80022d0 <uxTaskGetSystemState+0xf4>
                        *pulTotalRunTime = 0;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2200      	movs	r2, #0
 80022ce:	601a      	str	r2, [r3, #0]
        ( void ) xTaskResumeAll();
 80022d0:	f7ff fe32 	bl	8001f38 <xTaskResumeAll>
        return uxTask;
 80022d4:	697b      	ldr	r3, [r7, #20]
    }
 80022d6:	4618      	mov	r0, r3
 80022d8:	3718      	adds	r7, #24
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	20000514 	.word	0x20000514
 80022e4:	20000044 	.word	0x20000044
 80022e8:	200004cc 	.word	0x200004cc
 80022ec:	200004d0 	.word	0x200004d0
 80022f0:	200004e8 	.word	0x200004e8
 80022f4:	20000500 	.word	0x20000500

080022f8 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b08a      	sub	sp, #40	; 0x28
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	60f8      	str	r0, [r7, #12]
 8002300:	60b9      	str	r1, [r7, #8]
 8002302:	607a      	str	r2, [r7, #4]
 8002304:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8002306:	2301      	movs	r3, #1
 8002308:	627b      	str	r3, [r7, #36]	; 0x24
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d002      	beq.n	8002316 <xTaskGenericNotify+0x1e>
 8002310:	f002 fd41 	bl	8004d96 <ulSetInterruptMask>
 8002314:	e7fe      	b.n	8002314 <xTaskGenericNotify+0x1c>
        configASSERT( xTaskToNotify );
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d102      	bne.n	8002322 <xTaskGenericNotify+0x2a>
 800231c:	f002 fd3b 	bl	8004d96 <ulSetInterruptMask>
 8002320:	e7fe      	b.n	8002320 <xTaskGenericNotify+0x28>
        pxTCB = xTaskToNotify;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	623b      	str	r3, [r7, #32]

        taskENTER_CRITICAL();
 8002326:	f002 fc73 	bl	8004c10 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 800232a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800232c:	2b00      	cmp	r3, #0
 800232e:	d006      	beq.n	800233e <xTaskGenericNotify+0x46>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8002330:	6a3b      	ldr	r3, [r7, #32]
 8002332:	68ba      	ldr	r2, [r7, #8]
 8002334:	321e      	adds	r2, #30
 8002336:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800233a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800233c:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 800233e:	6a3a      	ldr	r2, [r7, #32]
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	4413      	add	r3, r2
 8002344:	337c      	adds	r3, #124	; 0x7c
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	77fb      	strb	r3, [r7, #31]

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 800234a:	6a3a      	ldr	r2, [r7, #32]
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	4413      	add	r3, r2
 8002350:	337c      	adds	r3, #124	; 0x7c
 8002352:	2202      	movs	r2, #2
 8002354:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8002356:	78fb      	ldrb	r3, [r7, #3]
 8002358:	2b04      	cmp	r3, #4
 800235a:	d83b      	bhi.n	80023d4 <xTaskGenericNotify+0xdc>
 800235c:	a201      	add	r2, pc, #4	; (adr r2, 8002364 <xTaskGenericNotify+0x6c>)
 800235e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002362:	bf00      	nop
 8002364:	080023e3 	.word	0x080023e3
 8002368:	08002379 	.word	0x08002379
 800236c:	08002395 	.word	0x08002395
 8002370:	080023ad 	.word	0x080023ad
 8002374:	080023bb 	.word	0x080023bb
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8002378:	6a3b      	ldr	r3, [r7, #32]
 800237a:	68ba      	ldr	r2, [r7, #8]
 800237c:	321e      	adds	r2, #30
 800237e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	ea42 0103 	orr.w	r1, r2, r3
 8002388:	6a3b      	ldr	r3, [r7, #32]
 800238a:	68ba      	ldr	r2, [r7, #8]
 800238c:	321e      	adds	r2, #30
 800238e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8002392:	e029      	b.n	80023e8 <xTaskGenericNotify+0xf0>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8002394:	6a3b      	ldr	r3, [r7, #32]
 8002396:	68ba      	ldr	r2, [r7, #8]
 8002398:	321e      	adds	r2, #30
 800239a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800239e:	1c59      	adds	r1, r3, #1
 80023a0:	6a3b      	ldr	r3, [r7, #32]
 80023a2:	68ba      	ldr	r2, [r7, #8]
 80023a4:	321e      	adds	r2, #30
 80023a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80023aa:	e01d      	b.n	80023e8 <xTaskGenericNotify+0xf0>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80023ac:	6a3b      	ldr	r3, [r7, #32]
 80023ae:	68ba      	ldr	r2, [r7, #8]
 80023b0:	321e      	adds	r2, #30
 80023b2:	6879      	ldr	r1, [r7, #4]
 80023b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80023b8:	e016      	b.n	80023e8 <xTaskGenericNotify+0xf0>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80023ba:	7ffb      	ldrb	r3, [r7, #31]
 80023bc:	2b02      	cmp	r3, #2
 80023be:	d006      	beq.n	80023ce <xTaskGenericNotify+0xd6>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80023c0:	6a3b      	ldr	r3, [r7, #32]
 80023c2:	68ba      	ldr	r2, [r7, #8]
 80023c4:	321e      	adds	r2, #30
 80023c6:	6879      	ldr	r1, [r7, #4]
 80023c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 80023cc:	e00c      	b.n	80023e8 <xTaskGenericNotify+0xf0>
                        xReturn = pdFAIL;
 80023ce:	2300      	movs	r3, #0
 80023d0:	627b      	str	r3, [r7, #36]	; 0x24
                    break;
 80023d2:	e009      	b.n	80023e8 <xTaskGenericNotify+0xf0>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 80023d4:	4b41      	ldr	r3, [pc, #260]	; (80024dc <xTaskGenericNotify+0x1e4>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d004      	beq.n	80023e6 <xTaskGenericNotify+0xee>
 80023dc:	f002 fcdb 	bl	8004d96 <ulSetInterruptMask>
 80023e0:	e7fe      	b.n	80023e0 <xTaskGenericNotify+0xe8>
                    break;
 80023e2:	bf00      	nop
 80023e4:	e000      	b.n	80023e8 <xTaskGenericNotify+0xf0>

                    break;
 80023e6:	bf00      	nop

            traceTASK_NOTIFY( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80023e8:	7ffb      	ldrb	r3, [r7, #31]
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d16f      	bne.n	80024ce <xTaskGenericNotify+0x1d6>
            {
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80023ee:	6a3b      	ldr	r3, [r7, #32]
 80023f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023f2:	61bb      	str	r3, [r7, #24]
 80023f4:	6a3b      	ldr	r3, [r7, #32]
 80023f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f8:	6a3a      	ldr	r2, [r7, #32]
 80023fa:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80023fc:	609a      	str	r2, [r3, #8]
 80023fe:	6a3b      	ldr	r3, [r7, #32]
 8002400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002402:	6a3a      	ldr	r2, [r7, #32]
 8002404:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002406:	605a      	str	r2, [r3, #4]
 8002408:	69bb      	ldr	r3, [r7, #24]
 800240a:	685a      	ldr	r2, [r3, #4]
 800240c:	6a3b      	ldr	r3, [r7, #32]
 800240e:	3328      	adds	r3, #40	; 0x28
 8002410:	429a      	cmp	r2, r3
 8002412:	d103      	bne.n	800241c <xTaskGenericNotify+0x124>
 8002414:	6a3b      	ldr	r3, [r7, #32]
 8002416:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002418:	69bb      	ldr	r3, [r7, #24]
 800241a:	605a      	str	r2, [r3, #4]
 800241c:	6a3b      	ldr	r3, [r7, #32]
 800241e:	2200      	movs	r2, #0
 8002420:	639a      	str	r2, [r3, #56]	; 0x38
 8002422:	69bb      	ldr	r3, [r7, #24]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	1e5a      	subs	r2, r3, #1
 8002428:	69bb      	ldr	r3, [r7, #24]
 800242a:	601a      	str	r2, [r3, #0]
                prvAddTaskToReadyList( pxTCB );
 800242c:	6a3b      	ldr	r3, [r7, #32]
 800242e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002430:	4b2b      	ldr	r3, [pc, #172]	; (80024e0 <xTaskGenericNotify+0x1e8>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	429a      	cmp	r2, r3
 8002436:	d903      	bls.n	8002440 <xTaskGenericNotify+0x148>
 8002438:	6a3b      	ldr	r3, [r7, #32]
 800243a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800243c:	4a28      	ldr	r2, [pc, #160]	; (80024e0 <xTaskGenericNotify+0x1e8>)
 800243e:	6013      	str	r3, [r2, #0]
 8002440:	6a3b      	ldr	r3, [r7, #32]
 8002442:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002444:	4927      	ldr	r1, [pc, #156]	; (80024e4 <xTaskGenericNotify+0x1ec>)
 8002446:	4613      	mov	r3, r2
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	4413      	add	r3, r2
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	440b      	add	r3, r1
 8002450:	3304      	adds	r3, #4
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	617b      	str	r3, [r7, #20]
 8002456:	6a3b      	ldr	r3, [r7, #32]
 8002458:	697a      	ldr	r2, [r7, #20]
 800245a:	62da      	str	r2, [r3, #44]	; 0x2c
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	689a      	ldr	r2, [r3, #8]
 8002460:	6a3b      	ldr	r3, [r7, #32]
 8002462:	631a      	str	r2, [r3, #48]	; 0x30
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	6a3a      	ldr	r2, [r7, #32]
 800246a:	3228      	adds	r2, #40	; 0x28
 800246c:	605a      	str	r2, [r3, #4]
 800246e:	6a3b      	ldr	r3, [r7, #32]
 8002470:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	609a      	str	r2, [r3, #8]
 8002478:	6a3b      	ldr	r3, [r7, #32]
 800247a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800247c:	4613      	mov	r3, r2
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	4413      	add	r3, r2
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	4a17      	ldr	r2, [pc, #92]	; (80024e4 <xTaskGenericNotify+0x1ec>)
 8002486:	441a      	add	r2, r3
 8002488:	6a3b      	ldr	r3, [r7, #32]
 800248a:	639a      	str	r2, [r3, #56]	; 0x38
 800248c:	6a3b      	ldr	r3, [r7, #32]
 800248e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002490:	4914      	ldr	r1, [pc, #80]	; (80024e4 <xTaskGenericNotify+0x1ec>)
 8002492:	4613      	mov	r3, r2
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	4413      	add	r3, r2
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	440b      	add	r3, r1
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	1c59      	adds	r1, r3, #1
 80024a0:	4810      	ldr	r0, [pc, #64]	; (80024e4 <xTaskGenericNotify+0x1ec>)
 80024a2:	4613      	mov	r3, r2
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	4413      	add	r3, r2
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	4403      	add	r3, r0
 80024ac:	6019      	str	r1, [r3, #0]

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80024ae:	6a3b      	ldr	r3, [r7, #32]
 80024b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d002      	beq.n	80024bc <xTaskGenericNotify+0x1c4>
 80024b6:	f002 fc6e 	bl	8004d96 <ulSetInterruptMask>
 80024ba:	e7fe      	b.n	80024ba <xTaskGenericNotify+0x1c2>
                     * earliest possible time. */
                    prvResetNextTaskUnblockTime();
                }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80024bc:	6a3b      	ldr	r3, [r7, #32]
 80024be:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80024c0:	4b09      	ldr	r3, [pc, #36]	; (80024e8 <xTaskGenericNotify+0x1f0>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024c6:	429a      	cmp	r2, r3
 80024c8:	d901      	bls.n	80024ce <xTaskGenericNotify+0x1d6>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 80024ca:	f002 fb8f 	bl	8004bec <vPortYield>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80024ce:	f002 fbb1 	bl	8004c34 <vPortExitCritical>

        return xReturn;
 80024d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80024d4:	4618      	mov	r0, r3
 80024d6:	3728      	adds	r7, #40	; 0x28
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	20000518 	.word	0x20000518
 80024e0:	2000051c 	.word	0x2000051c
 80024e4:	20000044 	.word	0x20000044
 80024e8:	20000040 	.word	0x20000040

080024ec <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b08c      	sub	sp, #48	; 0x30
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	60f8      	str	r0, [r7, #12]
 80024f4:	60b9      	str	r1, [r7, #8]
 80024f6:	607a      	str	r2, [r7, #4]
 80024f8:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 80024fa:	2301      	movs	r3, #1
 80024fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d102      	bne.n	800250a <xTaskGenericNotifyFromISR+0x1e>
 8002504:	f002 fc47 	bl	8004d96 <ulSetInterruptMask>
 8002508:	e7fe      	b.n	8002508 <xTaskGenericNotifyFromISR+0x1c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d002      	beq.n	8002516 <xTaskGenericNotifyFromISR+0x2a>
 8002510:	f002 fc41 	bl	8004d96 <ulSetInterruptMask>
 8002514:	e7fe      	b.n	8002514 <xTaskGenericNotifyFromISR+0x28>
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

        pxTCB = xTaskToNotify;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	62bb      	str	r3, [r7, #40]	; 0x28

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800251a:	f002 fc3c 	bl	8004d96 <ulSetInterruptMask>
 800251e:	6278      	str	r0, [r7, #36]	; 0x24
        {
            if( pulPreviousNotificationValue != NULL )
 8002520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002522:	2b00      	cmp	r3, #0
 8002524:	d006      	beq.n	8002534 <xTaskGenericNotifyFromISR+0x48>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8002526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002528:	68ba      	ldr	r2, [r7, #8]
 800252a:	321e      	adds	r2, #30
 800252c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002532:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8002534:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	4413      	add	r3, r2
 800253a:	337c      	adds	r3, #124	; 0x7c
 800253c:	781b      	ldrb	r3, [r3, #0]
 800253e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8002542:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	4413      	add	r3, r2
 8002548:	337c      	adds	r3, #124	; 0x7c
 800254a:	2202      	movs	r2, #2
 800254c:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 800254e:	78fb      	ldrb	r3, [r7, #3]
 8002550:	2b04      	cmp	r3, #4
 8002552:	d83c      	bhi.n	80025ce <xTaskGenericNotifyFromISR+0xe2>
 8002554:	a201      	add	r2, pc, #4	; (adr r2, 800255c <xTaskGenericNotifyFromISR+0x70>)
 8002556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800255a:	bf00      	nop
 800255c:	080025dd 	.word	0x080025dd
 8002560:	08002571 	.word	0x08002571
 8002564:	0800258d 	.word	0x0800258d
 8002568:	080025a5 	.word	0x080025a5
 800256c:	080025b3 	.word	0x080025b3
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8002570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002572:	68ba      	ldr	r2, [r7, #8]
 8002574:	321e      	adds	r2, #30
 8002576:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	ea42 0103 	orr.w	r1, r2, r3
 8002580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002582:	68ba      	ldr	r2, [r7, #8]
 8002584:	321e      	adds	r2, #30
 8002586:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800258a:	e02a      	b.n	80025e2 <xTaskGenericNotifyFromISR+0xf6>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 800258c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800258e:	68ba      	ldr	r2, [r7, #8]
 8002590:	321e      	adds	r2, #30
 8002592:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002596:	1c59      	adds	r1, r3, #1
 8002598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800259a:	68ba      	ldr	r2, [r7, #8]
 800259c:	321e      	adds	r2, #30
 800259e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80025a2:	e01e      	b.n	80025e2 <xTaskGenericNotifyFromISR+0xf6>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80025a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025a6:	68ba      	ldr	r2, [r7, #8]
 80025a8:	321e      	adds	r2, #30
 80025aa:	6879      	ldr	r1, [r7, #4]
 80025ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80025b0:	e017      	b.n	80025e2 <xTaskGenericNotifyFromISR+0xf6>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80025b2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80025b6:	2b02      	cmp	r3, #2
 80025b8:	d006      	beq.n	80025c8 <xTaskGenericNotifyFromISR+0xdc>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80025ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025bc:	68ba      	ldr	r2, [r7, #8]
 80025be:	321e      	adds	r2, #30
 80025c0:	6879      	ldr	r1, [r7, #4]
 80025c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 80025c6:	e00c      	b.n	80025e2 <xTaskGenericNotifyFromISR+0xf6>
                        xReturn = pdFAIL;
 80025c8:	2300      	movs	r3, #0
 80025ca:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
 80025cc:	e009      	b.n	80025e2 <xTaskGenericNotifyFromISR+0xf6>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 80025ce:	4b57      	ldr	r3, [pc, #348]	; (800272c <xTaskGenericNotifyFromISR+0x240>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d004      	beq.n	80025e0 <xTaskGenericNotifyFromISR+0xf4>
 80025d6:	f002 fbde 	bl	8004d96 <ulSetInterruptMask>
 80025da:	e7fe      	b.n	80025da <xTaskGenericNotifyFromISR+0xee>
                    break;
 80025dc:	bf00      	nop
 80025de:	e000      	b.n	80025e2 <xTaskGenericNotifyFromISR+0xf6>
                    break;
 80025e0:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80025e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	f040 8098 	bne.w	800271c <xTaskGenericNotifyFromISR+0x230>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80025ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d002      	beq.n	80025fa <xTaskGenericNotifyFromISR+0x10e>
 80025f4:	f002 fbcf 	bl	8004d96 <ulSetInterruptMask>
 80025f8:	e7fe      	b.n	80025f8 <xTaskGenericNotifyFromISR+0x10c>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80025fa:	4b4d      	ldr	r3, [pc, #308]	; (8002730 <xTaskGenericNotifyFromISR+0x244>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d160      	bne.n	80026c4 <xTaskGenericNotifyFromISR+0x1d8>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002606:	61bb      	str	r3, [r7, #24]
 8002608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800260a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800260c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800260e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002610:	609a      	str	r2, [r3, #8]
 8002612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002616:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002618:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800261a:	605a      	str	r2, [r3, #4]
 800261c:	69bb      	ldr	r3, [r7, #24]
 800261e:	685a      	ldr	r2, [r3, #4]
 8002620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002622:	3328      	adds	r3, #40	; 0x28
 8002624:	429a      	cmp	r2, r3
 8002626:	d103      	bne.n	8002630 <xTaskGenericNotifyFromISR+0x144>
 8002628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800262a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800262c:	69bb      	ldr	r3, [r7, #24]
 800262e:	605a      	str	r2, [r3, #4]
 8002630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002632:	2200      	movs	r2, #0
 8002634:	639a      	str	r2, [r3, #56]	; 0x38
 8002636:	69bb      	ldr	r3, [r7, #24]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	1e5a      	subs	r2, r3, #1
 800263c:	69bb      	ldr	r3, [r7, #24]
 800263e:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8002640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002642:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002644:	4b3b      	ldr	r3, [pc, #236]	; (8002734 <xTaskGenericNotifyFromISR+0x248>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	429a      	cmp	r2, r3
 800264a:	d903      	bls.n	8002654 <xTaskGenericNotifyFromISR+0x168>
 800264c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800264e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002650:	4a38      	ldr	r2, [pc, #224]	; (8002734 <xTaskGenericNotifyFromISR+0x248>)
 8002652:	6013      	str	r3, [r2, #0]
 8002654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002656:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002658:	4937      	ldr	r1, [pc, #220]	; (8002738 <xTaskGenericNotifyFromISR+0x24c>)
 800265a:	4613      	mov	r3, r2
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	4413      	add	r3, r2
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	440b      	add	r3, r1
 8002664:	3304      	adds	r3, #4
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	617b      	str	r3, [r7, #20]
 800266a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800266c:	697a      	ldr	r2, [r7, #20]
 800266e:	62da      	str	r2, [r3, #44]	; 0x2c
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	689a      	ldr	r2, [r3, #8]
 8002674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002676:	631a      	str	r2, [r3, #48]	; 0x30
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800267e:	3228      	adds	r2, #40	; 0x28
 8002680:	605a      	str	r2, [r3, #4]
 8002682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002684:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	609a      	str	r2, [r3, #8]
 800268c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800268e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002690:	4613      	mov	r3, r2
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	4413      	add	r3, r2
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	4a27      	ldr	r2, [pc, #156]	; (8002738 <xTaskGenericNotifyFromISR+0x24c>)
 800269a:	441a      	add	r2, r3
 800269c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800269e:	639a      	str	r2, [r3, #56]	; 0x38
 80026a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80026a4:	4924      	ldr	r1, [pc, #144]	; (8002738 <xTaskGenericNotifyFromISR+0x24c>)
 80026a6:	4613      	mov	r3, r2
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	4413      	add	r3, r2
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	440b      	add	r3, r1
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	1c59      	adds	r1, r3, #1
 80026b4:	4820      	ldr	r0, [pc, #128]	; (8002738 <xTaskGenericNotifyFromISR+0x24c>)
 80026b6:	4613      	mov	r3, r2
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	4413      	add	r3, r2
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	4403      	add	r3, r0
 80026c0:	6019      	str	r1, [r3, #0]
 80026c2:	e01b      	b.n	80026fc <xTaskGenericNotifyFromISR+0x210>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80026c4:	4b1d      	ldr	r3, [pc, #116]	; (800273c <xTaskGenericNotifyFromISR+0x250>)
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	61fb      	str	r3, [r7, #28]
 80026ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026cc:	69fa      	ldr	r2, [r7, #28]
 80026ce:	641a      	str	r2, [r3, #64]	; 0x40
 80026d0:	69fb      	ldr	r3, [r7, #28]
 80026d2:	689a      	ldr	r2, [r3, #8]
 80026d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026d6:	645a      	str	r2, [r3, #68]	; 0x44
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80026de:	323c      	adds	r2, #60	; 0x3c
 80026e0:	605a      	str	r2, [r3, #4]
 80026e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026e4:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	609a      	str	r2, [r3, #8]
 80026ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ee:	4a13      	ldr	r2, [pc, #76]	; (800273c <xTaskGenericNotifyFromISR+0x250>)
 80026f0:	64da      	str	r2, [r3, #76]	; 0x4c
 80026f2:	4b12      	ldr	r3, [pc, #72]	; (800273c <xTaskGenericNotifyFromISR+0x250>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	3301      	adds	r3, #1
 80026f8:	4a10      	ldr	r2, [pc, #64]	; (800273c <xTaskGenericNotifyFromISR+0x250>)
 80026fa:	6013      	str	r3, [r2, #0]
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80026fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002700:	4b0f      	ldr	r3, [pc, #60]	; (8002740 <xTaskGenericNotifyFromISR+0x254>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002706:	429a      	cmp	r2, r3
 8002708:	d908      	bls.n	800271c <xTaskGenericNotifyFromISR+0x230>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 800270a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800270c:	2b00      	cmp	r3, #0
 800270e:	d002      	beq.n	8002716 <xTaskGenericNotifyFromISR+0x22a>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 8002710:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002712:	2201      	movs	r2, #1
 8002714:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 8002716:	4b0b      	ldr	r3, [pc, #44]	; (8002744 <xTaskGenericNotifyFromISR+0x258>)
 8002718:	2201      	movs	r2, #1
 800271a:	601a      	str	r2, [r3, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800271c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800271e:	f002 fb47 	bl	8004db0 <vClearInterruptMask>

        return xReturn;
 8002722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 8002724:	4618      	mov	r0, r3
 8002726:	3730      	adds	r7, #48	; 0x30
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	20000518 	.word	0x20000518
 8002730:	2000053c 	.word	0x2000053c
 8002734:	2000051c 	.word	0x2000051c
 8002738:	20000044 	.word	0x20000044
 800273c:	200004d4 	.word	0x200004d4
 8002740:	20000040 	.word	0x20000040
 8002744:	20000528 	.word	0x20000528

08002748 <xTaskGenericNotifyWait>:
    {
 8002748:	b580      	push	{r7, lr}
 800274a:	b086      	sub	sp, #24
 800274c:	af00      	add	r7, sp, #0
 800274e:	60f8      	str	r0, [r7, #12]
 8002750:	60b9      	str	r1, [r7, #8]
 8002752:	607a      	str	r2, [r7, #4]
 8002754:	603b      	str	r3, [r7, #0]
        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d002      	beq.n	8002762 <xTaskGenericNotifyWait+0x1a>
 800275c:	f002 fb1b 	bl	8004d96 <ulSetInterruptMask>
 8002760:	e7fe      	b.n	8002760 <xTaskGenericNotifyWait+0x18>
        taskENTER_CRITICAL();
 8002762:	f002 fa55 	bl	8004c10 <vPortEnterCritical>
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8002766:	4b2f      	ldr	r3, [pc, #188]	; (8002824 <xTaskGenericNotifyWait+0xdc>)
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	4413      	add	r3, r2
 800276e:	337c      	adds	r3, #124	; 0x7c
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	b2db      	uxtb	r3, r3
 8002774:	2b02      	cmp	r3, #2
 8002776:	d01c      	beq.n	80027b2 <xTaskGenericNotifyWait+0x6a>
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8002778:	4b2a      	ldr	r3, [pc, #168]	; (8002824 <xTaskGenericNotifyWait+0xdc>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	68fa      	ldr	r2, [r7, #12]
 800277e:	321e      	adds	r2, #30
 8002780:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002784:	68ba      	ldr	r2, [r7, #8]
 8002786:	43d2      	mvns	r2, r2
 8002788:	4011      	ands	r1, r2
 800278a:	68fa      	ldr	r2, [r7, #12]
 800278c:	321e      	adds	r2, #30
 800278e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8002792:	4b24      	ldr	r3, [pc, #144]	; (8002824 <xTaskGenericNotifyWait+0xdc>)
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	4413      	add	r3, r2
 800279a:	337c      	adds	r3, #124	; 0x7c
 800279c:	2201      	movs	r2, #1
 800279e:	701a      	strb	r2, [r3, #0]
                if( xTicksToWait > ( TickType_t ) 0 )
 80027a0:	6a3b      	ldr	r3, [r7, #32]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d005      	beq.n	80027b2 <xTaskGenericNotifyWait+0x6a>
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80027a6:	2101      	movs	r1, #1
 80027a8:	6a38      	ldr	r0, [r7, #32]
 80027aa:	f001 f913 	bl	80039d4 <prvAddCurrentTaskToDelayedList>
                    portYIELD_WITHIN_API();
 80027ae:	f002 fa1d 	bl	8004bec <vPortYield>
        taskEXIT_CRITICAL();
 80027b2:	f002 fa3f 	bl	8004c34 <vPortExitCritical>
        taskENTER_CRITICAL();
 80027b6:	f002 fa2b 	bl	8004c10 <vPortEnterCritical>
            if( pulNotificationValue != NULL )
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d007      	beq.n	80027d0 <xTaskGenericNotifyWait+0x88>
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 80027c0:	4b18      	ldr	r3, [pc, #96]	; (8002824 <xTaskGenericNotifyWait+0xdc>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	68fa      	ldr	r2, [r7, #12]
 80027c6:	321e      	adds	r2, #30
 80027c8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	601a      	str	r2, [r3, #0]
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 80027d0:	4b14      	ldr	r3, [pc, #80]	; (8002824 <xTaskGenericNotifyWait+0xdc>)
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	4413      	add	r3, r2
 80027d8:	337c      	adds	r3, #124	; 0x7c
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d002      	beq.n	80027e8 <xTaskGenericNotifyWait+0xa0>
                xReturn = pdFALSE;
 80027e2:	2300      	movs	r3, #0
 80027e4:	617b      	str	r3, [r7, #20]
 80027e6:	e00e      	b.n	8002806 <xTaskGenericNotifyWait+0xbe>
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 80027e8:	4b0e      	ldr	r3, [pc, #56]	; (8002824 <xTaskGenericNotifyWait+0xdc>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	68fa      	ldr	r2, [r7, #12]
 80027ee:	321e      	adds	r2, #30
 80027f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80027f4:	687a      	ldr	r2, [r7, #4]
 80027f6:	43d2      	mvns	r2, r2
 80027f8:	4011      	ands	r1, r2
 80027fa:	68fa      	ldr	r2, [r7, #12]
 80027fc:	321e      	adds	r2, #30
 80027fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8002802:	2301      	movs	r3, #1
 8002804:	617b      	str	r3, [r7, #20]
            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8002806:	4b07      	ldr	r3, [pc, #28]	; (8002824 <xTaskGenericNotifyWait+0xdc>)
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	4413      	add	r3, r2
 800280e:	337c      	adds	r3, #124	; 0x7c
 8002810:	2200      	movs	r2, #0
 8002812:	701a      	strb	r2, [r3, #0]
        taskEXIT_CRITICAL();
 8002814:	f002 fa0e 	bl	8004c34 <vPortExitCritical>
        return xReturn;
 8002818:	697b      	ldr	r3, [r7, #20]
    }
 800281a:	4618      	mov	r0, r3
 800281c:	3718      	adds	r7, #24
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	20000040 	.word	0x20000040

08002828 <vTaskGenericNotifyGiveFromISR>:
#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    void vTaskGenericNotifyGiveFromISR( TaskHandle_t xTaskToNotify,
                                        UBaseType_t uxIndexToNotify,
                                        BaseType_t * pxHigherPriorityTaskWoken )
    {
 8002828:	b580      	push	{r7, lr}
 800282a:	b08a      	sub	sp, #40	; 0x28
 800282c:	af00      	add	r7, sp, #0
 800282e:	60f8      	str	r0, [r7, #12]
 8002830:	60b9      	str	r1, [r7, #8]
 8002832:	607a      	str	r2, [r7, #4]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d102      	bne.n	8002840 <vTaskGenericNotifyGiveFromISR+0x18>
 800283a:	f002 faac 	bl	8004d96 <ulSetInterruptMask>
 800283e:	e7fe      	b.n	800283e <vTaskGenericNotifyGiveFromISR+0x16>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d002      	beq.n	800284c <vTaskGenericNotifyGiveFromISR+0x24>
 8002846:	f002 faa6 	bl	8004d96 <ulSetInterruptMask>
 800284a:	e7fe      	b.n	800284a <vTaskGenericNotifyGiveFromISR+0x22>
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

        pxTCB = xTaskToNotify;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	627b      	str	r3, [r7, #36]	; 0x24

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002850:	f002 faa1 	bl	8004d96 <ulSetInterruptMask>
 8002854:	6238      	str	r0, [r7, #32]
        {
            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8002856:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	4413      	add	r3, r2
 800285c:	337c      	adds	r3, #124	; 0x7c
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	77fb      	strb	r3, [r7, #31]
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8002862:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	4413      	add	r3, r2
 8002868:	337c      	adds	r3, #124	; 0x7c
 800286a:	2202      	movs	r2, #2
 800286c:	701a      	strb	r2, [r3, #0]

            /* 'Giving' is equivalent to incrementing a count in a counting
             * semaphore. */
            ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 800286e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002870:	68ba      	ldr	r2, [r7, #8]
 8002872:	321e      	adds	r2, #30
 8002874:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002878:	1c59      	adds	r1, r3, #1
 800287a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287c:	68ba      	ldr	r2, [r7, #8]
 800287e:	321e      	adds	r2, #30
 8002880:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

            traceTASK_NOTIFY_GIVE_FROM_ISR( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8002884:	7ffb      	ldrb	r3, [r7, #31]
 8002886:	2b01      	cmp	r3, #1
 8002888:	f040 8098 	bne.w	80029bc <vTaskGenericNotifyGiveFromISR+0x194>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800288c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002890:	2b00      	cmp	r3, #0
 8002892:	d002      	beq.n	800289a <vTaskGenericNotifyGiveFromISR+0x72>
 8002894:	f002 fa7f 	bl	8004d96 <ulSetInterruptMask>
 8002898:	e7fe      	b.n	8002898 <vTaskGenericNotifyGiveFromISR+0x70>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800289a:	4b4c      	ldr	r3, [pc, #304]	; (80029cc <vTaskGenericNotifyGiveFromISR+0x1a4>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d160      	bne.n	8002964 <vTaskGenericNotifyGiveFromISR+0x13c>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80028a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028a6:	617b      	str	r3, [r7, #20]
 80028a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028ae:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80028b0:	609a      	str	r2, [r3, #8]
 80028b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028b8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80028ba:	605a      	str	r2, [r3, #4]
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	685a      	ldr	r2, [r3, #4]
 80028c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c2:	3328      	adds	r3, #40	; 0x28
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d103      	bne.n	80028d0 <vTaskGenericNotifyGiveFromISR+0xa8>
 80028c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	605a      	str	r2, [r3, #4]
 80028d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d2:	2200      	movs	r2, #0
 80028d4:	639a      	str	r2, [r3, #56]	; 0x38
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	1e5a      	subs	r2, r3, #1
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80028e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80028e4:	4b3a      	ldr	r3, [pc, #232]	; (80029d0 <vTaskGenericNotifyGiveFromISR+0x1a8>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d903      	bls.n	80028f4 <vTaskGenericNotifyGiveFromISR+0xcc>
 80028ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028f0:	4a37      	ldr	r2, [pc, #220]	; (80029d0 <vTaskGenericNotifyGiveFromISR+0x1a8>)
 80028f2:	6013      	str	r3, [r2, #0]
 80028f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80028f8:	4936      	ldr	r1, [pc, #216]	; (80029d4 <vTaskGenericNotifyGiveFromISR+0x1ac>)
 80028fa:	4613      	mov	r3, r2
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	4413      	add	r3, r2
 8002900:	009b      	lsls	r3, r3, #2
 8002902:	440b      	add	r3, r1
 8002904:	3304      	adds	r3, #4
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	613b      	str	r3, [r7, #16]
 800290a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290c:	693a      	ldr	r2, [r7, #16]
 800290e:	62da      	str	r2, [r3, #44]	; 0x2c
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	689a      	ldr	r2, [r3, #8]
 8002914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002916:	631a      	str	r2, [r3, #48]	; 0x30
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800291e:	3228      	adds	r2, #40	; 0x28
 8002920:	605a      	str	r2, [r3, #4]
 8002922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002924:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	609a      	str	r2, [r3, #8]
 800292c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800292e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002930:	4613      	mov	r3, r2
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	4413      	add	r3, r2
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	4a26      	ldr	r2, [pc, #152]	; (80029d4 <vTaskGenericNotifyGiveFromISR+0x1ac>)
 800293a:	441a      	add	r2, r3
 800293c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293e:	639a      	str	r2, [r3, #56]	; 0x38
 8002940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002942:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002944:	4923      	ldr	r1, [pc, #140]	; (80029d4 <vTaskGenericNotifyGiveFromISR+0x1ac>)
 8002946:	4613      	mov	r3, r2
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	4413      	add	r3, r2
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	440b      	add	r3, r1
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	1c59      	adds	r1, r3, #1
 8002954:	481f      	ldr	r0, [pc, #124]	; (80029d4 <vTaskGenericNotifyGiveFromISR+0x1ac>)
 8002956:	4613      	mov	r3, r2
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	4413      	add	r3, r2
 800295c:	009b      	lsls	r3, r3, #2
 800295e:	4403      	add	r3, r0
 8002960:	6019      	str	r1, [r3, #0]
 8002962:	e01b      	b.n	800299c <vTaskGenericNotifyGiveFromISR+0x174>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8002964:	4b1c      	ldr	r3, [pc, #112]	; (80029d8 <vTaskGenericNotifyGiveFromISR+0x1b0>)
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	61bb      	str	r3, [r7, #24]
 800296a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296c:	69ba      	ldr	r2, [r7, #24]
 800296e:	641a      	str	r2, [r3, #64]	; 0x40
 8002970:	69bb      	ldr	r3, [r7, #24]
 8002972:	689a      	ldr	r2, [r3, #8]
 8002974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002976:	645a      	str	r2, [r3, #68]	; 0x44
 8002978:	69bb      	ldr	r3, [r7, #24]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800297e:	323c      	adds	r2, #60	; 0x3c
 8002980:	605a      	str	r2, [r3, #4]
 8002982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002984:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8002988:	69bb      	ldr	r3, [r7, #24]
 800298a:	609a      	str	r2, [r3, #8]
 800298c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298e:	4a12      	ldr	r2, [pc, #72]	; (80029d8 <vTaskGenericNotifyGiveFromISR+0x1b0>)
 8002990:	64da      	str	r2, [r3, #76]	; 0x4c
 8002992:	4b11      	ldr	r3, [pc, #68]	; (80029d8 <vTaskGenericNotifyGiveFromISR+0x1b0>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	3301      	adds	r3, #1
 8002998:	4a0f      	ldr	r2, [pc, #60]	; (80029d8 <vTaskGenericNotifyGiveFromISR+0x1b0>)
 800299a:	6013      	str	r3, [r2, #0]
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800299c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80029a0:	4b0e      	ldr	r3, [pc, #56]	; (80029dc <vTaskGenericNotifyGiveFromISR+0x1b4>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d908      	bls.n	80029bc <vTaskGenericNotifyGiveFromISR+0x194>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d002      	beq.n	80029b6 <vTaskGenericNotifyGiveFromISR+0x18e>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2201      	movs	r2, #1
 80029b4:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter in an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 80029b6:	4b0a      	ldr	r3, [pc, #40]	; (80029e0 <vTaskGenericNotifyGiveFromISR+0x1b8>)
 80029b8:	2201      	movs	r2, #1
 80029ba:	601a      	str	r2, [r3, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 80029bc:	6a38      	ldr	r0, [r7, #32]
 80029be:	f002 f9f7 	bl	8004db0 <vClearInterruptMask>
    }
 80029c2:	bf00      	nop
 80029c4:	3728      	adds	r7, #40	; 0x28
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	2000053c 	.word	0x2000053c
 80029d0:	2000051c 	.word	0x2000051c
 80029d4:	20000044 	.word	0x20000044
 80029d8:	200004d4 	.word	0x200004d4
 80029dc:	20000040 	.word	0x20000040
 80029e0:	20000528 	.word	0x20000528

080029e4 <ulTaskGenericNotifyTake>:
    {
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b086      	sub	sp, #24
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	60f8      	str	r0, [r7, #12]
 80029ec:	60b9      	str	r1, [r7, #8]
 80029ee:	607a      	str	r2, [r7, #4]
        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d002      	beq.n	80029fc <ulTaskGenericNotifyTake+0x18>
 80029f6:	f002 f9ce 	bl	8004d96 <ulSetInterruptMask>
 80029fa:	e7fe      	b.n	80029fa <ulTaskGenericNotifyTake+0x16>
        taskENTER_CRITICAL();
 80029fc:	f002 f908 	bl	8004c10 <vPortEnterCritical>
            if( pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] == 0UL )
 8002a00:	4b23      	ldr	r3, [pc, #140]	; (8002a90 <ulTaskGenericNotifyTake+0xac>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	68fa      	ldr	r2, [r7, #12]
 8002a06:	321e      	adds	r2, #30
 8002a08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d10f      	bne.n	8002a30 <ulTaskGenericNotifyTake+0x4c>
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8002a10:	4b1f      	ldr	r3, [pc, #124]	; (8002a90 <ulTaskGenericNotifyTake+0xac>)
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	4413      	add	r3, r2
 8002a18:	337c      	adds	r3, #124	; 0x7c
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	701a      	strb	r2, [r3, #0]
                if( xTicksToWait > ( TickType_t ) 0 )
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d005      	beq.n	8002a30 <ulTaskGenericNotifyTake+0x4c>
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002a24:	2101      	movs	r1, #1
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f000 ffd4 	bl	80039d4 <prvAddCurrentTaskToDelayedList>
                    portYIELD_WITHIN_API();
 8002a2c:	f002 f8de 	bl	8004bec <vPortYield>
        taskEXIT_CRITICAL();
 8002a30:	f002 f900 	bl	8004c34 <vPortExitCritical>
        taskENTER_CRITICAL();
 8002a34:	f002 f8ec 	bl	8004c10 <vPortEnterCritical>
            ulReturn = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8002a38:	4b15      	ldr	r3, [pc, #84]	; (8002a90 <ulTaskGenericNotifyTake+0xac>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	68fa      	ldr	r2, [r7, #12]
 8002a3e:	321e      	adds	r2, #30
 8002a40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a44:	617b      	str	r3, [r7, #20]
            if( ulReturn != 0UL )
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d012      	beq.n	8002a72 <ulTaskGenericNotifyTake+0x8e>
                if( xClearCountOnExit != pdFALSE )
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d007      	beq.n	8002a62 <ulTaskGenericNotifyTake+0x7e>
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] = 0UL;
 8002a52:	4b0f      	ldr	r3, [pc, #60]	; (8002a90 <ulTaskGenericNotifyTake+0xac>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	68fa      	ldr	r2, [r7, #12]
 8002a58:	321e      	adds	r2, #30
 8002a5a:	2100      	movs	r1, #0
 8002a5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8002a60:	e007      	b.n	8002a72 <ulTaskGenericNotifyTake+0x8e>
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] = ulReturn - ( uint32_t ) 1;
 8002a62:	4b0b      	ldr	r3, [pc, #44]	; (8002a90 <ulTaskGenericNotifyTake+0xac>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	697a      	ldr	r2, [r7, #20]
 8002a68:	1e51      	subs	r1, r2, #1
 8002a6a:	68fa      	ldr	r2, [r7, #12]
 8002a6c:	321e      	adds	r2, #30
 8002a6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8002a72:	4b07      	ldr	r3, [pc, #28]	; (8002a90 <ulTaskGenericNotifyTake+0xac>)
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	4413      	add	r3, r2
 8002a7a:	337c      	adds	r3, #124	; 0x7c
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	701a      	strb	r2, [r3, #0]
        taskEXIT_CRITICAL();
 8002a80:	f002 f8d8 	bl	8004c34 <vPortExitCritical>
        return ulReturn;
 8002a84:	697b      	ldr	r3, [r7, #20]
    }
 8002a86:	4618      	mov	r0, r3
 8002a88:	3718      	adds	r7, #24
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	20000040 	.word	0x20000040

08002a94 <xTaskGenericNotifyStateClear>:

#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    BaseType_t xTaskGenericNotifyStateClear( TaskHandle_t xTask,
                                             UBaseType_t uxIndexToClear )
    {
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b084      	sub	sp, #16
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	6039      	str	r1, [r7, #0]
        TCB_t * pxTCB;
        BaseType_t xReturn;

        configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d002      	beq.n	8002aaa <xTaskGenericNotifyStateClear+0x16>
 8002aa4:	f002 f977 	bl	8004d96 <ulSetInterruptMask>
 8002aa8:	e7fe      	b.n	8002aa8 <xTaskGenericNotifyStateClear+0x14>

        /* If null is passed in here then it is the calling task that is having
         * its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d102      	bne.n	8002ab6 <xTaskGenericNotifyStateClear+0x22>
 8002ab0:	4b10      	ldr	r3, [pc, #64]	; (8002af4 <xTaskGenericNotifyStateClear+0x60>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	e000      	b.n	8002ab8 <xTaskGenericNotifyStateClear+0x24>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	60bb      	str	r3, [r7, #8]

        taskENTER_CRITICAL();
 8002aba:	f002 f8a9 	bl	8004c10 <vPortEnterCritical>
        {
            if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
 8002abe:	68ba      	ldr	r2, [r7, #8]
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	4413      	add	r3, r2
 8002ac4:	337c      	adds	r3, #124	; 0x7c
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	d108      	bne.n	8002ae0 <xTaskGenericNotifyStateClear+0x4c>
            {
                pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
 8002ace:	68ba      	ldr	r2, [r7, #8]
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	4413      	add	r3, r2
 8002ad4:	337c      	adds	r3, #124	; 0x7c
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	701a      	strb	r2, [r3, #0]
                xReturn = pdPASS;
 8002ada:	2301      	movs	r3, #1
 8002adc:	60fb      	str	r3, [r7, #12]
 8002ade:	e001      	b.n	8002ae4 <xTaskGenericNotifyStateClear+0x50>
            }
            else
            {
                xReturn = pdFAIL;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	60fb      	str	r3, [r7, #12]
            }
        }
        taskEXIT_CRITICAL();
 8002ae4:	f002 f8a6 	bl	8004c34 <vPortExitCritical>

        return xReturn;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
    }
 8002aea:	4618      	mov	r0, r3
 8002aec:	3710      	adds	r7, #16
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	20000040 	.word	0x20000040

08002af8 <ulTaskGenericNotifyValueClear>:
#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    uint32_t ulTaskGenericNotifyValueClear( TaskHandle_t xTask,
                                            UBaseType_t uxIndexToClear,
                                            uint32_t ulBitsToClear )
    {
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b086      	sub	sp, #24
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	60b9      	str	r1, [r7, #8]
 8002b02:	607a      	str	r2, [r7, #4]
        TCB_t * pxTCB;
        uint32_t ulReturn;

        /* If null is passed in here then it is the calling task that is having
         * its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d102      	bne.n	8002b10 <ulTaskGenericNotifyValueClear+0x18>
 8002b0a:	4b11      	ldr	r3, [pc, #68]	; (8002b50 <ulTaskGenericNotifyValueClear+0x58>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	e000      	b.n	8002b12 <ulTaskGenericNotifyValueClear+0x1a>
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	617b      	str	r3, [r7, #20]

        taskENTER_CRITICAL();
 8002b14:	f002 f87c 	bl	8004c10 <vPortEnterCritical>
        {
            /* Return the notification as it was before the bits were cleared,
             * then clear the bit mask. */
            ulReturn = pxTCB->ulNotifiedValue[ uxIndexToClear ];
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	68ba      	ldr	r2, [r7, #8]
 8002b1c:	321e      	adds	r2, #30
 8002b1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b22:	613b      	str	r3, [r7, #16]
            pxTCB->ulNotifiedValue[ uxIndexToClear ] &= ~ulBitsToClear;
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	68ba      	ldr	r2, [r7, #8]
 8002b28:	321e      	adds	r2, #30
 8002b2a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	43db      	mvns	r3, r3
 8002b32:	ea02 0103 	and.w	r1, r2, r3
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	68ba      	ldr	r2, [r7, #8]
 8002b3a:	321e      	adds	r2, #30
 8002b3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        }
        taskEXIT_CRITICAL();
 8002b40:	f002 f878 	bl	8004c34 <vPortExitCritical>

        return ulReturn;
 8002b44:	693b      	ldr	r3, [r7, #16]
    }
 8002b46:	4618      	mov	r0, r3
 8002b48:	3718      	adds	r7, #24
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	20000040 	.word	0x20000040

08002b54 <vTaskSetTimeOutState>:
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
    configASSERT( pxTimeOut );
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d102      	bne.n	8002b68 <vTaskSetTimeOutState+0x14>
 8002b62:	f002 f918 	bl	8004d96 <ulSetInterruptMask>
 8002b66:	e7fe      	b.n	8002b66 <vTaskSetTimeOutState+0x12>
    taskENTER_CRITICAL();
 8002b68:	f002 f852 	bl	8004c10 <vPortEnterCritical>
        pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002b6c:	4b06      	ldr	r3, [pc, #24]	; (8002b88 <vTaskSetTimeOutState+0x34>)
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	601a      	str	r2, [r3, #0]
        pxTimeOut->xTimeOnEntering = xTickCount;
 8002b74:	4b05      	ldr	r3, [pc, #20]	; (8002b8c <vTaskSetTimeOutState+0x38>)
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	605a      	str	r2, [r3, #4]
    taskEXIT_CRITICAL();
 8002b7c:	f002 f85a 	bl	8004c34 <vPortExitCritical>
}
 8002b80:	bf00      	nop
 8002b82:	3708      	adds	r7, #8
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	2000052c 	.word	0x2000052c
 8002b8c:	20000518 	.word	0x20000518

08002b90 <xTaskCheckForTimeOut>:
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b086      	sub	sp, #24
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	6039      	str	r1, [r7, #0]
    configASSERT( pxTimeOut );
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d102      	bne.n	8002ba6 <xTaskCheckForTimeOut+0x16>
 8002ba0:	f002 f8f9 	bl	8004d96 <ulSetInterruptMask>
 8002ba4:	e7fe      	b.n	8002ba4 <xTaskCheckForTimeOut+0x14>
    configASSERT( pxTicksToWait );
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d102      	bne.n	8002bb2 <xTaskCheckForTimeOut+0x22>
 8002bac:	f002 f8f3 	bl	8004d96 <ulSetInterruptMask>
 8002bb0:	e7fe      	b.n	8002bb0 <xTaskCheckForTimeOut+0x20>
    taskENTER_CRITICAL();
 8002bb2:	f002 f82d 	bl	8004c10 <vPortEnterCritical>
        const TickType_t xConstTickCount = xTickCount;
 8002bb6:	4b1f      	ldr	r3, [pc, #124]	; (8002c34 <xTaskCheckForTimeOut+0xa4>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	693a      	ldr	r2, [r7, #16]
 8002bc2:	1ad3      	subs	r3, r2, r3
 8002bc4:	60fb      	str	r3, [r7, #12]
            if( *pxTicksToWait == portMAX_DELAY )
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bce:	d102      	bne.n	8002bd6 <xTaskCheckForTimeOut+0x46>
                xReturn = pdFALSE;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	617b      	str	r3, [r7, #20]
 8002bd4:	e026      	b.n	8002c24 <xTaskCheckForTimeOut+0x94>
        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	4b17      	ldr	r3, [pc, #92]	; (8002c38 <xTaskCheckForTimeOut+0xa8>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d00a      	beq.n	8002bf8 <xTaskCheckForTimeOut+0x68>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	693a      	ldr	r2, [r7, #16]
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d305      	bcc.n	8002bf8 <xTaskCheckForTimeOut+0x68>
            xReturn = pdTRUE;
 8002bec:	2301      	movs	r3, #1
 8002bee:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	601a      	str	r2, [r3, #0]
 8002bf6:	e015      	b.n	8002c24 <xTaskCheckForTimeOut+0x94>
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	68fa      	ldr	r2, [r7, #12]
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d20b      	bcs.n	8002c1a <xTaskCheckForTimeOut+0x8a>
            *pxTicksToWait -= xElapsedTime;
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	1ad2      	subs	r2, r2, r3
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f000 fdfe 	bl	8003810 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8002c14:	2300      	movs	r3, #0
 8002c16:	617b      	str	r3, [r7, #20]
 8002c18:	e004      	b.n	8002c24 <xTaskCheckForTimeOut+0x94>
            *pxTicksToWait = ( TickType_t ) 0;
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8002c20:	2301      	movs	r3, #1
 8002c22:	617b      	str	r3, [r7, #20]
    taskEXIT_CRITICAL();
 8002c24:	f002 f806 	bl	8004c34 <vPortExitCritical>
    return xReturn;
 8002c28:	697b      	ldr	r3, [r7, #20]
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3718      	adds	r7, #24
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	20000518 	.word	0x20000518
 8002c38:	2000052c 	.word	0x2000052c

08002c3c <xTaskCatchUpTicks>:
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b084      	sub	sp, #16
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
    configASSERT( uxSchedulerSuspended == 0 );
 8002c44:	4b0d      	ldr	r3, [pc, #52]	; (8002c7c <xTaskCatchUpTicks+0x40>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d002      	beq.n	8002c52 <xTaskCatchUpTicks+0x16>
 8002c4c:	f002 f8a3 	bl	8004d96 <ulSetInterruptMask>
 8002c50:	e7fe      	b.n	8002c50 <xTaskCatchUpTicks+0x14>
    vTaskSuspendAll();
 8002c52:	f7ff f963 	bl	8001f1c <vTaskSuspendAll>
    taskENTER_CRITICAL();
 8002c56:	f001 ffdb 	bl	8004c10 <vPortEnterCritical>
        xPendedTicks += xTicksToCatchUp;
 8002c5a:	4b09      	ldr	r3, [pc, #36]	; (8002c80 <xTaskCatchUpTicks+0x44>)
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4413      	add	r3, r2
 8002c62:	4a07      	ldr	r2, [pc, #28]	; (8002c80 <xTaskCatchUpTicks+0x44>)
 8002c64:	6013      	str	r3, [r2, #0]
    taskEXIT_CRITICAL();
 8002c66:	f001 ffe5 	bl	8004c34 <vPortExitCritical>
    xYieldOccurred = xTaskResumeAll();
 8002c6a:	f7ff f965 	bl	8001f38 <xTaskResumeAll>
 8002c6e:	60f8      	str	r0, [r7, #12]
    return xYieldOccurred;
 8002c70:	68fb      	ldr	r3, [r7, #12]
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	3710      	adds	r7, #16
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	2000053c 	.word	0x2000053c
 8002c80:	20000524 	.word	0x20000524

08002c84 <xTaskIncrementTick>:
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b088      	sub	sp, #32
 8002c88:	af00      	add	r7, sp, #0
    BaseType_t xSwitchRequired = pdFALSE;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	61fb      	str	r3, [r7, #28]
    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002c8e:	4b7a      	ldr	r3, [pc, #488]	; (8002e78 <xTaskIncrementTick+0x1f4>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	f040 80e6 	bne.w	8002e64 <xTaskIncrementTick+0x1e0>
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002c98:	4b78      	ldr	r3, [pc, #480]	; (8002e7c <xTaskIncrementTick+0x1f8>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	3301      	adds	r3, #1
 8002c9e:	61bb      	str	r3, [r7, #24]
        xTickCount = xConstTickCount;
 8002ca0:	4a76      	ldr	r2, [pc, #472]	; (8002e7c <xTaskIncrementTick+0x1f8>)
 8002ca2:	69bb      	ldr	r3, [r7, #24]
 8002ca4:	6013      	str	r3, [r2, #0]
        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002ca6:	69bb      	ldr	r3, [r7, #24]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d118      	bne.n	8002cde <xTaskIncrementTick+0x5a>
            taskSWITCH_DELAYED_LISTS();
 8002cac:	4b74      	ldr	r3, [pc, #464]	; (8002e80 <xTaskIncrementTick+0x1fc>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d002      	beq.n	8002cbc <xTaskIncrementTick+0x38>
 8002cb6:	f002 f86e 	bl	8004d96 <ulSetInterruptMask>
 8002cba:	e7fe      	b.n	8002cba <xTaskIncrementTick+0x36>
 8002cbc:	4b70      	ldr	r3, [pc, #448]	; (8002e80 <xTaskIncrementTick+0x1fc>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	617b      	str	r3, [r7, #20]
 8002cc2:	4b70      	ldr	r3, [pc, #448]	; (8002e84 <xTaskIncrementTick+0x200>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a6e      	ldr	r2, [pc, #440]	; (8002e80 <xTaskIncrementTick+0x1fc>)
 8002cc8:	6013      	str	r3, [r2, #0]
 8002cca:	4a6e      	ldr	r2, [pc, #440]	; (8002e84 <xTaskIncrementTick+0x200>)
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	6013      	str	r3, [r2, #0]
 8002cd0:	4b6d      	ldr	r3, [pc, #436]	; (8002e88 <xTaskIncrementTick+0x204>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	3301      	adds	r3, #1
 8002cd6:	4a6c      	ldr	r2, [pc, #432]	; (8002e88 <xTaskIncrementTick+0x204>)
 8002cd8:	6013      	str	r3, [r2, #0]
 8002cda:	f000 ff59 	bl	8003b90 <prvResetNextTaskUnblockTime>
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002cde:	4b6b      	ldr	r3, [pc, #428]	; (8002e8c <xTaskIncrementTick+0x208>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	69ba      	ldr	r2, [r7, #24]
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	f0c0 80a8 	bcc.w	8002e3a <xTaskIncrementTick+0x1b6>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002cea:	4b65      	ldr	r3, [pc, #404]	; (8002e80 <xTaskIncrementTick+0x1fc>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d104      	bne.n	8002cfe <xTaskIncrementTick+0x7a>
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002cf4:	4b65      	ldr	r3, [pc, #404]	; (8002e8c <xTaskIncrementTick+0x208>)
 8002cf6:	f04f 32ff 	mov.w	r2, #4294967295
 8002cfa:	601a      	str	r2, [r3, #0]
                    break;
 8002cfc:	e09d      	b.n	8002e3a <xTaskIncrementTick+0x1b6>
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002cfe:	4b60      	ldr	r3, [pc, #384]	; (8002e80 <xTaskIncrementTick+0x1fc>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d0c:	60fb      	str	r3, [r7, #12]
                    if( xConstTickCount < xItemValue )
 8002d0e:	69ba      	ldr	r2, [r7, #24]
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d203      	bcs.n	8002d1e <xTaskIncrementTick+0x9a>
                        xNextTaskUnblockTime = xItemValue;
 8002d16:	4a5d      	ldr	r2, [pc, #372]	; (8002e8c <xTaskIncrementTick+0x208>)
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8002d1c:	e08d      	b.n	8002e3a <xTaskIncrementTick+0x1b6>
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d22:	60bb      	str	r3, [r7, #8]
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d28:	693a      	ldr	r2, [r7, #16]
 8002d2a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002d2c:	609a      	str	r2, [r3, #8]
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d32:	693a      	ldr	r2, [r7, #16]
 8002d34:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002d36:	605a      	str	r2, [r3, #4]
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	685a      	ldr	r2, [r3, #4]
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	3328      	adds	r3, #40	; 0x28
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d103      	bne.n	8002d4c <xTaskIncrementTick+0xc8>
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	605a      	str	r2, [r3, #4]
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	639a      	str	r2, [r3, #56]	; 0x38
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	1e5a      	subs	r2, r3, #1
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	601a      	str	r2, [r3, #0]
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d01e      	beq.n	8002da2 <xTaskIncrementTick+0x11e>
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d68:	607b      	str	r3, [r7, #4]
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6e:	693a      	ldr	r2, [r7, #16]
 8002d70:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002d72:	609a      	str	r2, [r3, #8]
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d78:	693a      	ldr	r2, [r7, #16]
 8002d7a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002d7c:	605a      	str	r2, [r3, #4]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	685a      	ldr	r2, [r3, #4]
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	333c      	adds	r3, #60	; 0x3c
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d103      	bne.n	8002d92 <xTaskIncrementTick+0x10e>
 8002d8a:	693b      	ldr	r3, [r7, #16]
 8002d8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	605a      	str	r2, [r3, #4]
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	2200      	movs	r2, #0
 8002d96:	64da      	str	r2, [r3, #76]	; 0x4c
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	1e5a      	subs	r2, r3, #1
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002da6:	4b3a      	ldr	r3, [pc, #232]	; (8002e90 <xTaskIncrementTick+0x20c>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d903      	bls.n	8002db6 <xTaskIncrementTick+0x132>
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002db2:	4a37      	ldr	r2, [pc, #220]	; (8002e90 <xTaskIncrementTick+0x20c>)
 8002db4:	6013      	str	r3, [r2, #0]
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002dba:	4936      	ldr	r1, [pc, #216]	; (8002e94 <xTaskIncrementTick+0x210>)
 8002dbc:	4613      	mov	r3, r2
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	4413      	add	r3, r2
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	440b      	add	r3, r1
 8002dc6:	3304      	adds	r3, #4
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	603b      	str	r3, [r7, #0]
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	683a      	ldr	r2, [r7, #0]
 8002dd0:	62da      	str	r2, [r3, #44]	; 0x2c
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	689a      	ldr	r2, [r3, #8]
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	631a      	str	r2, [r3, #48]	; 0x30
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	693a      	ldr	r2, [r7, #16]
 8002de0:	3228      	adds	r2, #40	; 0x28
 8002de2:	605a      	str	r2, [r3, #4]
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	609a      	str	r2, [r3, #8]
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002df2:	4613      	mov	r3, r2
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	4413      	add	r3, r2
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	4a26      	ldr	r2, [pc, #152]	; (8002e94 <xTaskIncrementTick+0x210>)
 8002dfc:	441a      	add	r2, r3
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	639a      	str	r2, [r3, #56]	; 0x38
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002e06:	4923      	ldr	r1, [pc, #140]	; (8002e94 <xTaskIncrementTick+0x210>)
 8002e08:	4613      	mov	r3, r2
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	4413      	add	r3, r2
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	440b      	add	r3, r1
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	1c59      	adds	r1, r3, #1
 8002e16:	481f      	ldr	r0, [pc, #124]	; (8002e94 <xTaskIncrementTick+0x210>)
 8002e18:	4613      	mov	r3, r2
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	4413      	add	r3, r2
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	4403      	add	r3, r0
 8002e22:	6019      	str	r1, [r3, #0]
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002e28:	4b1b      	ldr	r3, [pc, #108]	; (8002e98 <xTaskIncrementTick+0x214>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	f67f af5b 	bls.w	8002cea <xTaskIncrementTick+0x66>
                            xSwitchRequired = pdTRUE;
 8002e34:	2301      	movs	r3, #1
 8002e36:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002e38:	e757      	b.n	8002cea <xTaskIncrementTick+0x66>
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002e3a:	4b17      	ldr	r3, [pc, #92]	; (8002e98 <xTaskIncrementTick+0x214>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002e40:	4914      	ldr	r1, [pc, #80]	; (8002e94 <xTaskIncrementTick+0x210>)
 8002e42:	4613      	mov	r3, r2
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	4413      	add	r3, r2
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	440b      	add	r3, r1
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d901      	bls.n	8002e56 <xTaskIncrementTick+0x1d2>
                xSwitchRequired = pdTRUE;
 8002e52:	2301      	movs	r3, #1
 8002e54:	61fb      	str	r3, [r7, #28]
            if( xYieldPending != pdFALSE )
 8002e56:	4b11      	ldr	r3, [pc, #68]	; (8002e9c <xTaskIncrementTick+0x218>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d007      	beq.n	8002e6e <xTaskIncrementTick+0x1ea>
                xSwitchRequired = pdTRUE;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	61fb      	str	r3, [r7, #28]
 8002e62:	e004      	b.n	8002e6e <xTaskIncrementTick+0x1ea>
        ++xPendedTicks;
 8002e64:	4b0e      	ldr	r3, [pc, #56]	; (8002ea0 <xTaskIncrementTick+0x21c>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	3301      	adds	r3, #1
 8002e6a:	4a0d      	ldr	r2, [pc, #52]	; (8002ea0 <xTaskIncrementTick+0x21c>)
 8002e6c:	6013      	str	r3, [r2, #0]
    return xSwitchRequired;
 8002e6e:	69fb      	ldr	r3, [r7, #28]
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3720      	adds	r7, #32
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	2000053c 	.word	0x2000053c
 8002e7c:	20000518 	.word	0x20000518
 8002e80:	200004cc 	.word	0x200004cc
 8002e84:	200004d0 	.word	0x200004d0
 8002e88:	2000052c 	.word	0x2000052c
 8002e8c:	20000534 	.word	0x20000534
 8002e90:	2000051c 	.word	0x2000051c
 8002e94:	20000044 	.word	0x20000044
 8002e98:	20000040 	.word	0x20000040
 8002e9c:	20000528 	.word	0x20000528
 8002ea0:	20000524 	.word	0x20000524

08002ea4 <vTaskPlaceOnEventList>:
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b082      	sub	sp, #8
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d102      	bne.n	8002eba <vTaskPlaceOnEventList+0x16>
 8002eb4:	f001 ff6f 	bl	8004d96 <ulSetInterruptMask>
 8002eb8:	e7fe      	b.n	8002eb8 <vTaskPlaceOnEventList+0x14>
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002eba:	4b07      	ldr	r3, [pc, #28]	; (8002ed8 <vTaskPlaceOnEventList+0x34>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	333c      	adds	r3, #60	; 0x3c
 8002ec0:	4619      	mov	r1, r3
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f7fd f9e5 	bl	8000292 <vListInsert>
    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002ec8:	2101      	movs	r1, #1
 8002eca:	6838      	ldr	r0, [r7, #0]
 8002ecc:	f000 fd82 	bl	80039d4 <prvAddCurrentTaskToDelayedList>
}
 8002ed0:	bf00      	nop
 8002ed2:	3708      	adds	r7, #8
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}
 8002ed8:	20000040 	.word	0x20000040

08002edc <vTaskPlaceOnUnorderedEventList>:
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b086      	sub	sp, #24
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	60f8      	str	r0, [r7, #12]
 8002ee4:	60b9      	str	r1, [r7, #8]
 8002ee6:	607a      	str	r2, [r7, #4]
    configASSERT( pxEventList );
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d102      	bne.n	8002ef4 <vTaskPlaceOnUnorderedEventList+0x18>
 8002eee:	f001 ff52 	bl	8004d96 <ulSetInterruptMask>
 8002ef2:	e7fe      	b.n	8002ef2 <vTaskPlaceOnUnorderedEventList+0x16>
    configASSERT( uxSchedulerSuspended != 0 );
 8002ef4:	4b1a      	ldr	r3, [pc, #104]	; (8002f60 <vTaskPlaceOnUnorderedEventList+0x84>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d102      	bne.n	8002f02 <vTaskPlaceOnUnorderedEventList+0x26>
 8002efc:	f001 ff4b 	bl	8004d96 <ulSetInterruptMask>
 8002f00:	e7fe      	b.n	8002f00 <vTaskPlaceOnUnorderedEventList+0x24>
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8002f02:	4b18      	ldr	r3, [pc, #96]	; (8002f64 <vTaskPlaceOnUnorderedEventList+0x88>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	68ba      	ldr	r2, [r7, #8]
 8002f08:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002f0c:	63da      	str	r2, [r3, #60]	; 0x3c
    listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	617b      	str	r3, [r7, #20]
 8002f14:	4b13      	ldr	r3, [pc, #76]	; (8002f64 <vTaskPlaceOnUnorderedEventList+0x88>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	697a      	ldr	r2, [r7, #20]
 8002f1a:	641a      	str	r2, [r3, #64]	; 0x40
 8002f1c:	4b11      	ldr	r3, [pc, #68]	; (8002f64 <vTaskPlaceOnUnorderedEventList+0x88>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	697a      	ldr	r2, [r7, #20]
 8002f22:	6892      	ldr	r2, [r2, #8]
 8002f24:	645a      	str	r2, [r3, #68]	; 0x44
 8002f26:	4b0f      	ldr	r3, [pc, #60]	; (8002f64 <vTaskPlaceOnUnorderedEventList+0x88>)
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	323c      	adds	r2, #60	; 0x3c
 8002f30:	605a      	str	r2, [r3, #4]
 8002f32:	4b0c      	ldr	r3, [pc, #48]	; (8002f64 <vTaskPlaceOnUnorderedEventList+0x88>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	609a      	str	r2, [r3, #8]
 8002f3e:	4b09      	ldr	r3, [pc, #36]	; (8002f64 <vTaskPlaceOnUnorderedEventList+0x88>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	68fa      	ldr	r2, [r7, #12]
 8002f44:	64da      	str	r2, [r3, #76]	; 0x4c
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	1c5a      	adds	r2, r3, #1
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	601a      	str	r2, [r3, #0]
    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002f50:	2101      	movs	r1, #1
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f000 fd3e 	bl	80039d4 <prvAddCurrentTaskToDelayedList>
}
 8002f58:	bf00      	nop
 8002f5a:	3718      	adds	r7, #24
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	2000053c 	.word	0x2000053c
 8002f64:	20000040 	.word	0x20000040

08002f68 <vTaskPlaceOnEventListRestricted>:
    {
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b086      	sub	sp, #24
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	60f8      	str	r0, [r7, #12]
 8002f70:	60b9      	str	r1, [r7, #8]
 8002f72:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d102      	bne.n	8002f80 <vTaskPlaceOnEventListRestricted+0x18>
 8002f7a:	f001 ff0c 	bl	8004d96 <ulSetInterruptMask>
 8002f7e:	e7fe      	b.n	8002f7e <vTaskPlaceOnEventListRestricted+0x16>
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	617b      	str	r3, [r7, #20]
 8002f86:	4b16      	ldr	r3, [pc, #88]	; (8002fe0 <vTaskPlaceOnEventListRestricted+0x78>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	697a      	ldr	r2, [r7, #20]
 8002f8c:	641a      	str	r2, [r3, #64]	; 0x40
 8002f8e:	4b14      	ldr	r3, [pc, #80]	; (8002fe0 <vTaskPlaceOnEventListRestricted+0x78>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	697a      	ldr	r2, [r7, #20]
 8002f94:	6892      	ldr	r2, [r2, #8]
 8002f96:	645a      	str	r2, [r3, #68]	; 0x44
 8002f98:	4b11      	ldr	r3, [pc, #68]	; (8002fe0 <vTaskPlaceOnEventListRestricted+0x78>)
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	323c      	adds	r2, #60	; 0x3c
 8002fa2:	605a      	str	r2, [r3, #4]
 8002fa4:	4b0e      	ldr	r3, [pc, #56]	; (8002fe0 <vTaskPlaceOnEventListRestricted+0x78>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	609a      	str	r2, [r3, #8]
 8002fb0:	4b0b      	ldr	r3, [pc, #44]	; (8002fe0 <vTaskPlaceOnEventListRestricted+0x78>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	68fa      	ldr	r2, [r7, #12]
 8002fb6:	64da      	str	r2, [r3, #76]	; 0x4c
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	1c5a      	adds	r2, r3, #1
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	601a      	str	r2, [r3, #0]
        if( xWaitIndefinitely != pdFALSE )
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d002      	beq.n	8002fce <vTaskPlaceOnEventListRestricted+0x66>
            xTicksToWait = portMAX_DELAY;
 8002fc8:	f04f 33ff 	mov.w	r3, #4294967295
 8002fcc:	60bb      	str	r3, [r7, #8]
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002fce:	6879      	ldr	r1, [r7, #4]
 8002fd0:	68b8      	ldr	r0, [r7, #8]
 8002fd2:	f000 fcff 	bl	80039d4 <prvAddCurrentTaskToDelayedList>
    }
 8002fd6:	bf00      	nop
 8002fd8:	3718      	adds	r7, #24
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}
 8002fde:	bf00      	nop
 8002fe0:	20000040 	.word	0x20000040

08002fe4 <xTaskRemoveFromEventList>:
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b088      	sub	sp, #32
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	68db      	ldr	r3, [r3, #12]
 8002ff2:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
 8002ff4:	69bb      	ldr	r3, [r7, #24]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d102      	bne.n	8003000 <xTaskRemoveFromEventList+0x1c>
 8002ffa:	f001 fecc 	bl	8004d96 <ulSetInterruptMask>
 8002ffe:	e7fe      	b.n	8002ffe <xTaskRemoveFromEventList+0x1a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8003000:	69bb      	ldr	r3, [r7, #24]
 8003002:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003004:	617b      	str	r3, [r7, #20]
 8003006:	69bb      	ldr	r3, [r7, #24]
 8003008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300a:	69ba      	ldr	r2, [r7, #24]
 800300c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800300e:	609a      	str	r2, [r3, #8]
 8003010:	69bb      	ldr	r3, [r7, #24]
 8003012:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003014:	69ba      	ldr	r2, [r7, #24]
 8003016:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003018:	605a      	str	r2, [r3, #4]
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	685a      	ldr	r2, [r3, #4]
 800301e:	69bb      	ldr	r3, [r7, #24]
 8003020:	333c      	adds	r3, #60	; 0x3c
 8003022:	429a      	cmp	r2, r3
 8003024:	d103      	bne.n	800302e <xTaskRemoveFromEventList+0x4a>
 8003026:	69bb      	ldr	r3, [r7, #24]
 8003028:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	605a      	str	r2, [r3, #4]
 800302e:	69bb      	ldr	r3, [r7, #24]
 8003030:	2200      	movs	r2, #0
 8003032:	64da      	str	r2, [r3, #76]	; 0x4c
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	1e5a      	subs	r2, r3, #1
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	601a      	str	r2, [r3, #0]
    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800303e:	4b4a      	ldr	r3, [pc, #296]	; (8003168 <xTaskRemoveFromEventList+0x184>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d160      	bne.n	8003108 <xTaskRemoveFromEventList+0x124>
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8003046:	69bb      	ldr	r3, [r7, #24]
 8003048:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800304a:	60fb      	str	r3, [r7, #12]
 800304c:	69bb      	ldr	r3, [r7, #24]
 800304e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003050:	69ba      	ldr	r2, [r7, #24]
 8003052:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003054:	609a      	str	r2, [r3, #8]
 8003056:	69bb      	ldr	r3, [r7, #24]
 8003058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800305a:	69ba      	ldr	r2, [r7, #24]
 800305c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800305e:	605a      	str	r2, [r3, #4]
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	685a      	ldr	r2, [r3, #4]
 8003064:	69bb      	ldr	r3, [r7, #24]
 8003066:	3328      	adds	r3, #40	; 0x28
 8003068:	429a      	cmp	r2, r3
 800306a:	d103      	bne.n	8003074 <xTaskRemoveFromEventList+0x90>
 800306c:	69bb      	ldr	r3, [r7, #24]
 800306e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	605a      	str	r2, [r3, #4]
 8003074:	69bb      	ldr	r3, [r7, #24]
 8003076:	2200      	movs	r2, #0
 8003078:	639a      	str	r2, [r3, #56]	; 0x38
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	1e5a      	subs	r2, r3, #1
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003084:	69bb      	ldr	r3, [r7, #24]
 8003086:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003088:	4b38      	ldr	r3, [pc, #224]	; (800316c <xTaskRemoveFromEventList+0x188>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	429a      	cmp	r2, r3
 800308e:	d903      	bls.n	8003098 <xTaskRemoveFromEventList+0xb4>
 8003090:	69bb      	ldr	r3, [r7, #24]
 8003092:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003094:	4a35      	ldr	r2, [pc, #212]	; (800316c <xTaskRemoveFromEventList+0x188>)
 8003096:	6013      	str	r3, [r2, #0]
 8003098:	69bb      	ldr	r3, [r7, #24]
 800309a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800309c:	4934      	ldr	r1, [pc, #208]	; (8003170 <xTaskRemoveFromEventList+0x18c>)
 800309e:	4613      	mov	r3, r2
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	4413      	add	r3, r2
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	440b      	add	r3, r1
 80030a8:	3304      	adds	r3, #4
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	60bb      	str	r3, [r7, #8]
 80030ae:	69bb      	ldr	r3, [r7, #24]
 80030b0:	68ba      	ldr	r2, [r7, #8]
 80030b2:	62da      	str	r2, [r3, #44]	; 0x2c
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	689a      	ldr	r2, [r3, #8]
 80030b8:	69bb      	ldr	r3, [r7, #24]
 80030ba:	631a      	str	r2, [r3, #48]	; 0x30
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	69ba      	ldr	r2, [r7, #24]
 80030c2:	3228      	adds	r2, #40	; 0x28
 80030c4:	605a      	str	r2, [r3, #4]
 80030c6:	69bb      	ldr	r3, [r7, #24]
 80030c8:	f103 0228 	add.w	r2, r3, #40	; 0x28
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	609a      	str	r2, [r3, #8]
 80030d0:	69bb      	ldr	r3, [r7, #24]
 80030d2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80030d4:	4613      	mov	r3, r2
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	4413      	add	r3, r2
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	4a24      	ldr	r2, [pc, #144]	; (8003170 <xTaskRemoveFromEventList+0x18c>)
 80030de:	441a      	add	r2, r3
 80030e0:	69bb      	ldr	r3, [r7, #24]
 80030e2:	639a      	str	r2, [r3, #56]	; 0x38
 80030e4:	69bb      	ldr	r3, [r7, #24]
 80030e6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80030e8:	4921      	ldr	r1, [pc, #132]	; (8003170 <xTaskRemoveFromEventList+0x18c>)
 80030ea:	4613      	mov	r3, r2
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	4413      	add	r3, r2
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	440b      	add	r3, r1
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	1c59      	adds	r1, r3, #1
 80030f8:	481d      	ldr	r0, [pc, #116]	; (8003170 <xTaskRemoveFromEventList+0x18c>)
 80030fa:	4613      	mov	r3, r2
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	4413      	add	r3, r2
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	4403      	add	r3, r0
 8003104:	6019      	str	r1, [r3, #0]
 8003106:	e01b      	b.n	8003140 <xTaskRemoveFromEventList+0x15c>
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003108:	4b1a      	ldr	r3, [pc, #104]	; (8003174 <xTaskRemoveFromEventList+0x190>)
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	613b      	str	r3, [r7, #16]
 800310e:	69bb      	ldr	r3, [r7, #24]
 8003110:	693a      	ldr	r2, [r7, #16]
 8003112:	641a      	str	r2, [r3, #64]	; 0x40
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	689a      	ldr	r2, [r3, #8]
 8003118:	69bb      	ldr	r3, [r7, #24]
 800311a:	645a      	str	r2, [r3, #68]	; 0x44
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	69ba      	ldr	r2, [r7, #24]
 8003122:	323c      	adds	r2, #60	; 0x3c
 8003124:	605a      	str	r2, [r3, #4]
 8003126:	69bb      	ldr	r3, [r7, #24]
 8003128:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	609a      	str	r2, [r3, #8]
 8003130:	69bb      	ldr	r3, [r7, #24]
 8003132:	4a10      	ldr	r2, [pc, #64]	; (8003174 <xTaskRemoveFromEventList+0x190>)
 8003134:	64da      	str	r2, [r3, #76]	; 0x4c
 8003136:	4b0f      	ldr	r3, [pc, #60]	; (8003174 <xTaskRemoveFromEventList+0x190>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	3301      	adds	r3, #1
 800313c:	4a0d      	ldr	r2, [pc, #52]	; (8003174 <xTaskRemoveFromEventList+0x190>)
 800313e:	6013      	str	r3, [r2, #0]
    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003140:	69bb      	ldr	r3, [r7, #24]
 8003142:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003144:	4b0c      	ldr	r3, [pc, #48]	; (8003178 <xTaskRemoveFromEventList+0x194>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800314a:	429a      	cmp	r2, r3
 800314c:	d905      	bls.n	800315a <xTaskRemoveFromEventList+0x176>
        xReturn = pdTRUE;
 800314e:	2301      	movs	r3, #1
 8003150:	61fb      	str	r3, [r7, #28]
        xYieldPending = pdTRUE;
 8003152:	4b0a      	ldr	r3, [pc, #40]	; (800317c <xTaskRemoveFromEventList+0x198>)
 8003154:	2201      	movs	r2, #1
 8003156:	601a      	str	r2, [r3, #0]
 8003158:	e001      	b.n	800315e <xTaskRemoveFromEventList+0x17a>
        xReturn = pdFALSE;
 800315a:	2300      	movs	r3, #0
 800315c:	61fb      	str	r3, [r7, #28]
    return xReturn;
 800315e:	69fb      	ldr	r3, [r7, #28]
}
 8003160:	4618      	mov	r0, r3
 8003162:	3720      	adds	r7, #32
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}
 8003168:	2000053c 	.word	0x2000053c
 800316c:	2000051c 	.word	0x2000051c
 8003170:	20000044 	.word	0x20000044
 8003174:	200004d4 	.word	0x200004d4
 8003178:	20000040 	.word	0x20000040
 800317c:	20000528 	.word	0x20000528

08003180 <vTaskRemoveFromUnorderedEventList>:
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b086      	sub	sp, #24
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	6039      	str	r1, [r7, #0]
    configASSERT( uxSchedulerSuspended != pdFALSE );
 800318a:	4b50      	ldr	r3, [pc, #320]	; (80032cc <vTaskRemoveFromUnorderedEventList+0x14c>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d102      	bne.n	8003198 <vTaskRemoveFromUnorderedEventList+0x18>
 8003192:	f001 fe00 	bl	8004d96 <ulSetInterruptMask>
 8003196:	e7fe      	b.n	8003196 <vTaskRemoveFromUnorderedEventList+0x16>
    listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	601a      	str	r2, [r3, #0]
    pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	617b      	str	r3, [r7, #20]
    configASSERT( pxUnblockedTCB );
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d102      	bne.n	80031b4 <vTaskRemoveFromUnorderedEventList+0x34>
 80031ae:	f001 fdf2 	bl	8004d96 <ulSetInterruptMask>
 80031b2:	e7fe      	b.n	80031b2 <vTaskRemoveFromUnorderedEventList+0x32>
    listREMOVE_ITEM( pxEventListItem );
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	691b      	ldr	r3, [r3, #16]
 80031b8:	613b      	str	r3, [r7, #16]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	6892      	ldr	r2, [r2, #8]
 80031c2:	609a      	str	r2, [r3, #8]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	6852      	ldr	r2, [r2, #4]
 80031cc:	605a      	str	r2, [r3, #4]
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d103      	bne.n	80031e0 <vTaskRemoveFromUnorderedEventList+0x60>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	689a      	ldr	r2, [r3, #8]
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	605a      	str	r2, [r3, #4]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2200      	movs	r2, #0
 80031e4:	611a      	str	r2, [r3, #16]
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	1e5a      	subs	r2, r3, #1
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	601a      	str	r2, [r3, #0]
    listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031f4:	60fb      	str	r3, [r7, #12]
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031fa:	697a      	ldr	r2, [r7, #20]
 80031fc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80031fe:	609a      	str	r2, [r3, #8]
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003204:	697a      	ldr	r2, [r7, #20]
 8003206:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003208:	605a      	str	r2, [r3, #4]
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	685a      	ldr	r2, [r3, #4]
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	3328      	adds	r3, #40	; 0x28
 8003212:	429a      	cmp	r2, r3
 8003214:	d103      	bne.n	800321e <vTaskRemoveFromUnorderedEventList+0x9e>
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	605a      	str	r2, [r3, #4]
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	2200      	movs	r2, #0
 8003222:	639a      	str	r2, [r3, #56]	; 0x38
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	1e5a      	subs	r2, r3, #1
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	601a      	str	r2, [r3, #0]
    prvAddTaskToReadyList( pxUnblockedTCB );
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003232:	4b27      	ldr	r3, [pc, #156]	; (80032d0 <vTaskRemoveFromUnorderedEventList+0x150>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	429a      	cmp	r2, r3
 8003238:	d903      	bls.n	8003242 <vTaskRemoveFromUnorderedEventList+0xc2>
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800323e:	4a24      	ldr	r2, [pc, #144]	; (80032d0 <vTaskRemoveFromUnorderedEventList+0x150>)
 8003240:	6013      	str	r3, [r2, #0]
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003246:	4923      	ldr	r1, [pc, #140]	; (80032d4 <vTaskRemoveFromUnorderedEventList+0x154>)
 8003248:	4613      	mov	r3, r2
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	4413      	add	r3, r2
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	440b      	add	r3, r1
 8003252:	3304      	adds	r3, #4
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	60bb      	str	r3, [r7, #8]
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	68ba      	ldr	r2, [r7, #8]
 800325c:	62da      	str	r2, [r3, #44]	; 0x2c
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	689a      	ldr	r2, [r3, #8]
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	631a      	str	r2, [r3, #48]	; 0x30
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	697a      	ldr	r2, [r7, #20]
 800326c:	3228      	adds	r2, #40	; 0x28
 800326e:	605a      	str	r2, [r3, #4]
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	609a      	str	r2, [r3, #8]
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800327e:	4613      	mov	r3, r2
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	4413      	add	r3, r2
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	4a13      	ldr	r2, [pc, #76]	; (80032d4 <vTaskRemoveFromUnorderedEventList+0x154>)
 8003288:	441a      	add	r2, r3
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	639a      	str	r2, [r3, #56]	; 0x38
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003292:	4910      	ldr	r1, [pc, #64]	; (80032d4 <vTaskRemoveFromUnorderedEventList+0x154>)
 8003294:	4613      	mov	r3, r2
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	4413      	add	r3, r2
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	440b      	add	r3, r1
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	1c59      	adds	r1, r3, #1
 80032a2:	480c      	ldr	r0, [pc, #48]	; (80032d4 <vTaskRemoveFromUnorderedEventList+0x154>)
 80032a4:	4613      	mov	r3, r2
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	4413      	add	r3, r2
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	4403      	add	r3, r0
 80032ae:	6019      	str	r1, [r3, #0]
    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80032b4:	4b08      	ldr	r3, [pc, #32]	; (80032d8 <vTaskRemoveFromUnorderedEventList+0x158>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d902      	bls.n	80032c4 <vTaskRemoveFromUnorderedEventList+0x144>
        xYieldPending = pdTRUE;
 80032be:	4b07      	ldr	r3, [pc, #28]	; (80032dc <vTaskRemoveFromUnorderedEventList+0x15c>)
 80032c0:	2201      	movs	r2, #1
 80032c2:	601a      	str	r2, [r3, #0]
}
 80032c4:	bf00      	nop
 80032c6:	3718      	adds	r7, #24
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	2000053c 	.word	0x2000053c
 80032d0:	2000051c 	.word	0x2000051c
 80032d4:	20000044 	.word	0x20000044
 80032d8:	20000040 	.word	0x20000040
 80032dc:	20000528 	.word	0x20000528

080032e0 <vTaskSwitchContext>:
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b082      	sub	sp, #8
 80032e4:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80032e6:	4b23      	ldr	r3, [pc, #140]	; (8003374 <vTaskSwitchContext+0x94>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d003      	beq.n	80032f6 <vTaskSwitchContext+0x16>
        xYieldPending = pdTRUE;
 80032ee:	4b22      	ldr	r3, [pc, #136]	; (8003378 <vTaskSwitchContext+0x98>)
 80032f0:	2201      	movs	r2, #1
 80032f2:	601a      	str	r2, [r3, #0]
}
 80032f4:	e039      	b.n	800336a <vTaskSwitchContext+0x8a>
        xYieldPending = pdFALSE;
 80032f6:	4b20      	ldr	r3, [pc, #128]	; (8003378 <vTaskSwitchContext+0x98>)
 80032f8:	2200      	movs	r2, #0
 80032fa:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032fc:	4b1f      	ldr	r3, [pc, #124]	; (800337c <vTaskSwitchContext+0x9c>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	607b      	str	r3, [r7, #4]
 8003302:	e008      	b.n	8003316 <vTaskSwitchContext+0x36>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d102      	bne.n	8003310 <vTaskSwitchContext+0x30>
 800330a:	f001 fd44 	bl	8004d96 <ulSetInterruptMask>
 800330e:	e7fe      	b.n	800330e <vTaskSwitchContext+0x2e>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	3b01      	subs	r3, #1
 8003314:	607b      	str	r3, [r7, #4]
 8003316:	491a      	ldr	r1, [pc, #104]	; (8003380 <vTaskSwitchContext+0xa0>)
 8003318:	687a      	ldr	r2, [r7, #4]
 800331a:	4613      	mov	r3, r2
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	4413      	add	r3, r2
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	440b      	add	r3, r1
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d0ec      	beq.n	8003304 <vTaskSwitchContext+0x24>
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	4613      	mov	r3, r2
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	4413      	add	r3, r2
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	4a12      	ldr	r2, [pc, #72]	; (8003380 <vTaskSwitchContext+0xa0>)
 8003336:	4413      	add	r3, r2
 8003338:	603b      	str	r3, [r7, #0]
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	685a      	ldr	r2, [r3, #4]
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	605a      	str	r2, [r3, #4]
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	685a      	ldr	r2, [r3, #4]
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	3308      	adds	r3, #8
 800334c:	429a      	cmp	r2, r3
 800334e:	d104      	bne.n	800335a <vTaskSwitchContext+0x7a>
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	685a      	ldr	r2, [r3, #4]
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	605a      	str	r2, [r3, #4]
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	68db      	ldr	r3, [r3, #12]
 8003360:	4a08      	ldr	r2, [pc, #32]	; (8003384 <vTaskSwitchContext+0xa4>)
 8003362:	6013      	str	r3, [r2, #0]
 8003364:	4a05      	ldr	r2, [pc, #20]	; (800337c <vTaskSwitchContext+0x9c>)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6013      	str	r3, [r2, #0]
}
 800336a:	bf00      	nop
 800336c:	3708      	adds	r7, #8
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
 8003372:	bf00      	nop
 8003374:	2000053c 	.word	0x2000053c
 8003378:	20000528 	.word	0x20000528
 800337c:	2000051c 	.word	0x2000051c
 8003380:	20000044 	.word	0x20000044
 8003384:	20000040 	.word	0x20000040

08003388 <uxTaskResetEventItemValue>:
{
 8003388:	b480      	push	{r7}
 800338a:	b083      	sub	sp, #12
 800338c:	af00      	add	r7, sp, #0
    uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800338e:	4b09      	ldr	r3, [pc, #36]	; (80033b4 <uxTaskResetEventItemValue+0x2c>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003394:	607b      	str	r3, [r7, #4]
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003396:	4b07      	ldr	r3, [pc, #28]	; (80033b4 <uxTaskResetEventItemValue+0x2c>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800339c:	4b05      	ldr	r3, [pc, #20]	; (80033b4 <uxTaskResetEventItemValue+0x2c>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 80033a4:	63da      	str	r2, [r3, #60]	; 0x3c
    return uxReturn;
 80033a6:	687b      	ldr	r3, [r7, #4]
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	370c      	adds	r7, #12
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr
 80033b4:	20000040 	.word	0x20000040

080033b8 <xTaskGetCurrentTaskHandle>:
    {
 80033b8:	b480      	push	{r7}
 80033ba:	b083      	sub	sp, #12
 80033bc:	af00      	add	r7, sp, #0
        xReturn = pxCurrentTCB;
 80033be:	4b05      	ldr	r3, [pc, #20]	; (80033d4 <xTaskGetCurrentTaskHandle+0x1c>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	607b      	str	r3, [r7, #4]
        return xReturn;
 80033c4:	687b      	ldr	r3, [r7, #4]
    }
 80033c6:	4618      	mov	r0, r3
 80033c8:	370c      	adds	r7, #12
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr
 80033d2:	bf00      	nop
 80033d4:	20000040 	.word	0x20000040

080033d8 <vTaskMissedYield>:
{
 80033d8:	b480      	push	{r7}
 80033da:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80033dc:	4b03      	ldr	r3, [pc, #12]	; (80033ec <vTaskMissedYield+0x14>)
 80033de:	2201      	movs	r2, #1
 80033e0:	601a      	str	r2, [r3, #0]
}
 80033e2:	bf00      	nop
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr
 80033ec:	20000528 	.word	0x20000528

080033f0 <xTaskGetSchedulerState>:
    {
 80033f0:	b480      	push	{r7}
 80033f2:	b083      	sub	sp, #12
 80033f4:	af00      	add	r7, sp, #0
        if( xSchedulerRunning == pdFALSE )
 80033f6:	4b0b      	ldr	r3, [pc, #44]	; (8003424 <xTaskGetSchedulerState+0x34>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d102      	bne.n	8003404 <xTaskGetSchedulerState+0x14>
            xReturn = taskSCHEDULER_NOT_STARTED;
 80033fe:	2301      	movs	r3, #1
 8003400:	607b      	str	r3, [r7, #4]
 8003402:	e008      	b.n	8003416 <xTaskGetSchedulerState+0x26>
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003404:	4b08      	ldr	r3, [pc, #32]	; (8003428 <xTaskGetSchedulerState+0x38>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d102      	bne.n	8003412 <xTaskGetSchedulerState+0x22>
                xReturn = taskSCHEDULER_RUNNING;
 800340c:	2302      	movs	r3, #2
 800340e:	607b      	str	r3, [r7, #4]
 8003410:	e001      	b.n	8003416 <xTaskGetSchedulerState+0x26>
                xReturn = taskSCHEDULER_SUSPENDED;
 8003412:	2300      	movs	r3, #0
 8003414:	607b      	str	r3, [r7, #4]
        return xReturn;
 8003416:	687b      	ldr	r3, [r7, #4]
    }
 8003418:	4618      	mov	r0, r3
 800341a:	370c      	adds	r7, #12
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr
 8003424:	20000520 	.word	0x20000520
 8003428:	2000053c 	.word	0x2000053c

0800342c <xTaskPriorityInherit>:
    {
 800342c:	b580      	push	{r7, lr}
 800342e:	b086      	sub	sp, #24
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8003438:	2300      	movs	r3, #0
 800343a:	617b      	str	r3, [r7, #20]
        if( pxMutexHolder != NULL )
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d07a      	beq.n	8003538 <xTaskPriorityInherit+0x10c>
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003446:	4b3f      	ldr	r3, [pc, #252]	; (8003544 <xTaskPriorityInherit+0x118>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800344c:	429a      	cmp	r2, r3
 800344e:	d26a      	bcs.n	8003526 <xTaskPriorityInherit+0xfa>
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003454:	2b00      	cmp	r3, #0
 8003456:	db06      	blt.n	8003466 <xTaskPriorityInherit+0x3a>
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003458:	4b3a      	ldr	r3, [pc, #232]	; (8003544 <xTaskPriorityInherit+0x118>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800345e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	63da      	str	r2, [r3, #60]	; 0x3c
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	6b99      	ldr	r1, [r3, #56]	; 0x38
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800346e:	4613      	mov	r3, r2
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	4413      	add	r3, r2
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	4a34      	ldr	r2, [pc, #208]	; (8003548 <xTaskPriorityInherit+0x11c>)
 8003478:	4413      	add	r3, r2
 800347a:	4299      	cmp	r1, r3
 800347c:	d14b      	bne.n	8003516 <xTaskPriorityInherit+0xea>
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	3328      	adds	r3, #40	; 0x28
 8003482:	4618      	mov	r0, r3
 8003484:	f7fc ff62 	bl	800034c <uxListRemove>
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003488:	4b2e      	ldr	r3, [pc, #184]	; (8003544 <xTaskPriorityInherit+0x118>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	651a      	str	r2, [r3, #80]	; 0x50
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003496:	4b2d      	ldr	r3, [pc, #180]	; (800354c <xTaskPriorityInherit+0x120>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	429a      	cmp	r2, r3
 800349c:	d903      	bls.n	80034a6 <xTaskPriorityInherit+0x7a>
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034a2:	4a2a      	ldr	r2, [pc, #168]	; (800354c <xTaskPriorityInherit+0x120>)
 80034a4:	6013      	str	r3, [r2, #0]
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80034aa:	4927      	ldr	r1, [pc, #156]	; (8003548 <xTaskPriorityInherit+0x11c>)
 80034ac:	4613      	mov	r3, r2
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	4413      	add	r3, r2
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	440b      	add	r3, r1
 80034b6:	3304      	adds	r3, #4
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	60fb      	str	r3, [r7, #12]
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	68fa      	ldr	r2, [r7, #12]
 80034c0:	62da      	str	r2, [r3, #44]	; 0x2c
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	689a      	ldr	r2, [r3, #8]
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	631a      	str	r2, [r3, #48]	; 0x30
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	693a      	ldr	r2, [r7, #16]
 80034d0:	3228      	adds	r2, #40	; 0x28
 80034d2:	605a      	str	r2, [r3, #4]
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	f103 0228 	add.w	r2, r3, #40	; 0x28
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	609a      	str	r2, [r3, #8]
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80034e2:	4613      	mov	r3, r2
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	4413      	add	r3, r2
 80034e8:	009b      	lsls	r3, r3, #2
 80034ea:	4a17      	ldr	r2, [pc, #92]	; (8003548 <xTaskPriorityInherit+0x11c>)
 80034ec:	441a      	add	r2, r3
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	639a      	str	r2, [r3, #56]	; 0x38
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80034f6:	4914      	ldr	r1, [pc, #80]	; (8003548 <xTaskPriorityInherit+0x11c>)
 80034f8:	4613      	mov	r3, r2
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	4413      	add	r3, r2
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	440b      	add	r3, r1
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	1c59      	adds	r1, r3, #1
 8003506:	4810      	ldr	r0, [pc, #64]	; (8003548 <xTaskPriorityInherit+0x11c>)
 8003508:	4613      	mov	r3, r2
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	4413      	add	r3, r2
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	4403      	add	r3, r0
 8003512:	6019      	str	r1, [r3, #0]
 8003514:	e004      	b.n	8003520 <xTaskPriorityInherit+0xf4>
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003516:	4b0b      	ldr	r3, [pc, #44]	; (8003544 <xTaskPriorityInherit+0x118>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	651a      	str	r2, [r3, #80]	; 0x50
                xReturn = pdTRUE;
 8003520:	2301      	movs	r3, #1
 8003522:	617b      	str	r3, [r7, #20]
 8003524:	e008      	b.n	8003538 <xTaskPriorityInherit+0x10c>
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800352a:	4b06      	ldr	r3, [pc, #24]	; (8003544 <xTaskPriorityInherit+0x118>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003530:	429a      	cmp	r2, r3
 8003532:	d201      	bcs.n	8003538 <xTaskPriorityInherit+0x10c>
                    xReturn = pdTRUE;
 8003534:	2301      	movs	r3, #1
 8003536:	617b      	str	r3, [r7, #20]
        return xReturn;
 8003538:	697b      	ldr	r3, [r7, #20]
    }
 800353a:	4618      	mov	r0, r3
 800353c:	3718      	adds	r7, #24
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	20000040 	.word	0x20000040
 8003548:	20000044 	.word	0x20000044
 800354c:	2000051c 	.word	0x2000051c

08003550 <xTaskPriorityDisinherit>:
    {
 8003550:	b580      	push	{r7, lr}
 8003552:	b086      	sub	sp, #24
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 800355c:	2300      	movs	r3, #0
 800355e:	617b      	str	r3, [r7, #20]
        if( pxMutexHolder != NULL )
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d06f      	beq.n	8003646 <xTaskPriorityDisinherit+0xf6>
            configASSERT( pxTCB == pxCurrentTCB );
 8003566:	4b3a      	ldr	r3, [pc, #232]	; (8003650 <xTaskPriorityDisinherit+0x100>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	693a      	ldr	r2, [r7, #16]
 800356c:	429a      	cmp	r2, r3
 800356e:	d002      	beq.n	8003576 <xTaskPriorityDisinherit+0x26>
 8003570:	f001 fc11 	bl	8004d96 <ulSetInterruptMask>
 8003574:	e7fe      	b.n	8003574 <xTaskPriorityDisinherit+0x24>
            configASSERT( pxTCB->uxMutexesHeld );
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800357a:	2b00      	cmp	r3, #0
 800357c:	d102      	bne.n	8003584 <xTaskPriorityDisinherit+0x34>
 800357e:	f001 fc0a 	bl	8004d96 <ulSetInterruptMask>
 8003582:	e7fe      	b.n	8003582 <xTaskPriorityDisinherit+0x32>
            ( pxTCB->uxMutexesHeld )--;
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003588:	1e5a      	subs	r2, r3, #1
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	675a      	str	r2, [r3, #116]	; 0x74
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003596:	429a      	cmp	r2, r3
 8003598:	d055      	beq.n	8003646 <xTaskPriorityDisinherit+0xf6>
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d151      	bne.n	8003646 <xTaskPriorityDisinherit+0xf6>
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	3328      	adds	r3, #40	; 0x28
 80035a6:	4618      	mov	r0, r3
 80035a8:	f7fc fed0 	bl	800034c <uxListRemove>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	651a      	str	r2, [r3, #80]	; 0x50
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035b8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	63da      	str	r2, [r3, #60]	; 0x3c
                    prvAddTaskToReadyList( pxTCB );
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80035c4:	4b23      	ldr	r3, [pc, #140]	; (8003654 <xTaskPriorityDisinherit+0x104>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d903      	bls.n	80035d4 <xTaskPriorityDisinherit+0x84>
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035d0:	4a20      	ldr	r2, [pc, #128]	; (8003654 <xTaskPriorityDisinherit+0x104>)
 80035d2:	6013      	str	r3, [r2, #0]
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80035d8:	491f      	ldr	r1, [pc, #124]	; (8003658 <xTaskPriorityDisinherit+0x108>)
 80035da:	4613      	mov	r3, r2
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	4413      	add	r3, r2
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	440b      	add	r3, r1
 80035e4:	3304      	adds	r3, #4
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	60fb      	str	r3, [r7, #12]
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	68fa      	ldr	r2, [r7, #12]
 80035ee:	62da      	str	r2, [r3, #44]	; 0x2c
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	689a      	ldr	r2, [r3, #8]
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	631a      	str	r2, [r3, #48]	; 0x30
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	693a      	ldr	r2, [r7, #16]
 80035fe:	3228      	adds	r2, #40	; 0x28
 8003600:	605a      	str	r2, [r3, #4]
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	609a      	str	r2, [r3, #8]
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003610:	4613      	mov	r3, r2
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	4413      	add	r3, r2
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	4a0f      	ldr	r2, [pc, #60]	; (8003658 <xTaskPriorityDisinherit+0x108>)
 800361a:	441a      	add	r2, r3
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	639a      	str	r2, [r3, #56]	; 0x38
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003624:	490c      	ldr	r1, [pc, #48]	; (8003658 <xTaskPriorityDisinherit+0x108>)
 8003626:	4613      	mov	r3, r2
 8003628:	009b      	lsls	r3, r3, #2
 800362a:	4413      	add	r3, r2
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	440b      	add	r3, r1
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	1c59      	adds	r1, r3, #1
 8003634:	4808      	ldr	r0, [pc, #32]	; (8003658 <xTaskPriorityDisinherit+0x108>)
 8003636:	4613      	mov	r3, r2
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	4413      	add	r3, r2
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	4403      	add	r3, r0
 8003640:	6019      	str	r1, [r3, #0]
                    xReturn = pdTRUE;
 8003642:	2301      	movs	r3, #1
 8003644:	617b      	str	r3, [r7, #20]
        return xReturn;
 8003646:	697b      	ldr	r3, [r7, #20]
    }
 8003648:	4618      	mov	r0, r3
 800364a:	3718      	adds	r7, #24
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}
 8003650:	20000040 	.word	0x20000040
 8003654:	2000051c 	.word	0x2000051c
 8003658:	20000044 	.word	0x20000044

0800365c <vTaskPriorityDisinheritAfterTimeout>:
    {
 800365c:	b580      	push	{r7, lr}
 800365e:	b088      	sub	sp, #32
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
 8003664:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	61bb      	str	r3, [r7, #24]
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800366a:	2301      	movs	r3, #1
 800366c:	617b      	str	r3, [r7, #20]
        if( pxMutexHolder != NULL )
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2b00      	cmp	r3, #0
 8003672:	f000 8084 	beq.w	800377e <vTaskPriorityDisinheritAfterTimeout+0x122>
            configASSERT( pxTCB->uxMutexesHeld );
 8003676:	69bb      	ldr	r3, [r7, #24]
 8003678:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800367a:	2b00      	cmp	r3, #0
 800367c:	d102      	bne.n	8003684 <vTaskPriorityDisinheritAfterTimeout+0x28>
 800367e:	f001 fb8a 	bl	8004d96 <ulSetInterruptMask>
 8003682:	e7fe      	b.n	8003682 <vTaskPriorityDisinheritAfterTimeout+0x26>
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8003684:	69bb      	ldr	r3, [r7, #24]
 8003686:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003688:	683a      	ldr	r2, [r7, #0]
 800368a:	429a      	cmp	r2, r3
 800368c:	d902      	bls.n	8003694 <vTaskPriorityDisinheritAfterTimeout+0x38>
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	61fb      	str	r3, [r7, #28]
 8003692:	e002      	b.n	800369a <vTaskPriorityDisinheritAfterTimeout+0x3e>
                uxPriorityToUse = pxTCB->uxBasePriority;
 8003694:	69bb      	ldr	r3, [r7, #24]
 8003696:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003698:	61fb      	str	r3, [r7, #28]
            if( pxTCB->uxPriority != uxPriorityToUse )
 800369a:	69bb      	ldr	r3, [r7, #24]
 800369c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800369e:	69fa      	ldr	r2, [r7, #28]
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d06c      	beq.n	800377e <vTaskPriorityDisinheritAfterTimeout+0x122>
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80036a4:	69bb      	ldr	r3, [r7, #24]
 80036a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036a8:	697a      	ldr	r2, [r7, #20]
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d167      	bne.n	800377e <vTaskPriorityDisinheritAfterTimeout+0x122>
                    configASSERT( pxTCB != pxCurrentTCB );
 80036ae:	4b36      	ldr	r3, [pc, #216]	; (8003788 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	69ba      	ldr	r2, [r7, #24]
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d102      	bne.n	80036be <vTaskPriorityDisinheritAfterTimeout+0x62>
 80036b8:	f001 fb6d 	bl	8004d96 <ulSetInterruptMask>
 80036bc:	e7fe      	b.n	80036bc <vTaskPriorityDisinheritAfterTimeout+0x60>
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80036be:	69bb      	ldr	r3, [r7, #24]
 80036c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036c2:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 80036c4:	69bb      	ldr	r3, [r7, #24]
 80036c6:	69fa      	ldr	r2, [r7, #28]
 80036c8:	651a      	str	r2, [r3, #80]	; 0x50
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80036ca:	69bb      	ldr	r3, [r7, #24]
 80036cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	db04      	blt.n	80036dc <vTaskPriorityDisinheritAfterTimeout+0x80>
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036d2:	69fb      	ldr	r3, [r7, #28]
 80036d4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80036d8:	69bb      	ldr	r3, [r7, #24]
 80036da:	63da      	str	r2, [r3, #60]	; 0x3c
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80036dc:	69bb      	ldr	r3, [r7, #24]
 80036de:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80036e0:	693a      	ldr	r2, [r7, #16]
 80036e2:	4613      	mov	r3, r2
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	4413      	add	r3, r2
 80036e8:	009b      	lsls	r3, r3, #2
 80036ea:	4a28      	ldr	r2, [pc, #160]	; (800378c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 80036ec:	4413      	add	r3, r2
 80036ee:	4299      	cmp	r1, r3
 80036f0:	d145      	bne.n	800377e <vTaskPriorityDisinheritAfterTimeout+0x122>
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80036f2:	69bb      	ldr	r3, [r7, #24]
 80036f4:	3328      	adds	r3, #40	; 0x28
 80036f6:	4618      	mov	r0, r3
 80036f8:	f7fc fe28 	bl	800034c <uxListRemove>
                        prvAddTaskToReadyList( pxTCB );
 80036fc:	69bb      	ldr	r3, [r7, #24]
 80036fe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003700:	4b23      	ldr	r3, [pc, #140]	; (8003790 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	429a      	cmp	r2, r3
 8003706:	d903      	bls.n	8003710 <vTaskPriorityDisinheritAfterTimeout+0xb4>
 8003708:	69bb      	ldr	r3, [r7, #24]
 800370a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800370c:	4a20      	ldr	r2, [pc, #128]	; (8003790 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800370e:	6013      	str	r3, [r2, #0]
 8003710:	69bb      	ldr	r3, [r7, #24]
 8003712:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003714:	491d      	ldr	r1, [pc, #116]	; (800378c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8003716:	4613      	mov	r3, r2
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	4413      	add	r3, r2
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	440b      	add	r3, r1
 8003720:	3304      	adds	r3, #4
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	60fb      	str	r3, [r7, #12]
 8003726:	69bb      	ldr	r3, [r7, #24]
 8003728:	68fa      	ldr	r2, [r7, #12]
 800372a:	62da      	str	r2, [r3, #44]	; 0x2c
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	689a      	ldr	r2, [r3, #8]
 8003730:	69bb      	ldr	r3, [r7, #24]
 8003732:	631a      	str	r2, [r3, #48]	; 0x30
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	69ba      	ldr	r2, [r7, #24]
 800373a:	3228      	adds	r2, #40	; 0x28
 800373c:	605a      	str	r2, [r3, #4]
 800373e:	69bb      	ldr	r3, [r7, #24]
 8003740:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	609a      	str	r2, [r3, #8]
 8003748:	69bb      	ldr	r3, [r7, #24]
 800374a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800374c:	4613      	mov	r3, r2
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	4413      	add	r3, r2
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	4a0d      	ldr	r2, [pc, #52]	; (800378c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8003756:	441a      	add	r2, r3
 8003758:	69bb      	ldr	r3, [r7, #24]
 800375a:	639a      	str	r2, [r3, #56]	; 0x38
 800375c:	69bb      	ldr	r3, [r7, #24]
 800375e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003760:	490a      	ldr	r1, [pc, #40]	; (800378c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8003762:	4613      	mov	r3, r2
 8003764:	009b      	lsls	r3, r3, #2
 8003766:	4413      	add	r3, r2
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	440b      	add	r3, r1
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	1c59      	adds	r1, r3, #1
 8003770:	4806      	ldr	r0, [pc, #24]	; (800378c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8003772:	4613      	mov	r3, r2
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	4413      	add	r3, r2
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	4403      	add	r3, r0
 800377c:	6019      	str	r1, [r3, #0]
    }
 800377e:	bf00      	nop
 8003780:	3720      	adds	r7, #32
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
 8003786:	bf00      	nop
 8003788:	20000040 	.word	0x20000040
 800378c:	20000044 	.word	0x20000044
 8003790:	2000051c 	.word	0x2000051c

08003794 <uxTaskGetTaskNumber>:
    {
 8003794:	b480      	push	{r7}
 8003796:	b085      	sub	sp, #20
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
        if( xTask != NULL )
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d005      	beq.n	80037ae <uxTaskGetTaskNumber+0x1a>
            pxTCB = xTask;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	60bb      	str	r3, [r7, #8]
            uxReturn = pxTCB->uxTaskNumber;
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037aa:	60fb      	str	r3, [r7, #12]
 80037ac:	e001      	b.n	80037b2 <uxTaskGetTaskNumber+0x1e>
            uxReturn = 0U;
 80037ae:	2300      	movs	r3, #0
 80037b0:	60fb      	str	r3, [r7, #12]
        return uxReturn;
 80037b2:	68fb      	ldr	r3, [r7, #12]
    }
 80037b4:	4618      	mov	r0, r3
 80037b6:	3714      	adds	r7, #20
 80037b8:	46bd      	mov	sp, r7
 80037ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037be:	4770      	bx	lr

080037c0 <vTaskSetTaskNumber>:
    {
 80037c0:	b480      	push	{r7}
 80037c2:	b085      	sub	sp, #20
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	6039      	str	r1, [r7, #0]
        if( xTask != NULL )
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d004      	beq.n	80037da <vTaskSetTaskNumber+0x1a>
            pxTCB = xTask;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	60fb      	str	r3, [r7, #12]
            pxTCB->uxTaskNumber = uxHandle;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	683a      	ldr	r2, [r7, #0]
 80037d8:	66da      	str	r2, [r3, #108]	; 0x6c
    }
 80037da:	bf00      	nop
 80037dc:	3714      	adds	r7, #20
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr

080037e6 <pvTaskIncrementMutexHeldCount>:
    {
 80037e6:	b480      	push	{r7}
 80037e8:	af00      	add	r7, sp, #0
        if( pxCurrentTCB != NULL )
 80037ea:	4b08      	ldr	r3, [pc, #32]	; (800380c <pvTaskIncrementMutexHeldCount+0x26>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d004      	beq.n	80037fc <pvTaskIncrementMutexHeldCount+0x16>
            ( pxCurrentTCB->uxMutexesHeld )++;
 80037f2:	4b06      	ldr	r3, [pc, #24]	; (800380c <pvTaskIncrementMutexHeldCount+0x26>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80037f8:	3201      	adds	r2, #1
 80037fa:	675a      	str	r2, [r3, #116]	; 0x74
        return pxCurrentTCB;
 80037fc:	4b03      	ldr	r3, [pc, #12]	; (800380c <pvTaskIncrementMutexHeldCount+0x26>)
 80037fe:	681b      	ldr	r3, [r3, #0]
    }
 8003800:	4618      	mov	r0, r3
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr
 800380a:	bf00      	nop
 800380c:	20000040 	.word	0x20000040

08003810 <vTaskInternalSetTimeOutState>:
{
 8003810:	b480      	push	{r7}
 8003812:	b083      	sub	sp, #12
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003818:	4b06      	ldr	r3, [pc, #24]	; (8003834 <vTaskInternalSetTimeOutState+0x24>)
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003820:	4b05      	ldr	r3, [pc, #20]	; (8003838 <vTaskInternalSetTimeOutState+0x28>)
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	605a      	str	r2, [r3, #4]
}
 8003828:	bf00      	nop
 800382a:	370c      	adds	r7, #12
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr
 8003834:	2000052c 	.word	0x2000052c
 8003838:	20000518 	.word	0x20000518

0800383c <prvTaskIsTaskSuspended>:
    {
 800383c:	b580      	push	{r7, lr}
 800383e:	b084      	sub	sp, #16
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdFALSE;
 8003844:	2300      	movs	r3, #0
 8003846:	60fb      	str	r3, [r7, #12]
        const TCB_t * const pxTCB = xTask;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	60bb      	str	r3, [r7, #8]
        configASSERT( xTask );
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d102      	bne.n	8003858 <prvTaskIsTaskSuspended+0x1c>
 8003852:	f001 faa0 	bl	8004d96 <ulSetInterruptMask>
 8003856:	e7fe      	b.n	8003856 <prvTaskIsTaskSuspended+0x1a>
        if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003858:	68bb      	ldr	r3, [r7, #8]
 800385a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800385c:	4a09      	ldr	r2, [pc, #36]	; (8003884 <prvTaskIsTaskSuspended+0x48>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d10a      	bne.n	8003878 <prvTaskIsTaskSuspended+0x3c>
            if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003866:	4a08      	ldr	r2, [pc, #32]	; (8003888 <prvTaskIsTaskSuspended+0x4c>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d005      	beq.n	8003878 <prvTaskIsTaskSuspended+0x3c>
                if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003870:	2b00      	cmp	r3, #0
 8003872:	d101      	bne.n	8003878 <prvTaskIsTaskSuspended+0x3c>
                    xReturn = pdTRUE;
 8003874:	2301      	movs	r3, #1
 8003876:	60fb      	str	r3, [r7, #12]
        return xReturn;
 8003878:	68fb      	ldr	r3, [r7, #12]
    } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800387a:	4618      	mov	r0, r3
 800387c:	3710      	adds	r7, #16
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	20000500 	.word	0x20000500
 8003888:	200004d4 	.word	0x200004d4

0800388c <prvInitialiseTaskLists>:
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b082      	sub	sp, #8
 8003890:	af00      	add	r7, sp, #0
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003892:	2300      	movs	r3, #0
 8003894:	607b      	str	r3, [r7, #4]
 8003896:	e00c      	b.n	80038b2 <prvInitialiseTaskLists+0x26>
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003898:	687a      	ldr	r2, [r7, #4]
 800389a:	4613      	mov	r3, r2
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	4413      	add	r3, r2
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	4a12      	ldr	r2, [pc, #72]	; (80038ec <prvInitialiseTaskLists+0x60>)
 80038a4:	4413      	add	r3, r2
 80038a6:	4618      	mov	r0, r3
 80038a8:	f7fc fcc6 	bl	8000238 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	3301      	adds	r3, #1
 80038b0:	607b      	str	r3, [r7, #4]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2b37      	cmp	r3, #55	; 0x37
 80038b6:	d9ef      	bls.n	8003898 <prvInitialiseTaskLists+0xc>
    vListInitialise( &xDelayedTaskList1 );
 80038b8:	480d      	ldr	r0, [pc, #52]	; (80038f0 <prvInitialiseTaskLists+0x64>)
 80038ba:	f7fc fcbd 	bl	8000238 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80038be:	480d      	ldr	r0, [pc, #52]	; (80038f4 <prvInitialiseTaskLists+0x68>)
 80038c0:	f7fc fcba 	bl	8000238 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80038c4:	480c      	ldr	r0, [pc, #48]	; (80038f8 <prvInitialiseTaskLists+0x6c>)
 80038c6:	f7fc fcb7 	bl	8000238 <vListInitialise>
        vListInitialise( &xTasksWaitingTermination );
 80038ca:	480c      	ldr	r0, [pc, #48]	; (80038fc <prvInitialiseTaskLists+0x70>)
 80038cc:	f7fc fcb4 	bl	8000238 <vListInitialise>
        vListInitialise( &xSuspendedTaskList );
 80038d0:	480b      	ldr	r0, [pc, #44]	; (8003900 <prvInitialiseTaskLists+0x74>)
 80038d2:	f7fc fcb1 	bl	8000238 <vListInitialise>
    pxDelayedTaskList = &xDelayedTaskList1;
 80038d6:	4b0b      	ldr	r3, [pc, #44]	; (8003904 <prvInitialiseTaskLists+0x78>)
 80038d8:	4a05      	ldr	r2, [pc, #20]	; (80038f0 <prvInitialiseTaskLists+0x64>)
 80038da:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80038dc:	4b0a      	ldr	r3, [pc, #40]	; (8003908 <prvInitialiseTaskLists+0x7c>)
 80038de:	4a05      	ldr	r2, [pc, #20]	; (80038f4 <prvInitialiseTaskLists+0x68>)
 80038e0:	601a      	str	r2, [r3, #0]
}
 80038e2:	bf00      	nop
 80038e4:	3708      	adds	r7, #8
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	20000044 	.word	0x20000044
 80038f0:	200004a4 	.word	0x200004a4
 80038f4:	200004b8 	.word	0x200004b8
 80038f8:	200004d4 	.word	0x200004d4
 80038fc:	200004e8 	.word	0x200004e8
 8003900:	20000500 	.word	0x20000500
 8003904:	200004cc 	.word	0x200004cc
 8003908:	200004d0 	.word	0x200004d0

0800390c <prvIdleTask>:
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b082      	sub	sp, #8
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
        prvCheckTasksWaitingTermination();
 8003914:	f000 f831 	bl	800397a <prvCheckTasksWaitingTermination>
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003918:	4b03      	ldr	r3, [pc, #12]	; (8003928 <prvIdleTask+0x1c>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	2b01      	cmp	r3, #1
 800391e:	d9f9      	bls.n	8003914 <prvIdleTask+0x8>
                taskYIELD();
 8003920:	f001 f964 	bl	8004bec <vPortYield>
        prvCheckTasksWaitingTermination();
 8003924:	e7f6      	b.n	8003914 <prvIdleTask+0x8>
 8003926:	bf00      	nop
 8003928:	20000044 	.word	0x20000044

0800392c <prvDeleteTCB>:
    {
 800392c:	b580      	push	{r7, lr}
 800392e:	b082      	sub	sp, #8
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
            if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 800393a:	2b00      	cmp	r3, #0
 800393c:	d108      	bne.n	8003950 <prvDeleteTCB+0x24>
                vPortFreeStack( pxTCB->pxStack );
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003942:	4618      	mov	r0, r3
 8003944:	f001 fb7a 	bl	800503c <vPortFree>
                vPortFree( pxTCB );
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f001 fb77 	bl	800503c <vPortFree>
    }
 800394e:	e010      	b.n	8003972 <prvDeleteTCB+0x46>
            else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8003956:	2b01      	cmp	r3, #1
 8003958:	d103      	bne.n	8003962 <prvDeleteTCB+0x36>
                vPortFree( pxTCB );
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f001 fb6e 	bl	800503c <vPortFree>
    }
 8003960:	e007      	b.n	8003972 <prvDeleteTCB+0x46>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8003968:	2b02      	cmp	r3, #2
 800396a:	d002      	beq.n	8003972 <prvDeleteTCB+0x46>
 800396c:	f001 fa13 	bl	8004d96 <ulSetInterruptMask>
 8003970:	e7fe      	b.n	8003970 <prvDeleteTCB+0x44>
    }
 8003972:	bf00      	nop
 8003974:	3708      	adds	r7, #8
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}

0800397a <prvCheckTasksWaitingTermination>:
{
 800397a:	b580      	push	{r7, lr}
 800397c:	b082      	sub	sp, #8
 800397e:	af00      	add	r7, sp, #0
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003980:	e019      	b.n	80039b6 <prvCheckTasksWaitingTermination+0x3c>
            taskENTER_CRITICAL();
 8003982:	f001 f945 	bl	8004c10 <vPortEnterCritical>
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003986:	4b10      	ldr	r3, [pc, #64]	; (80039c8 <prvCheckTasksWaitingTermination+0x4e>)
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	3328      	adds	r3, #40	; 0x28
 8003992:	4618      	mov	r0, r3
 8003994:	f7fc fcda 	bl	800034c <uxListRemove>
                --uxCurrentNumberOfTasks;
 8003998:	4b0c      	ldr	r3, [pc, #48]	; (80039cc <prvCheckTasksWaitingTermination+0x52>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	3b01      	subs	r3, #1
 800399e:	4a0b      	ldr	r2, [pc, #44]	; (80039cc <prvCheckTasksWaitingTermination+0x52>)
 80039a0:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 80039a2:	4b0b      	ldr	r3, [pc, #44]	; (80039d0 <prvCheckTasksWaitingTermination+0x56>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	3b01      	subs	r3, #1
 80039a8:	4a09      	ldr	r2, [pc, #36]	; (80039d0 <prvCheckTasksWaitingTermination+0x56>)
 80039aa:	6013      	str	r3, [r2, #0]
            taskEXIT_CRITICAL();
 80039ac:	f001 f942 	bl	8004c34 <vPortExitCritical>
            prvDeleteTCB( pxTCB );
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	f7ff ffbb 	bl	800392c <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80039b6:	4b06      	ldr	r3, [pc, #24]	; (80039d0 <prvCheckTasksWaitingTermination+0x56>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d1e1      	bne.n	8003982 <prvCheckTasksWaitingTermination+0x8>
}
 80039be:	bf00      	nop
 80039c0:	bf00      	nop
 80039c2:	3708      	adds	r7, #8
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}
 80039c8:	200004e8 	.word	0x200004e8
 80039cc:	20000514 	.word	0x20000514
 80039d0:	200004fc 	.word	0x200004fc

080039d4 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b086      	sub	sp, #24
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
 80039dc:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80039de:	4b2f      	ldr	r3, [pc, #188]	; (8003a9c <prvAddCurrentTaskToDelayedList+0xc8>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80039e4:	4b2e      	ldr	r3, [pc, #184]	; (8003aa0 <prvAddCurrentTaskToDelayedList+0xcc>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	3328      	adds	r3, #40	; 0x28
 80039ea:	4618      	mov	r0, r3
 80039ec:	f7fc fcae 	bl	800034c <uxListRemove>
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039f6:	d125      	bne.n	8003a44 <prvAddCurrentTaskToDelayedList+0x70>
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d022      	beq.n	8003a44 <prvAddCurrentTaskToDelayedList+0x70>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80039fe:	4b29      	ldr	r3, [pc, #164]	; (8003aa4 <prvAddCurrentTaskToDelayedList+0xd0>)
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	613b      	str	r3, [r7, #16]
 8003a04:	4b26      	ldr	r3, [pc, #152]	; (8003aa0 <prvAddCurrentTaskToDelayedList+0xcc>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	693a      	ldr	r2, [r7, #16]
 8003a0a:	62da      	str	r2, [r3, #44]	; 0x2c
 8003a0c:	4b24      	ldr	r3, [pc, #144]	; (8003aa0 <prvAddCurrentTaskToDelayedList+0xcc>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	693a      	ldr	r2, [r7, #16]
 8003a12:	6892      	ldr	r2, [r2, #8]
 8003a14:	631a      	str	r2, [r3, #48]	; 0x30
 8003a16:	4b22      	ldr	r3, [pc, #136]	; (8003aa0 <prvAddCurrentTaskToDelayedList+0xcc>)
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	3228      	adds	r2, #40	; 0x28
 8003a20:	605a      	str	r2, [r3, #4]
 8003a22:	4b1f      	ldr	r3, [pc, #124]	; (8003aa0 <prvAddCurrentTaskToDelayedList+0xcc>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	609a      	str	r2, [r3, #8]
 8003a2e:	4b1c      	ldr	r3, [pc, #112]	; (8003aa0 <prvAddCurrentTaskToDelayedList+0xcc>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a1c      	ldr	r2, [pc, #112]	; (8003aa4 <prvAddCurrentTaskToDelayedList+0xd0>)
 8003a34:	639a      	str	r2, [r3, #56]	; 0x38
 8003a36:	4b1b      	ldr	r3, [pc, #108]	; (8003aa4 <prvAddCurrentTaskToDelayedList+0xd0>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	3301      	adds	r3, #1
 8003a3c:	4a19      	ldr	r2, [pc, #100]	; (8003aa4 <prvAddCurrentTaskToDelayedList+0xd0>)
 8003a3e:	6013      	str	r3, [r2, #0]
 8003a40:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003a42:	e026      	b.n	8003a92 <prvAddCurrentTaskToDelayedList+0xbe>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8003a44:	697a      	ldr	r2, [r7, #20]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4413      	add	r3, r2
 8003a4a:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003a4c:	4b14      	ldr	r3, [pc, #80]	; (8003aa0 <prvAddCurrentTaskToDelayedList+0xcc>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	68fa      	ldr	r2, [r7, #12]
 8003a52:	629a      	str	r2, [r3, #40]	; 0x28
            if( xTimeToWake < xConstTickCount )
 8003a54:	68fa      	ldr	r2, [r7, #12]
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d209      	bcs.n	8003a70 <prvAddCurrentTaskToDelayedList+0x9c>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a5c:	4b12      	ldr	r3, [pc, #72]	; (8003aa8 <prvAddCurrentTaskToDelayedList+0xd4>)
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	4b0f      	ldr	r3, [pc, #60]	; (8003aa0 <prvAddCurrentTaskToDelayedList+0xcc>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	3328      	adds	r3, #40	; 0x28
 8003a66:	4619      	mov	r1, r3
 8003a68:	4610      	mov	r0, r2
 8003a6a:	f7fc fc12 	bl	8000292 <vListInsert>
}
 8003a6e:	e010      	b.n	8003a92 <prvAddCurrentTaskToDelayedList+0xbe>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a70:	4b0e      	ldr	r3, [pc, #56]	; (8003aac <prvAddCurrentTaskToDelayedList+0xd8>)
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	4b0a      	ldr	r3, [pc, #40]	; (8003aa0 <prvAddCurrentTaskToDelayedList+0xcc>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	3328      	adds	r3, #40	; 0x28
 8003a7a:	4619      	mov	r1, r3
 8003a7c:	4610      	mov	r0, r2
 8003a7e:	f7fc fc08 	bl	8000292 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8003a82:	4b0b      	ldr	r3, [pc, #44]	; (8003ab0 <prvAddCurrentTaskToDelayedList+0xdc>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	68fa      	ldr	r2, [r7, #12]
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d202      	bcs.n	8003a92 <prvAddCurrentTaskToDelayedList+0xbe>
                    xNextTaskUnblockTime = xTimeToWake;
 8003a8c:	4a08      	ldr	r2, [pc, #32]	; (8003ab0 <prvAddCurrentTaskToDelayedList+0xdc>)
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	6013      	str	r3, [r2, #0]
}
 8003a92:	bf00      	nop
 8003a94:	3718      	adds	r7, #24
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	bf00      	nop
 8003a9c:	20000518 	.word	0x20000518
 8003aa0:	20000040 	.word	0x20000040
 8003aa4:	20000500 	.word	0x20000500
 8003aa8:	200004d0 	.word	0x200004d0
 8003aac:	200004cc 	.word	0x200004cc
 8003ab0:	20000534 	.word	0x20000534

08003ab4 <prvListTasksWithinSingleList>:
    {
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b08a      	sub	sp, #40	; 0x28
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	60f8      	str	r0, [r7, #12]
 8003abc:	60b9      	str	r1, [r7, #8]
 8003abe:	4613      	mov	r3, r2
 8003ac0:	71fb      	strb	r3, [r7, #7]
        UBaseType_t uxTask = 0;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	627b      	str	r3, [r7, #36]	; 0x24
        if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d03f      	beq.n	8003b4e <prvListTasksWithinSingleList+0x9a>
            listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	623b      	str	r3, [r7, #32]
 8003ad2:	6a3b      	ldr	r3, [r7, #32]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	685a      	ldr	r2, [r3, #4]
 8003ad8:	6a3b      	ldr	r3, [r7, #32]
 8003ada:	605a      	str	r2, [r3, #4]
 8003adc:	6a3b      	ldr	r3, [r7, #32]
 8003ade:	685a      	ldr	r2, [r3, #4]
 8003ae0:	6a3b      	ldr	r3, [r7, #32]
 8003ae2:	3308      	adds	r3, #8
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d104      	bne.n	8003af2 <prvListTasksWithinSingleList+0x3e>
 8003ae8:	6a3b      	ldr	r3, [r7, #32]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	685a      	ldr	r2, [r3, #4]
 8003aee:	6a3b      	ldr	r3, [r7, #32]
 8003af0:	605a      	str	r2, [r3, #4]
 8003af2:	6a3b      	ldr	r3, [r7, #32]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	61fb      	str	r3, [r7, #28]
                listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	61bb      	str	r3, [r7, #24]
 8003afe:	69bb      	ldr	r3, [r7, #24]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	685a      	ldr	r2, [r3, #4]
 8003b04:	69bb      	ldr	r3, [r7, #24]
 8003b06:	605a      	str	r2, [r3, #4]
 8003b08:	69bb      	ldr	r3, [r7, #24]
 8003b0a:	685a      	ldr	r2, [r3, #4]
 8003b0c:	69bb      	ldr	r3, [r7, #24]
 8003b0e:	3308      	adds	r3, #8
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d104      	bne.n	8003b1e <prvListTasksWithinSingleList+0x6a>
 8003b14:	69bb      	ldr	r3, [r7, #24]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	685a      	ldr	r2, [r3, #4]
 8003b1a:	69bb      	ldr	r3, [r7, #24]
 8003b1c:	605a      	str	r2, [r3, #4]
 8003b1e:	69bb      	ldr	r3, [r7, #24]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	68db      	ldr	r3, [r3, #12]
 8003b24:	617b      	str	r3, [r7, #20]
                vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 8003b26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b28:	4613      	mov	r3, r2
 8003b2a:	00db      	lsls	r3, r3, #3
 8003b2c:	4413      	add	r3, r2
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	461a      	mov	r2, r3
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	1899      	adds	r1, r3, r2
 8003b36:	79fb      	ldrb	r3, [r7, #7]
 8003b38:	2201      	movs	r2, #1
 8003b3a:	6978      	ldr	r0, [r7, #20]
 8003b3c:	f7fd ff96 	bl	8001a6c <vTaskGetInfo>
                uxTask++;
 8003b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b42:	3301      	adds	r3, #1
 8003b44:	627b      	str	r3, [r7, #36]	; 0x24
            } while( pxNextTCB != pxFirstTCB );
 8003b46:	697a      	ldr	r2, [r7, #20]
 8003b48:	69fb      	ldr	r3, [r7, #28]
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d1d5      	bne.n	8003afa <prvListTasksWithinSingleList+0x46>
        return uxTask;
 8003b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8003b50:	4618      	mov	r0, r3
 8003b52:	3728      	adds	r7, #40	; 0x28
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}

08003b58 <prvTaskCheckFreeStackSpace>:
    {
 8003b58:	b480      	push	{r7}
 8003b5a:	b085      	sub	sp, #20
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
        uint32_t ulCount = 0U;
 8003b60:	2300      	movs	r3, #0
 8003b62:	60fb      	str	r3, [r7, #12]
        while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8003b64:	e005      	b.n	8003b72 <prvTaskCheckFreeStackSpace+0x1a>
            pucStackByte -= portSTACK_GROWTH;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	3301      	adds	r3, #1
 8003b6a:	607b      	str	r3, [r7, #4]
            ulCount++;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	3301      	adds	r3, #1
 8003b70:	60fb      	str	r3, [r7, #12]
        while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	781b      	ldrb	r3, [r3, #0]
 8003b76:	2ba5      	cmp	r3, #165	; 0xa5
 8003b78:	d0f5      	beq.n	8003b66 <prvTaskCheckFreeStackSpace+0xe>
        ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	089b      	lsrs	r3, r3, #2
 8003b7e:	60fb      	str	r3, [r7, #12]
        return ( configSTACK_DEPTH_TYPE ) ulCount;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	b29b      	uxth	r3, r3
    }
 8003b84:	4618      	mov	r0, r3
 8003b86:	3714      	adds	r7, #20
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr

08003b90 <prvResetNextTaskUnblockTime>:
{
 8003b90:	b480      	push	{r7}
 8003b92:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b94:	4b0a      	ldr	r3, [pc, #40]	; (8003bc0 <prvResetNextTaskUnblockTime+0x30>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d104      	bne.n	8003ba8 <prvResetNextTaskUnblockTime+0x18>
        xNextTaskUnblockTime = portMAX_DELAY;
 8003b9e:	4b09      	ldr	r3, [pc, #36]	; (8003bc4 <prvResetNextTaskUnblockTime+0x34>)
 8003ba0:	f04f 32ff 	mov.w	r2, #4294967295
 8003ba4:	601a      	str	r2, [r3, #0]
}
 8003ba6:	e005      	b.n	8003bb4 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003ba8:	4b05      	ldr	r3, [pc, #20]	; (8003bc0 <prvResetNextTaskUnblockTime+0x30>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	68db      	ldr	r3, [r3, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a04      	ldr	r2, [pc, #16]	; (8003bc4 <prvResetNextTaskUnblockTime+0x34>)
 8003bb2:	6013      	str	r3, [r2, #0]
}
 8003bb4:	bf00      	nop
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr
 8003bbe:	bf00      	nop
 8003bc0:	200004cc 	.word	0x200004cc
 8003bc4:	20000534 	.word	0x20000534

08003bc8 <prvInitialiseNewTask>:
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b08a      	sub	sp, #40	; 0x28
 8003bcc:	af02      	add	r7, sp, #8
 8003bce:	60f8      	str	r0, [r7, #12]
 8003bd0:	60b9      	str	r1, [r7, #8]
 8003bd2:	607a      	str	r2, [r7, #4]
 8003bd4:	603b      	str	r3, [r7, #0]
        if( ( uxPriority & portPRIVILEGE_BIT ) != 0U )
 8003bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	da02      	bge.n	8003be2 <prvInitialiseNewTask+0x1a>
            xRunPrivileged = pdTRUE;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	61bb      	str	r3, [r7, #24]
 8003be0:	e001      	b.n	8003be6 <prvInitialiseNewTask+0x1e>
            xRunPrivileged = pdFALSE;
 8003be2:	2300      	movs	r3, #0
 8003be4:	61bb      	str	r3, [r7, #24]
        uxPriority &= ~portPRIVILEGE_BIT;
 8003be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003be8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003bec:	62bb      	str	r3, [r7, #40]	; 0x28
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bf0:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	009b      	lsls	r3, r3, #2
 8003bf6:	461a      	mov	r2, r3
 8003bf8:	21a5      	movs	r1, #165	; 0xa5
 8003bfa:	f006 f9cb 	bl	8009f94 <memset>
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003c08:	3b01      	subs	r3, #1
 8003c0a:	009b      	lsls	r3, r3, #2
 8003c0c:	4413      	add	r3, r2
 8003c0e:	617b      	str	r3, [r7, #20]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	f023 0307 	bic.w	r3, r3, #7
 8003c16:	617b      	str	r3, [r7, #20]
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	f003 0307 	and.w	r3, r3, #7
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d002      	beq.n	8003c28 <prvInitialiseNewTask+0x60>
 8003c22:	f001 f8b8 	bl	8004d96 <ulSetInterruptMask>
 8003c26:	e7fe      	b.n	8003c26 <prvInitialiseNewTask+0x5e>
    if( pcName != NULL )
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d01e      	beq.n	8003c6c <prvInitialiseNewTask+0xa4>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003c2e:	2300      	movs	r3, #0
 8003c30:	61fb      	str	r3, [r7, #28]
 8003c32:	e012      	b.n	8003c5a <prvInitialiseNewTask+0x92>
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003c34:	68ba      	ldr	r2, [r7, #8]
 8003c36:	69fb      	ldr	r3, [r7, #28]
 8003c38:	4413      	add	r3, r2
 8003c3a:	7819      	ldrb	r1, [r3, #0]
 8003c3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c3e:	69fb      	ldr	r3, [r7, #28]
 8003c40:	4413      	add	r3, r2
 8003c42:	3358      	adds	r3, #88	; 0x58
 8003c44:	460a      	mov	r2, r1
 8003c46:	701a      	strb	r2, [r3, #0]
            if( pcName[ x ] == ( char ) 0x00 )
 8003c48:	68ba      	ldr	r2, [r7, #8]
 8003c4a:	69fb      	ldr	r3, [r7, #28]
 8003c4c:	4413      	add	r3, r2
 8003c4e:	781b      	ldrb	r3, [r3, #0]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d006      	beq.n	8003c62 <prvInitialiseNewTask+0x9a>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003c54:	69fb      	ldr	r3, [r7, #28]
 8003c56:	3301      	adds	r3, #1
 8003c58:	61fb      	str	r3, [r7, #28]
 8003c5a:	69fb      	ldr	r3, [r7, #28]
 8003c5c:	2b0f      	cmp	r3, #15
 8003c5e:	d9e9      	bls.n	8003c34 <prvInitialiseNewTask+0x6c>
 8003c60:	e000      	b.n	8003c64 <prvInitialiseNewTask+0x9c>
                break;
 8003c62:	bf00      	nop
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c66:	2200      	movs	r2, #0
 8003c68:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8003c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c6e:	2b37      	cmp	r3, #55	; 0x37
 8003c70:	d902      	bls.n	8003c78 <prvInitialiseNewTask+0xb0>
 8003c72:	f001 f890 	bl	8004d96 <ulSetInterruptMask>
 8003c76:	e7fe      	b.n	8003c76 <prvInitialiseNewTask+0xae>
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c7a:	2b37      	cmp	r3, #55	; 0x37
 8003c7c:	d901      	bls.n	8003c82 <prvInitialiseNewTask+0xba>
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003c7e:	2337      	movs	r3, #55	; 0x37
 8003c80:	62bb      	str	r3, [r7, #40]	; 0x28
    pxNewTCB->uxPriority = uxPriority;
 8003c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c86:	651a      	str	r2, [r3, #80]	; 0x50
        pxNewTCB->uxBasePriority = uxPriority;
 8003c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c8c:	671a      	str	r2, [r3, #112]	; 0x70
    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c90:	3328      	adds	r3, #40	; 0x28
 8003c92:	4618      	mov	r0, r3
 8003c94:	f7fc faf0 	bl	8000278 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c9a:	333c      	adds	r3, #60	; 0x3c
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f7fc faeb 	bl	8000278 <vListInitialiseItem>
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ca4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ca6:	635a      	str	r2, [r3, #52]	; 0x34
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003caa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cb0:	63da      	str	r2, [r3, #60]	; 0x3c
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cb6:	649a      	str	r2, [r3, #72]	; 0x48
        vPortStoreTaskMPUSettings( &( pxNewTCB->xMPUSettings ), xRegions, pxNewTCB->pxStack, ulStackDepth );
 8003cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cba:	1d18      	adds	r0, r3, #4
 8003cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cbe:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003cc4:	f000 fdd8 	bl	8004878 <vPortStoreTaskMPUSettings>
                pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pvParameters, xRunPrivileged );
 8003cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cca:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003ccc:	69bb      	ldr	r3, [r7, #24]
 8003cce:	9300      	str	r3, [sp, #0]
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	68fa      	ldr	r2, [r7, #12]
 8003cd4:	6978      	ldr	r0, [r7, #20]
 8003cd6:	f000 fd07 	bl	80046e8 <pxPortInitialiseStack>
 8003cda:	4602      	mov	r2, r0
 8003cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cde:	601a      	str	r2, [r3, #0]
    if( pxCreatedTask != NULL )
 8003ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d002      	beq.n	8003cec <prvInitialiseNewTask+0x124>
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ce8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cea:	601a      	str	r2, [r3, #0]
}
 8003cec:	bf00      	nop
 8003cee:	3720      	adds	r7, #32
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}

08003cf4 <prvAddNewTaskToReadyList>:
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b084      	sub	sp, #16
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
    taskENTER_CRITICAL();
 8003cfc:	f000 ff88 	bl	8004c10 <vPortEnterCritical>
        uxCurrentNumberOfTasks++;
 8003d00:	4b3e      	ldr	r3, [pc, #248]	; (8003dfc <prvAddNewTaskToReadyList+0x108>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	3301      	adds	r3, #1
 8003d06:	4a3d      	ldr	r2, [pc, #244]	; (8003dfc <prvAddNewTaskToReadyList+0x108>)
 8003d08:	6013      	str	r3, [r2, #0]
        if( pxCurrentTCB == NULL )
 8003d0a:	4b3d      	ldr	r3, [pc, #244]	; (8003e00 <prvAddNewTaskToReadyList+0x10c>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d109      	bne.n	8003d26 <prvAddNewTaskToReadyList+0x32>
            pxCurrentTCB = pxNewTCB;
 8003d12:	4a3b      	ldr	r2, [pc, #236]	; (8003e00 <prvAddNewTaskToReadyList+0x10c>)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6013      	str	r3, [r2, #0]
            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003d18:	4b38      	ldr	r3, [pc, #224]	; (8003dfc <prvAddNewTaskToReadyList+0x108>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d110      	bne.n	8003d42 <prvAddNewTaskToReadyList+0x4e>
                prvInitialiseTaskLists();
 8003d20:	f7ff fdb4 	bl	800388c <prvInitialiseTaskLists>
 8003d24:	e00d      	b.n	8003d42 <prvAddNewTaskToReadyList+0x4e>
            if( xSchedulerRunning == pdFALSE )
 8003d26:	4b37      	ldr	r3, [pc, #220]	; (8003e04 <prvAddNewTaskToReadyList+0x110>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d109      	bne.n	8003d42 <prvAddNewTaskToReadyList+0x4e>
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003d2e:	4b34      	ldr	r3, [pc, #208]	; (8003e00 <prvAddNewTaskToReadyList+0x10c>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d802      	bhi.n	8003d42 <prvAddNewTaskToReadyList+0x4e>
                    pxCurrentTCB = pxNewTCB;
 8003d3c:	4a30      	ldr	r2, [pc, #192]	; (8003e00 <prvAddNewTaskToReadyList+0x10c>)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6013      	str	r3, [r2, #0]
        uxTaskNumber++;
 8003d42:	4b31      	ldr	r3, [pc, #196]	; (8003e08 <prvAddNewTaskToReadyList+0x114>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	3301      	adds	r3, #1
 8003d48:	4a2f      	ldr	r2, [pc, #188]	; (8003e08 <prvAddNewTaskToReadyList+0x114>)
 8003d4a:	6013      	str	r3, [r2, #0]
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003d4c:	4b2e      	ldr	r3, [pc, #184]	; (8003e08 <prvAddNewTaskToReadyList+0x114>)
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	669a      	str	r2, [r3, #104]	; 0x68
        prvAddTaskToReadyList( pxNewTCB );
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003d58:	4b2c      	ldr	r3, [pc, #176]	; (8003e0c <prvAddNewTaskToReadyList+0x118>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d903      	bls.n	8003d68 <prvAddNewTaskToReadyList+0x74>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d64:	4a29      	ldr	r2, [pc, #164]	; (8003e0c <prvAddNewTaskToReadyList+0x118>)
 8003d66:	6013      	str	r3, [r2, #0]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003d6c:	4928      	ldr	r1, [pc, #160]	; (8003e10 <prvAddNewTaskToReadyList+0x11c>)
 8003d6e:	4613      	mov	r3, r2
 8003d70:	009b      	lsls	r3, r3, #2
 8003d72:	4413      	add	r3, r2
 8003d74:	009b      	lsls	r3, r3, #2
 8003d76:	440b      	add	r3, r1
 8003d78:	3304      	adds	r3, #4
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	60fb      	str	r3, [r7, #12]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	68fa      	ldr	r2, [r7, #12]
 8003d82:	62da      	str	r2, [r3, #44]	; 0x2c
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	689a      	ldr	r2, [r3, #8]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	631a      	str	r2, [r3, #48]	; 0x30
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	687a      	ldr	r2, [r7, #4]
 8003d92:	3228      	adds	r2, #40	; 0x28
 8003d94:	605a      	str	r2, [r3, #4]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	609a      	str	r2, [r3, #8]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003da4:	4613      	mov	r3, r2
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	4413      	add	r3, r2
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	4a18      	ldr	r2, [pc, #96]	; (8003e10 <prvAddNewTaskToReadyList+0x11c>)
 8003dae:	441a      	add	r2, r3
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	639a      	str	r2, [r3, #56]	; 0x38
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003db8:	4915      	ldr	r1, [pc, #84]	; (8003e10 <prvAddNewTaskToReadyList+0x11c>)
 8003dba:	4613      	mov	r3, r2
 8003dbc:	009b      	lsls	r3, r3, #2
 8003dbe:	4413      	add	r3, r2
 8003dc0:	009b      	lsls	r3, r3, #2
 8003dc2:	440b      	add	r3, r1
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	1c59      	adds	r1, r3, #1
 8003dc8:	4811      	ldr	r0, [pc, #68]	; (8003e10 <prvAddNewTaskToReadyList+0x11c>)
 8003dca:	4613      	mov	r3, r2
 8003dcc:	009b      	lsls	r3, r3, #2
 8003dce:	4413      	add	r3, r2
 8003dd0:	009b      	lsls	r3, r3, #2
 8003dd2:	4403      	add	r3, r0
 8003dd4:	6019      	str	r1, [r3, #0]
    taskEXIT_CRITICAL();
 8003dd6:	f000 ff2d 	bl	8004c34 <vPortExitCritical>
    if( xSchedulerRunning != pdFALSE )
 8003dda:	4b0a      	ldr	r3, [pc, #40]	; (8003e04 <prvAddNewTaskToReadyList+0x110>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d008      	beq.n	8003df4 <prvAddNewTaskToReadyList+0x100>
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003de2:	4b07      	ldr	r3, [pc, #28]	; (8003e00 <prvAddNewTaskToReadyList+0x10c>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d201      	bcs.n	8003df4 <prvAddNewTaskToReadyList+0x100>
            taskYIELD_IF_USING_PREEMPTION();
 8003df0:	f000 fefc 	bl	8004bec <vPortYield>
}
 8003df4:	bf00      	nop
 8003df6:	3710      	adds	r7, #16
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}
 8003dfc:	20000514 	.word	0x20000514
 8003e00:	20000040 	.word	0x20000040
 8003e04:	20000520 	.word	0x20000520
 8003e08:	20000530 	.word	0x20000530
 8003e0c:	2000051c 	.word	0x2000051c
 8003e10:	20000044 	.word	0x20000044

08003e14 <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const BaseType_t xAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b088      	sub	sp, #32
 8003e18:	af02      	add	r7, sp, #8
 8003e1a:	60f8      	str	r0, [r7, #12]
 8003e1c:	60b9      	str	r1, [r7, #8]
 8003e1e:	607a      	str	r2, [r7, #4]
 8003e20:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8003e22:	202c      	movs	r0, #44	; 0x2c
 8003e24:	f001 f830 	bl	8004e88 <pvPortMalloc>
 8003e28:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d00d      	beq.n	8003e4c <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	2200      	movs	r2, #0
 8003e34:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, xAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	9301      	str	r3, [sp, #4]
 8003e3c:	6a3b      	ldr	r3, [r7, #32]
 8003e3e:	9300      	str	r3, [sp, #0]
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	68b9      	ldr	r1, [r7, #8]
 8003e46:	68f8      	ldr	r0, [r7, #12]
 8003e48:	f000 fc1e 	bl	8004688 <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 8003e4c:	697b      	ldr	r3, [r7, #20]
        }
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3718      	adds	r7, #24
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}

08003e56 <pvTimerGetTimerID>:
        return xReturn;
    } /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

    void * pvTimerGetTimerID( const TimerHandle_t xTimer )
    {
 8003e56:	b580      	push	{r7, lr}
 8003e58:	b084      	sub	sp, #16
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	6078      	str	r0, [r7, #4]
        Timer_t * const pxTimer = xTimer;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	60fb      	str	r3, [r7, #12]
        void * pvReturn;

        configASSERT( xTimer );
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d102      	bne.n	8003e6e <pvTimerGetTimerID+0x18>
 8003e68:	f000 ff95 	bl	8004d96 <ulSetInterruptMask>
 8003e6c:	e7fe      	b.n	8003e6c <pvTimerGetTimerID+0x16>

        taskENTER_CRITICAL();
 8003e6e:	f000 fecf 	bl	8004c10 <vPortEnterCritical>
        {
            pvReturn = pxTimer->pvTimerID;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	69db      	ldr	r3, [r3, #28]
 8003e76:	60bb      	str	r3, [r7, #8]
        }
        taskEXIT_CRITICAL();
 8003e78:	f000 fedc 	bl	8004c34 <vPortExitCritical>

        return pvReturn;
 8003e7c:	68bb      	ldr	r3, [r7, #8]
    }
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3710      	adds	r7, #16
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}

08003e86 <vTimerSetTimerID>:
/*-----------------------------------------------------------*/

    void vTimerSetTimerID( TimerHandle_t xTimer,
                           void * pvNewID )
    {
 8003e86:	b580      	push	{r7, lr}
 8003e88:	b084      	sub	sp, #16
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	6078      	str	r0, [r7, #4]
 8003e8e:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = xTimer;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	60fb      	str	r3, [r7, #12]

        configASSERT( xTimer );
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d102      	bne.n	8003ea0 <vTimerSetTimerID+0x1a>
 8003e9a:	f000 ff7c 	bl	8004d96 <ulSetInterruptMask>
 8003e9e:	e7fe      	b.n	8003e9e <vTimerSetTimerID+0x18>

        taskENTER_CRITICAL();
 8003ea0:	f000 feb6 	bl	8004c10 <vPortEnterCritical>
        {
            pxTimer->pvTimerID = pvNewID;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	683a      	ldr	r2, [r7, #0]
 8003ea8:	61da      	str	r2, [r3, #28]
        }
        taskEXIT_CRITICAL();
 8003eaa:	f000 fec3 	bl	8004c34 <vPortExitCritical>
    }
 8003eae:	bf00      	nop
 8003eb0:	3710      	adds	r7, #16
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}

08003eb6 <xTimerIsTimerActive>:
    {
 8003eb6:	b580      	push	{r7, lr}
 8003eb8:	b084      	sub	sp, #16
 8003eba:	af00      	add	r7, sp, #0
 8003ebc:	6078      	str	r0, [r7, #4]
        Timer_t * pxTimer = xTimer;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	60bb      	str	r3, [r7, #8]
        configASSERT( xTimer );
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d102      	bne.n	8003ece <xTimerIsTimerActive+0x18>
 8003ec8:	f000 ff65 	bl	8004d96 <ulSetInterruptMask>
 8003ecc:	e7fe      	b.n	8003ecc <xTimerIsTimerActive+0x16>
        taskENTER_CRITICAL();
 8003ece:	f000 fe9f 	bl	8004c10 <vPortEnterCritical>
            if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ed8:	f003 0301 	and.w	r3, r3, #1
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d102      	bne.n	8003ee6 <xTimerIsTimerActive+0x30>
                xReturn = pdFALSE;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	60fb      	str	r3, [r7, #12]
 8003ee4:	e001      	b.n	8003eea <xTimerIsTimerActive+0x34>
                xReturn = pdTRUE;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	60fb      	str	r3, [r7, #12]
        taskEXIT_CRITICAL();
 8003eea:	f000 fea3 	bl	8004c34 <vPortExitCritical>
        return xReturn;
 8003eee:	68fb      	ldr	r3, [r7, #12]
    } /*lint !e818 Can't be pointer to const due to the typedef. */
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3710      	adds	r7, #16
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}

08003ef8 <xTimerGetTimerDaemonTaskHandle>:
    {
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	af00      	add	r7, sp, #0
        configASSERT( ( xTimerTaskHandle != NULL ) );
 8003efc:	4b05      	ldr	r3, [pc, #20]	; (8003f14 <xTimerGetTimerDaemonTaskHandle+0x1c>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d102      	bne.n	8003f0a <xTimerGetTimerDaemonTaskHandle+0x12>
 8003f04:	f000 ff47 	bl	8004d96 <ulSetInterruptMask>
 8003f08:	e7fe      	b.n	8003f08 <xTimerGetTimerDaemonTaskHandle+0x10>
        return xTimerTaskHandle;
 8003f0a:	4b02      	ldr	r3, [pc, #8]	; (8003f14 <xTimerGetTimerDaemonTaskHandle+0x1c>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
    }
 8003f0e:	4618      	mov	r0, r3
 8003f10:	bd80      	pop	{r7, pc}
 8003f12:	bf00      	nop
 8003f14:	20000574 	.word	0x20000574

08003f18 <xTimerPendFunctionCallFromISR>:

        BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend,
                                                  void * pvParameter1,
                                                  uint32_t ulParameter2,
                                                  BaseType_t * pxHigherPriorityTaskWoken )
        {
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b08a      	sub	sp, #40	; 0x28
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	60f8      	str	r0, [r7, #12]
 8003f20:	60b9      	str	r1, [r7, #8]
 8003f22:	607a      	str	r2, [r7, #4]
 8003f24:	603b      	str	r3, [r7, #0]
            DaemonTaskMessage_t xMessage;
            BaseType_t xReturn;

            /* Complete the message with the function parameters and post it to the
             * daemon task. */
            xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8003f26:	f06f 0301 	mvn.w	r3, #1
 8003f2a:	617b      	str	r3, [r7, #20]
            xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	61bb      	str	r3, [r7, #24]
            xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	61fb      	str	r3, [r7, #28]
            xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	623b      	str	r3, [r7, #32]

            xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003f38:	4b06      	ldr	r3, [pc, #24]	; (8003f54 <xTimerPendFunctionCallFromISR+0x3c>)
 8003f3a:	6818      	ldr	r0, [r3, #0]
 8003f3c:	f107 0114 	add.w	r1, r7, #20
 8003f40:	2300      	movs	r3, #0
 8003f42:	683a      	ldr	r2, [r7, #0]
 8003f44:	f7fc fcf1 	bl	800092a <xQueueGenericSendFromISR>
 8003f48:	6278      	str	r0, [r7, #36]	; 0x24

            tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

            return xReturn;
 8003f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        }
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	3728      	adds	r7, #40	; 0x28
 8003f50:	46bd      	mov	sp, r7
 8003f52:	bd80      	pop	{r7, pc}
 8003f54:	20000570 	.word	0x20000570

08003f58 <xTimerPendFunctionCall>:

        BaseType_t xTimerPendFunctionCall( PendedFunction_t xFunctionToPend,
                                           void * pvParameter1,
                                           uint32_t ulParameter2,
                                           TickType_t xTicksToWait )
        {
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b08a      	sub	sp, #40	; 0x28
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	60f8      	str	r0, [r7, #12]
 8003f60:	60b9      	str	r1, [r7, #8]
 8003f62:	607a      	str	r2, [r7, #4]
 8003f64:	603b      	str	r3, [r7, #0]
            BaseType_t xReturn;

            /* This function can only be called after a timer has been created or
             * after the scheduler has been started because, until then, the timer
             * queue does not exist. */
            configASSERT( xTimerQueue );
 8003f66:	4b0f      	ldr	r3, [pc, #60]	; (8003fa4 <xTimerPendFunctionCall+0x4c>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d102      	bne.n	8003f74 <xTimerPendFunctionCall+0x1c>
 8003f6e:	f000 ff12 	bl	8004d96 <ulSetInterruptMask>
 8003f72:	e7fe      	b.n	8003f72 <xTimerPendFunctionCall+0x1a>

            /* Complete the message with the function parameters and post it to the
             * daemon task. */
            xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK;
 8003f74:	f04f 33ff 	mov.w	r3, #4294967295
 8003f78:	617b      	str	r3, [r7, #20]
            xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	61bb      	str	r3, [r7, #24]
            xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	61fb      	str	r3, [r7, #28]
            xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	623b      	str	r3, [r7, #32]

            xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003f86:	4b07      	ldr	r3, [pc, #28]	; (8003fa4 <xTimerPendFunctionCall+0x4c>)
 8003f88:	6818      	ldr	r0, [r3, #0]
 8003f8a:	f107 0114 	add.w	r1, r7, #20
 8003f8e:	2300      	movs	r3, #0
 8003f90:	683a      	ldr	r2, [r7, #0]
 8003f92:	f7fc fa05 	bl	80003a0 <xQueueGenericSend>
 8003f96:	6278      	str	r0, [r7, #36]	; 0x24

            tracePEND_FUNC_CALL( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

            return xReturn;
 8003f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        }
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3728      	adds	r7, #40	; 0x28
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}
 8003fa2:	bf00      	nop
 8003fa4:	20000570 	.word	0x20000570

08003fa8 <pcTimerGetName>:
    {
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b084      	sub	sp, #16
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
        Timer_t * pxTimer = xTimer;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	60fb      	str	r3, [r7, #12]
        configASSERT( xTimer );
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d102      	bne.n	8003fc0 <pcTimerGetName+0x18>
 8003fba:	f000 feec 	bl	8004d96 <ulSetInterruptMask>
 8003fbe:	e7fe      	b.n	8003fbe <pcTimerGetName+0x16>
        return pxTimer->pcTimerName;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
    }
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3710      	adds	r7, #16
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}

08003fcc <vTimerSetReloadMode>:
    {
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b084      	sub	sp, #16
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
 8003fd4:	6039      	str	r1, [r7, #0]
        Timer_t * pxTimer = xTimer;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	60fb      	str	r3, [r7, #12]
        configASSERT( xTimer );
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d102      	bne.n	8003fe6 <vTimerSetReloadMode+0x1a>
 8003fe0:	f000 fed9 	bl	8004d96 <ulSetInterruptMask>
 8003fe4:	e7fe      	b.n	8003fe4 <vTimerSetReloadMode+0x18>
        taskENTER_CRITICAL();
 8003fe6:	f000 fe13 	bl	8004c10 <vPortEnterCritical>
            if( xAutoReload != pdFALSE )
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d009      	beq.n	8004004 <vTimerSetReloadMode+0x38>
                pxTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ff6:	f043 0304 	orr.w	r3, r3, #4
 8003ffa:	b2da      	uxtb	r2, r3
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8004002:	e008      	b.n	8004016 <vTimerSetReloadMode+0x4a>
                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_AUTORELOAD );
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800400a:	f023 0304 	bic.w	r3, r3, #4
 800400e:	b2da      	uxtb	r2, r3
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        taskEXIT_CRITICAL();
 8004016:	f000 fe0d 	bl	8004c34 <vPortExitCritical>
    }
 800401a:	bf00      	nop
 800401c:	3710      	adds	r7, #16
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}

08004022 <xTimerGetReloadMode>:
    {
 8004022:	b580      	push	{r7, lr}
 8004024:	b084      	sub	sp, #16
 8004026:	af00      	add	r7, sp, #0
 8004028:	6078      	str	r0, [r7, #4]
        Timer_t * pxTimer = xTimer;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	60bb      	str	r3, [r7, #8]
        configASSERT( xTimer );
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d102      	bne.n	800403a <xTimerGetReloadMode+0x18>
 8004034:	f000 feaf 	bl	8004d96 <ulSetInterruptMask>
 8004038:	e7fe      	b.n	8004038 <xTimerGetReloadMode+0x16>
        taskENTER_CRITICAL();
 800403a:	f000 fde9 	bl	8004c10 <vPortEnterCritical>
            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) == 0 )
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004044:	f003 0304 	and.w	r3, r3, #4
 8004048:	2b00      	cmp	r3, #0
 800404a:	d102      	bne.n	8004052 <xTimerGetReloadMode+0x30>
                xReturn = pdFALSE;
 800404c:	2300      	movs	r3, #0
 800404e:	60fb      	str	r3, [r7, #12]
 8004050:	e001      	b.n	8004056 <xTimerGetReloadMode+0x34>
                xReturn = pdTRUE;
 8004052:	2301      	movs	r3, #1
 8004054:	60fb      	str	r3, [r7, #12]
        taskEXIT_CRITICAL();
 8004056:	f000 fded 	bl	8004c34 <vPortExitCritical>
        return xReturn;
 800405a:	68fb      	ldr	r3, [r7, #12]
    }
 800405c:	4618      	mov	r0, r3
 800405e:	3710      	adds	r7, #16
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}

08004064 <uxTimerGetReloadMode>:
    {
 8004064:	b580      	push	{r7, lr}
 8004066:	b082      	sub	sp, #8
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
        return ( UBaseType_t ) xTimerGetReloadMode( xTimer );
 800406c:	6878      	ldr	r0, [r7, #4]
 800406e:	f7ff ffd8 	bl	8004022 <xTimerGetReloadMode>
 8004072:	4603      	mov	r3, r0
    }
 8004074:	4618      	mov	r0, r3
 8004076:	3708      	adds	r7, #8
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}

0800407c <xTimerGetPeriod>:
    {
 800407c:	b580      	push	{r7, lr}
 800407e:	b084      	sub	sp, #16
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
        Timer_t * pxTimer = xTimer;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	60fb      	str	r3, [r7, #12]
        configASSERT( xTimer );
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d102      	bne.n	8004094 <xTimerGetPeriod+0x18>
 800408e:	f000 fe82 	bl	8004d96 <ulSetInterruptMask>
 8004092:	e7fe      	b.n	8004092 <xTimerGetPeriod+0x16>
        return pxTimer->xTimerPeriodInTicks;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	699b      	ldr	r3, [r3, #24]
    }
 8004098:	4618      	mov	r0, r3
 800409a:	3710      	adds	r7, #16
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}

080040a0 <xTimerGetExpiryTime>:
    {
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b084      	sub	sp, #16
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
        Timer_t * pxTimer = xTimer;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	60fb      	str	r3, [r7, #12]
        configASSERT( xTimer );
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d102      	bne.n	80040b8 <xTimerGetExpiryTime+0x18>
 80040b2:	f000 fe70 	bl	8004d96 <ulSetInterruptMask>
 80040b6:	e7fe      	b.n	80040b6 <xTimerGetExpiryTime+0x16>
        xReturn = listGET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ) );
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	60bb      	str	r3, [r7, #8]
        return xReturn;
 80040be:	68bb      	ldr	r3, [r7, #8]
    }
 80040c0:	4618      	mov	r0, r3
 80040c2:	3710      	adds	r7, #16
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}

080040c8 <xTimerCreateTimerTask>:
    {
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b084      	sub	sp, #16
 80040cc:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80040ce:	2300      	movs	r3, #0
 80040d0:	607b      	str	r3, [r7, #4]
        prvCheckForValidListAndQueue();
 80040d2:	f000 f885 	bl	80041e0 <prvCheckForValidListAndQueue>
        if( xTimerQueue != NULL )
 80040d6:	4b0d      	ldr	r3, [pc, #52]	; (800410c <xTimerCreateTimerTask+0x44>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d00a      	beq.n	80040f4 <xTimerCreateTimerTask+0x2c>
                xReturn = xTaskCreate( prvTimerTask,
 80040de:	4b0c      	ldr	r3, [pc, #48]	; (8004110 <xTimerCreateTimerTask+0x48>)
 80040e0:	9301      	str	r3, [sp, #4]
 80040e2:	4b0c      	ldr	r3, [pc, #48]	; (8004114 <xTimerCreateTimerTask+0x4c>)
 80040e4:	9300      	str	r3, [sp, #0]
 80040e6:	2300      	movs	r3, #0
 80040e8:	2280      	movs	r2, #128	; 0x80
 80040ea:	490b      	ldr	r1, [pc, #44]	; (8004118 <xTimerCreateTimerTask+0x50>)
 80040ec:	480b      	ldr	r0, [pc, #44]	; (800411c <xTimerCreateTimerTask+0x54>)
 80040ee:	f7fd fa87 	bl	8001600 <xTaskCreate>
 80040f2:	6078      	str	r0, [r7, #4]
        configASSERT( xReturn );
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d102      	bne.n	8004100 <xTimerCreateTimerTask+0x38>
 80040fa:	f000 fe4c 	bl	8004d96 <ulSetInterruptMask>
 80040fe:	e7fe      	b.n	80040fe <xTimerCreateTimerTask+0x36>
        return xReturn;
 8004100:	687b      	ldr	r3, [r7, #4]
    }
 8004102:	4618      	mov	r0, r3
 8004104:	3708      	adds	r7, #8
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}
 800410a:	bf00      	nop
 800410c:	20000570 	.word	0x20000570
 8004110:	20000574 	.word	0x20000574
 8004114:	80000002 	.word	0x80000002
 8004118:	0800a028 	.word	0x0800a028
 800411c:	0800424d 	.word	0x0800424d

08004120 <xTimerGenericCommand>:
    {
 8004120:	b580      	push	{r7, lr}
 8004122:	b08a      	sub	sp, #40	; 0x28
 8004124:	af00      	add	r7, sp, #0
 8004126:	60f8      	str	r0, [r7, #12]
 8004128:	60b9      	str	r1, [r7, #8]
 800412a:	607a      	str	r2, [r7, #4]
 800412c:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 800412e:	2300      	movs	r3, #0
 8004130:	627b      	str	r3, [r7, #36]	; 0x24
        configASSERT( xTimer );
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d102      	bne.n	800413e <xTimerGenericCommand+0x1e>
 8004138:	f000 fe2d 	bl	8004d96 <ulSetInterruptMask>
 800413c:	e7fe      	b.n	800413c <xTimerGenericCommand+0x1c>
        if( xTimerQueue != NULL )
 800413e:	4b1a      	ldr	r3, [pc, #104]	; (80041a8 <xTimerGenericCommand+0x88>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d02a      	beq.n	800419c <xTimerGenericCommand+0x7c>
            xMessage.xMessageID = xCommandID;
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	61fb      	str	r3, [r7, #28]
            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	2b05      	cmp	r3, #5
 8004156:	dc18      	bgt.n	800418a <xTimerGenericCommand+0x6a>
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004158:	f7ff f94a 	bl	80033f0 <xTaskGetSchedulerState>
 800415c:	4603      	mov	r3, r0
 800415e:	2b02      	cmp	r3, #2
 8004160:	d109      	bne.n	8004176 <xTimerGenericCommand+0x56>
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004162:	4b11      	ldr	r3, [pc, #68]	; (80041a8 <xTimerGenericCommand+0x88>)
 8004164:	6818      	ldr	r0, [r3, #0]
 8004166:	f107 0114 	add.w	r1, r7, #20
 800416a:	2300      	movs	r3, #0
 800416c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800416e:	f7fc f917 	bl	80003a0 <xQueueGenericSend>
 8004172:	6278      	str	r0, [r7, #36]	; 0x24
 8004174:	e012      	b.n	800419c <xTimerGenericCommand+0x7c>
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004176:	4b0c      	ldr	r3, [pc, #48]	; (80041a8 <xTimerGenericCommand+0x88>)
 8004178:	6818      	ldr	r0, [r3, #0]
 800417a:	f107 0114 	add.w	r1, r7, #20
 800417e:	2300      	movs	r3, #0
 8004180:	2200      	movs	r2, #0
 8004182:	f7fc f90d 	bl	80003a0 <xQueueGenericSend>
 8004186:	6278      	str	r0, [r7, #36]	; 0x24
 8004188:	e008      	b.n	800419c <xTimerGenericCommand+0x7c>
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800418a:	4b07      	ldr	r3, [pc, #28]	; (80041a8 <xTimerGenericCommand+0x88>)
 800418c:	6818      	ldr	r0, [r3, #0]
 800418e:	f107 0114 	add.w	r1, r7, #20
 8004192:	2300      	movs	r3, #0
 8004194:	683a      	ldr	r2, [r7, #0]
 8004196:	f7fc fbc8 	bl	800092a <xQueueGenericSendFromISR>
 800419a:	6278      	str	r0, [r7, #36]	; 0x24
        return xReturn;
 800419c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800419e:	4618      	mov	r0, r3
 80041a0:	3728      	adds	r7, #40	; 0x28
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	bf00      	nop
 80041a8:	20000570 	.word	0x20000570

080041ac <vTimerSetTimerNumber>:

    #if ( configUSE_TRACE_FACILITY == 1 )

        void vTimerSetTimerNumber( TimerHandle_t xTimer,
                                   UBaseType_t uxTimerNumber )
        {
 80041ac:	b480      	push	{r7}
 80041ae:	b083      	sub	sp, #12
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	6039      	str	r1, [r7, #0]
            ( ( Timer_t * ) xTimer )->uxTimerNumber = uxTimerNumber;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	683a      	ldr	r2, [r7, #0]
 80041ba:	625a      	str	r2, [r3, #36]	; 0x24
        }
 80041bc:	bf00      	nop
 80041be:	370c      	adds	r7, #12
 80041c0:	46bd      	mov	sp, r7
 80041c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c6:	4770      	bx	lr

080041c8 <uxTimerGetTimerNumber>:
        {
 80041c8:	b480      	push	{r7}
 80041ca:	b083      	sub	sp, #12
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
            return ( ( Timer_t * ) xTimer )->uxTimerNumber;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        }
 80041d4:	4618      	mov	r0, r3
 80041d6:	370c      	adds	r7, #12
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr

080041e0 <prvCheckForValidListAndQueue>:
    {
 80041e0:	b580      	push	{r7, lr}
 80041e2:	af00      	add	r7, sp, #0
        taskENTER_CRITICAL();
 80041e4:	f000 fd14 	bl	8004c10 <vPortEnterCritical>
            if( xTimerQueue == NULL )
 80041e8:	4b12      	ldr	r3, [pc, #72]	; (8004234 <prvCheckForValidListAndQueue+0x54>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d11d      	bne.n	800422c <prvCheckForValidListAndQueue+0x4c>
                vListInitialise( &xActiveTimerList1 );
 80041f0:	4811      	ldr	r0, [pc, #68]	; (8004238 <prvCheckForValidListAndQueue+0x58>)
 80041f2:	f7fc f821 	bl	8000238 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80041f6:	4811      	ldr	r0, [pc, #68]	; (800423c <prvCheckForValidListAndQueue+0x5c>)
 80041f8:	f7fc f81e 	bl	8000238 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80041fc:	4b10      	ldr	r3, [pc, #64]	; (8004240 <prvCheckForValidListAndQueue+0x60>)
 80041fe:	4a0e      	ldr	r2, [pc, #56]	; (8004238 <prvCheckForValidListAndQueue+0x58>)
 8004200:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8004202:	4b10      	ldr	r3, [pc, #64]	; (8004244 <prvCheckForValidListAndQueue+0x64>)
 8004204:	4a0d      	ldr	r2, [pc, #52]	; (800423c <prvCheckForValidListAndQueue+0x5c>)
 8004206:	601a      	str	r2, [r3, #0]
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004208:	2200      	movs	r2, #0
 800420a:	2110      	movs	r1, #16
 800420c:	200a      	movs	r0, #10
 800420e:	f7fc ff79 	bl	8001104 <xQueueGenericCreate>
 8004212:	4603      	mov	r3, r0
 8004214:	4a07      	ldr	r2, [pc, #28]	; (8004234 <prvCheckForValidListAndQueue+0x54>)
 8004216:	6013      	str	r3, [r2, #0]
                    if( xTimerQueue != NULL )
 8004218:	4b06      	ldr	r3, [pc, #24]	; (8004234 <prvCheckForValidListAndQueue+0x54>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d005      	beq.n	800422c <prvCheckForValidListAndQueue+0x4c>
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004220:	4b04      	ldr	r3, [pc, #16]	; (8004234 <prvCheckForValidListAndQueue+0x54>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4908      	ldr	r1, [pc, #32]	; (8004248 <prvCheckForValidListAndQueue+0x68>)
 8004226:	4618      	mov	r0, r3
 8004228:	f7fc fecf 	bl	8000fca <vQueueAddToRegistry>
        taskEXIT_CRITICAL();
 800422c:	f000 fd02 	bl	8004c34 <vPortExitCritical>
    }
 8004230:	bf00      	nop
 8004232:	bd80      	pop	{r7, pc}
 8004234:	20000570 	.word	0x20000570
 8004238:	20000540 	.word	0x20000540
 800423c:	20000554 	.word	0x20000554
 8004240:	20000568 	.word	0x20000568
 8004244:	2000056c 	.word	0x2000056c
 8004248:	0800a030 	.word	0x0800a030

0800424c <prvTimerTask>:
    {
 800424c:	b580      	push	{r7, lr}
 800424e:	b084      	sub	sp, #16
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004254:	f107 0308 	add.w	r3, r7, #8
 8004258:	4618      	mov	r0, r3
 800425a:	f000 f9ab 	bl	80045b4 <prvGetNextExpireTime>
 800425e:	60f8      	str	r0, [r7, #12]
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	4619      	mov	r1, r3
 8004264:	68f8      	ldr	r0, [r7, #12]
 8004266:	f000 f9c9 	bl	80045fc <prvProcessTimerOrBlockTask>
            prvProcessReceivedCommands();
 800426a:	f000 f801 	bl	8004270 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800426e:	e7f1      	b.n	8004254 <prvTimerTask+0x8>

08004270 <prvProcessReceivedCommands>:
    {
 8004270:	b580      	push	{r7, lr}
 8004272:	b088      	sub	sp, #32
 8004274:	af00      	add	r7, sp, #0
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004276:	e0b2      	b.n	80043de <prvProcessReceivedCommands+0x16e>
                if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2b00      	cmp	r3, #0
 800427c:	da10      	bge.n	80042a0 <prvProcessReceivedCommands+0x30>
                    const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800427e:	1d3b      	adds	r3, r7, #4
 8004280:	3304      	adds	r3, #4
 8004282:	61fb      	str	r3, [r7, #28]
                    configASSERT( pxCallback );
 8004284:	69fb      	ldr	r3, [r7, #28]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d102      	bne.n	8004290 <prvProcessReceivedCommands+0x20>
 800428a:	f000 fd84 	bl	8004d96 <ulSetInterruptMask>
 800428e:	e7fe      	b.n	800428e <prvProcessReceivedCommands+0x1e>
                    pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004290:	69fb      	ldr	r3, [r7, #28]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	69fa      	ldr	r2, [r7, #28]
 8004296:	6850      	ldr	r0, [r2, #4]
 8004298:	69fa      	ldr	r2, [r7, #28]
 800429a:	6892      	ldr	r2, [r2, #8]
 800429c:	4611      	mov	r1, r2
 800429e:	4798      	blx	r3
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	f2c0 809b 	blt.w	80043de <prvProcessReceivedCommands+0x16e>
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	61bb      	str	r3, [r7, #24]
                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80042ac:	69bb      	ldr	r3, [r7, #24]
 80042ae:	695b      	ldr	r3, [r3, #20]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d004      	beq.n	80042be <prvProcessReceivedCommands+0x4e>
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80042b4:	69bb      	ldr	r3, [r7, #24]
 80042b6:	3304      	adds	r3, #4
 80042b8:	4618      	mov	r0, r3
 80042ba:	f7fc f847 	bl	800034c <uxListRemove>
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80042be:	463b      	mov	r3, r7
 80042c0:	4618      	mov	r0, r3
 80042c2:	f000 f957 	bl	8004574 <prvSampleTimeNow>
 80042c6:	6178      	str	r0, [r7, #20]
                switch( xMessage.xMessageID )
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	3b01      	subs	r3, #1
 80042cc:	2b08      	cmp	r3, #8
 80042ce:	f200 8085 	bhi.w	80043dc <prvProcessReceivedCommands+0x16c>
 80042d2:	a201      	add	r2, pc, #4	; (adr r2, 80042d8 <prvProcessReceivedCommands+0x68>)
 80042d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042d8:	080042fd 	.word	0x080042fd
 80042dc:	080042fd 	.word	0x080042fd
 80042e0:	08004365 	.word	0x08004365
 80042e4:	08004379 	.word	0x08004379
 80042e8:	080043b3 	.word	0x080043b3
 80042ec:	080042fd 	.word	0x080042fd
 80042f0:	080042fd 	.word	0x080042fd
 80042f4:	08004365 	.word	0x08004365
 80042f8:	08004379 	.word	0x08004379
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80042fc:	69bb      	ldr	r3, [r7, #24]
 80042fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004302:	f043 0301 	orr.w	r3, r3, #1
 8004306:	b2da      	uxtb	r2, r3
 8004308:	69bb      	ldr	r3, [r7, #24]
 800430a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800430e:	68ba      	ldr	r2, [r7, #8]
 8004310:	69bb      	ldr	r3, [r7, #24]
 8004312:	699b      	ldr	r3, [r3, #24]
 8004314:	18d1      	adds	r1, r2, r3
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	697a      	ldr	r2, [r7, #20]
 800431a:	69b8      	ldr	r0, [r7, #24]
 800431c:	f000 f872 	bl	8004404 <prvInsertTimerInActiveList>
 8004320:	4603      	mov	r3, r0
 8004322:	2b00      	cmp	r3, #0
 8004324:	d05b      	beq.n	80043de <prvProcessReceivedCommands+0x16e>
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004326:	69bb      	ldr	r3, [r7, #24]
 8004328:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800432c:	f003 0304 	and.w	r3, r3, #4
 8004330:	2b00      	cmp	r3, #0
 8004332:	d009      	beq.n	8004348 <prvProcessReceivedCommands+0xd8>
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8004334:	68ba      	ldr	r2, [r7, #8]
 8004336:	69bb      	ldr	r3, [r7, #24]
 8004338:	699b      	ldr	r3, [r3, #24]
 800433a:	4413      	add	r3, r2
 800433c:	697a      	ldr	r2, [r7, #20]
 800433e:	4619      	mov	r1, r3
 8004340:	69b8      	ldr	r0, [r7, #24]
 8004342:	f000 f8a1 	bl	8004488 <prvReloadTimer>
 8004346:	e008      	b.n	800435a <prvProcessReceivedCommands+0xea>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004348:	69bb      	ldr	r3, [r7, #24]
 800434a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800434e:	f023 0301 	bic.w	r3, r3, #1
 8004352:	b2da      	uxtb	r2, r3
 8004354:	69bb      	ldr	r3, [r7, #24]
 8004356:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800435a:	69bb      	ldr	r3, [r7, #24]
 800435c:	6a1b      	ldr	r3, [r3, #32]
 800435e:	69b8      	ldr	r0, [r7, #24]
 8004360:	4798      	blx	r3
                        break;
 8004362:	e03c      	b.n	80043de <prvProcessReceivedCommands+0x16e>
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004364:	69bb      	ldr	r3, [r7, #24]
 8004366:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800436a:	f023 0301 	bic.w	r3, r3, #1
 800436e:	b2da      	uxtb	r2, r3
 8004370:	69bb      	ldr	r3, [r7, #24]
 8004372:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 8004376:	e032      	b.n	80043de <prvProcessReceivedCommands+0x16e>
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004378:	69bb      	ldr	r3, [r7, #24]
 800437a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800437e:	f043 0301 	orr.w	r3, r3, #1
 8004382:	b2da      	uxtb	r2, r3
 8004384:	69bb      	ldr	r3, [r7, #24]
 8004386:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800438a:	68ba      	ldr	r2, [r7, #8]
 800438c:	69bb      	ldr	r3, [r7, #24]
 800438e:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004390:	69bb      	ldr	r3, [r7, #24]
 8004392:	699b      	ldr	r3, [r3, #24]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d102      	bne.n	800439e <prvProcessReceivedCommands+0x12e>
 8004398:	f000 fcfd 	bl	8004d96 <ulSetInterruptMask>
 800439c:	e7fe      	b.n	800439c <prvProcessReceivedCommands+0x12c>
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800439e:	69bb      	ldr	r3, [r7, #24]
 80043a0:	699a      	ldr	r2, [r3, #24]
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	18d1      	adds	r1, r2, r3
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	697a      	ldr	r2, [r7, #20]
 80043aa:	69b8      	ldr	r0, [r7, #24]
 80043ac:	f000 f82a 	bl	8004404 <prvInsertTimerInActiveList>
                        break;
 80043b0:	e015      	b.n	80043de <prvProcessReceivedCommands+0x16e>
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80043b2:	69bb      	ldr	r3, [r7, #24]
 80043b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80043b8:	f003 0302 	and.w	r3, r3, #2
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d103      	bne.n	80043c8 <prvProcessReceivedCommands+0x158>
                                vPortFree( pxTimer );
 80043c0:	69b8      	ldr	r0, [r7, #24]
 80043c2:	f000 fe3b 	bl	800503c <vPortFree>
 80043c6:	e00a      	b.n	80043de <prvProcessReceivedCommands+0x16e>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80043c8:	69bb      	ldr	r3, [r7, #24]
 80043ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80043ce:	f023 0301 	bic.w	r3, r3, #1
 80043d2:	b2da      	uxtb	r2, r3
 80043d4:	69bb      	ldr	r3, [r7, #24]
 80043d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 80043da:	e000      	b.n	80043de <prvProcessReceivedCommands+0x16e>
                        break;
 80043dc:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80043de:	4b08      	ldr	r3, [pc, #32]	; (8004400 <prvProcessReceivedCommands+0x190>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	1d39      	adds	r1, r7, #4
 80043e4:	2200      	movs	r2, #0
 80043e6:	4618      	mov	r0, r3
 80043e8:	f7fc f99f 	bl	800072a <xQueueReceive>
 80043ec:	4603      	mov	r3, r0
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	f47f af42 	bne.w	8004278 <prvProcessReceivedCommands+0x8>
    }
 80043f4:	bf00      	nop
 80043f6:	bf00      	nop
 80043f8:	3720      	adds	r7, #32
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	bf00      	nop
 8004400:	20000570 	.word	0x20000570

08004404 <prvInsertTimerInActiveList>:
    {
 8004404:	b580      	push	{r7, lr}
 8004406:	b086      	sub	sp, #24
 8004408:	af00      	add	r7, sp, #0
 800440a:	60f8      	str	r0, [r7, #12]
 800440c:	60b9      	str	r1, [r7, #8]
 800440e:	607a      	str	r2, [r7, #4]
 8004410:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8004412:	2300      	movs	r3, #0
 8004414:	617b      	str	r3, [r7, #20]
        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	68ba      	ldr	r2, [r7, #8]
 800441a:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	68fa      	ldr	r2, [r7, #12]
 8004420:	611a      	str	r2, [r3, #16]
        if( xNextExpiryTime <= xTimeNow )
 8004422:	68ba      	ldr	r2, [r7, #8]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	429a      	cmp	r2, r3
 8004428:	d812      	bhi.n	8004450 <prvInsertTimerInActiveList+0x4c>
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800442a:	687a      	ldr	r2, [r7, #4]
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	1ad2      	subs	r2, r2, r3
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	699b      	ldr	r3, [r3, #24]
 8004434:	429a      	cmp	r2, r3
 8004436:	d302      	bcc.n	800443e <prvInsertTimerInActiveList+0x3a>
                xProcessTimerNow = pdTRUE;
 8004438:	2301      	movs	r3, #1
 800443a:	617b      	str	r3, [r7, #20]
 800443c:	e01b      	b.n	8004476 <prvInsertTimerInActiveList+0x72>
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800443e:	4b10      	ldr	r3, [pc, #64]	; (8004480 <prvInsertTimerInActiveList+0x7c>)
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	3304      	adds	r3, #4
 8004446:	4619      	mov	r1, r3
 8004448:	4610      	mov	r0, r2
 800444a:	f7fb ff22 	bl	8000292 <vListInsert>
 800444e:	e012      	b.n	8004476 <prvInsertTimerInActiveList+0x72>
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004450:	687a      	ldr	r2, [r7, #4]
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	429a      	cmp	r2, r3
 8004456:	d206      	bcs.n	8004466 <prvInsertTimerInActiveList+0x62>
 8004458:	68ba      	ldr	r2, [r7, #8]
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	429a      	cmp	r2, r3
 800445e:	d302      	bcc.n	8004466 <prvInsertTimerInActiveList+0x62>
                xProcessTimerNow = pdTRUE;
 8004460:	2301      	movs	r3, #1
 8004462:	617b      	str	r3, [r7, #20]
 8004464:	e007      	b.n	8004476 <prvInsertTimerInActiveList+0x72>
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004466:	4b07      	ldr	r3, [pc, #28]	; (8004484 <prvInsertTimerInActiveList+0x80>)
 8004468:	681a      	ldr	r2, [r3, #0]
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	3304      	adds	r3, #4
 800446e:	4619      	mov	r1, r3
 8004470:	4610      	mov	r0, r2
 8004472:	f7fb ff0e 	bl	8000292 <vListInsert>
        return xProcessTimerNow;
 8004476:	697b      	ldr	r3, [r7, #20]
    }
 8004478:	4618      	mov	r0, r3
 800447a:	3718      	adds	r7, #24
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}
 8004480:	2000056c 	.word	0x2000056c
 8004484:	20000568 	.word	0x20000568

08004488 <prvReloadTimer>:
    {
 8004488:	b580      	push	{r7, lr}
 800448a:	b084      	sub	sp, #16
 800448c:	af00      	add	r7, sp, #0
 800448e:	60f8      	str	r0, [r7, #12]
 8004490:	60b9      	str	r1, [r7, #8]
 8004492:	607a      	str	r2, [r7, #4]
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004494:	e008      	b.n	80044a8 <prvReloadTimer+0x20>
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	699b      	ldr	r3, [r3, #24]
 800449a:	68ba      	ldr	r2, [r7, #8]
 800449c:	4413      	add	r3, r2
 800449e:	60bb      	str	r3, [r7, #8]
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	6a1b      	ldr	r3, [r3, #32]
 80044a4:	68f8      	ldr	r0, [r7, #12]
 80044a6:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	699a      	ldr	r2, [r3, #24]
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	18d1      	adds	r1, r2, r3
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	68f8      	ldr	r0, [r7, #12]
 80044b6:	f7ff ffa5 	bl	8004404 <prvInsertTimerInActiveList>
 80044ba:	4603      	mov	r3, r0
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d1ea      	bne.n	8004496 <prvReloadTimer+0xe>
    }
 80044c0:	bf00      	nop
 80044c2:	bf00      	nop
 80044c4:	3710      	adds	r7, #16
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}

080044ca <prvProcessExpiredTimer>:
    {
 80044ca:	b580      	push	{r7, lr}
 80044cc:	b084      	sub	sp, #16
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	6078      	str	r0, [r7, #4]
 80044d2:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80044d4:	4b13      	ldr	r3, [pc, #76]	; (8004524 <prvProcessExpiredTimer+0x5a>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	68db      	ldr	r3, [r3, #12]
 80044da:	68db      	ldr	r3, [r3, #12]
 80044dc:	60fb      	str	r3, [r7, #12]
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	3304      	adds	r3, #4
 80044e2:	4618      	mov	r0, r3
 80044e4:	f7fb ff32 	bl	800034c <uxListRemove>
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80044ee:	f003 0304 	and.w	r3, r3, #4
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d005      	beq.n	8004502 <prvProcessExpiredTimer+0x38>
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 80044f6:	683a      	ldr	r2, [r7, #0]
 80044f8:	6879      	ldr	r1, [r7, #4]
 80044fa:	68f8      	ldr	r0, [r7, #12]
 80044fc:	f7ff ffc4 	bl	8004488 <prvReloadTimer>
 8004500:	e008      	b.n	8004514 <prvProcessExpiredTimer+0x4a>
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004508:	f023 0301 	bic.w	r3, r3, #1
 800450c:	b2da      	uxtb	r2, r3
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	6a1b      	ldr	r3, [r3, #32]
 8004518:	68f8      	ldr	r0, [r7, #12]
 800451a:	4798      	blx	r3
    }
 800451c:	bf00      	nop
 800451e:	3710      	adds	r7, #16
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}
 8004524:	20000568 	.word	0x20000568

08004528 <prvSwitchTimerLists>:
    {
 8004528:	b580      	push	{r7, lr}
 800452a:	b082      	sub	sp, #8
 800452c:	af00      	add	r7, sp, #0
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800452e:	e009      	b.n	8004544 <prvSwitchTimerLists+0x1c>
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004530:	4b0e      	ldr	r3, [pc, #56]	; (800456c <prvSwitchTimerLists+0x44>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	68db      	ldr	r3, [r3, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	603b      	str	r3, [r7, #0]
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 800453a:	f04f 31ff 	mov.w	r1, #4294967295
 800453e:	6838      	ldr	r0, [r7, #0]
 8004540:	f7ff ffc3 	bl	80044ca <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004544:	4b09      	ldr	r3, [pc, #36]	; (800456c <prvSwitchTimerLists+0x44>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d1f0      	bne.n	8004530 <prvSwitchTimerLists+0x8>
        pxTemp = pxCurrentTimerList;
 800454e:	4b07      	ldr	r3, [pc, #28]	; (800456c <prvSwitchTimerLists+0x44>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8004554:	4b06      	ldr	r3, [pc, #24]	; (8004570 <prvSwitchTimerLists+0x48>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a04      	ldr	r2, [pc, #16]	; (800456c <prvSwitchTimerLists+0x44>)
 800455a:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800455c:	4a04      	ldr	r2, [pc, #16]	; (8004570 <prvSwitchTimerLists+0x48>)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6013      	str	r3, [r2, #0]
    }
 8004562:	bf00      	nop
 8004564:	3708      	adds	r7, #8
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}
 800456a:	bf00      	nop
 800456c:	20000568 	.word	0x20000568
 8004570:	2000056c 	.word	0x2000056c

08004574 <prvSampleTimeNow>:
    {
 8004574:	b580      	push	{r7, lr}
 8004576:	b084      	sub	sp, #16
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
        xTimeNow = xTaskGetTickCount();
 800457c:	f7fd fdca 	bl	8002114 <xTaskGetTickCount>
 8004580:	60f8      	str	r0, [r7, #12]
        if( xTimeNow < xLastTime )
 8004582:	4b0b      	ldr	r3, [pc, #44]	; (80045b0 <prvSampleTimeNow+0x3c>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	68fa      	ldr	r2, [r7, #12]
 8004588:	429a      	cmp	r2, r3
 800458a:	d205      	bcs.n	8004598 <prvSampleTimeNow+0x24>
            prvSwitchTimerLists();
 800458c:	f7ff ffcc 	bl	8004528 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2201      	movs	r2, #1
 8004594:	601a      	str	r2, [r3, #0]
 8004596:	e002      	b.n	800459e <prvSampleTimeNow+0x2a>
            *pxTimerListsWereSwitched = pdFALSE;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2200      	movs	r2, #0
 800459c:	601a      	str	r2, [r3, #0]
        xLastTime = xTimeNow;
 800459e:	4a04      	ldr	r2, [pc, #16]	; (80045b0 <prvSampleTimeNow+0x3c>)
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	6013      	str	r3, [r2, #0]
        return xTimeNow;
 80045a4:	68fb      	ldr	r3, [r7, #12]
    }
 80045a6:	4618      	mov	r0, r3
 80045a8:	3710      	adds	r7, #16
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}
 80045ae:	bf00      	nop
 80045b0:	20000578 	.word	0x20000578

080045b4 <prvGetNextExpireTime>:
    {
 80045b4:	b480      	push	{r7}
 80045b6:	b085      	sub	sp, #20
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80045bc:	4b0e      	ldr	r3, [pc, #56]	; (80045f8 <prvGetNextExpireTime+0x44>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d101      	bne.n	80045ca <prvGetNextExpireTime+0x16>
 80045c6:	2201      	movs	r2, #1
 80045c8:	e000      	b.n	80045cc <prvGetNextExpireTime+0x18>
 80045ca:	2200      	movs	r2, #0
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	601a      	str	r2, [r3, #0]
        if( *pxListWasEmpty == pdFALSE )
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d105      	bne.n	80045e4 <prvGetNextExpireTime+0x30>
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80045d8:	4b07      	ldr	r3, [pc, #28]	; (80045f8 <prvGetNextExpireTime+0x44>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	68db      	ldr	r3, [r3, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	60fb      	str	r3, [r7, #12]
 80045e2:	e001      	b.n	80045e8 <prvGetNextExpireTime+0x34>
            xNextExpireTime = ( TickType_t ) 0U;
 80045e4:	2300      	movs	r3, #0
 80045e6:	60fb      	str	r3, [r7, #12]
        return xNextExpireTime;
 80045e8:	68fb      	ldr	r3, [r7, #12]
    }
 80045ea:	4618      	mov	r0, r3
 80045ec:	3714      	adds	r7, #20
 80045ee:	46bd      	mov	sp, r7
 80045f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f4:	4770      	bx	lr
 80045f6:	bf00      	nop
 80045f8:	20000568 	.word	0x20000568

080045fc <prvProcessTimerOrBlockTask>:
    {
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b084      	sub	sp, #16
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	6039      	str	r1, [r7, #0]
        vTaskSuspendAll();
 8004606:	f7fd fc89 	bl	8001f1c <vTaskSuspendAll>
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800460a:	f107 0308 	add.w	r3, r7, #8
 800460e:	4618      	mov	r0, r3
 8004610:	f7ff ffb0 	bl	8004574 <prvSampleTimeNow>
 8004614:	60f8      	str	r0, [r7, #12]
            if( xTimerListsWereSwitched == pdFALSE )
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d12a      	bne.n	8004672 <prvProcessTimerOrBlockTask+0x76>
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d10a      	bne.n	8004638 <prvProcessTimerOrBlockTask+0x3c>
 8004622:	687a      	ldr	r2, [r7, #4]
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	429a      	cmp	r2, r3
 8004628:	d806      	bhi.n	8004638 <prvProcessTimerOrBlockTask+0x3c>
                    ( void ) xTaskResumeAll();
 800462a:	f7fd fc85 	bl	8001f38 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800462e:	68f9      	ldr	r1, [r7, #12]
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f7ff ff4a 	bl	80044ca <prvProcessExpiredTimer>
    }
 8004636:	e01e      	b.n	8004676 <prvProcessTimerOrBlockTask+0x7a>
                    if( xListWasEmpty != pdFALSE )
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d008      	beq.n	8004650 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800463e:	4b10      	ldr	r3, [pc, #64]	; (8004680 <prvProcessTimerOrBlockTask+0x84>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d101      	bne.n	800464c <prvProcessTimerOrBlockTask+0x50>
 8004648:	2301      	movs	r3, #1
 800464a:	e000      	b.n	800464e <prvProcessTimerOrBlockTask+0x52>
 800464c:	2300      	movs	r3, #0
 800464e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004650:	4b0c      	ldr	r3, [pc, #48]	; (8004684 <prvProcessTimerOrBlockTask+0x88>)
 8004652:	6818      	ldr	r0, [r3, #0]
 8004654:	687a      	ldr	r2, [r7, #4]
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	1ad3      	subs	r3, r2, r3
 800465a:	683a      	ldr	r2, [r7, #0]
 800465c:	4619      	mov	r1, r3
 800465e:	f7fc fd97 	bl	8001190 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8004662:	f7fd fc69 	bl	8001f38 <xTaskResumeAll>
 8004666:	4603      	mov	r3, r0
 8004668:	2b00      	cmp	r3, #0
 800466a:	d104      	bne.n	8004676 <prvProcessTimerOrBlockTask+0x7a>
                        portYIELD_WITHIN_API();
 800466c:	f000 fabe 	bl	8004bec <vPortYield>
    }
 8004670:	e001      	b.n	8004676 <prvProcessTimerOrBlockTask+0x7a>
                ( void ) xTaskResumeAll();
 8004672:	f7fd fc61 	bl	8001f38 <xTaskResumeAll>
    }
 8004676:	bf00      	nop
 8004678:	3710      	adds	r7, #16
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}
 800467e:	bf00      	nop
 8004680:	2000056c 	.word	0x2000056c
 8004684:	20000570 	.word	0x20000570

08004688 <prvInitialiseNewTimer>:
    {
 8004688:	b580      	push	{r7, lr}
 800468a:	b084      	sub	sp, #16
 800468c:	af00      	add	r7, sp, #0
 800468e:	60f8      	str	r0, [r7, #12]
 8004690:	60b9      	str	r1, [r7, #8]
 8004692:	607a      	str	r2, [r7, #4]
 8004694:	603b      	str	r3, [r7, #0]
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d102      	bne.n	80046a2 <prvInitialiseNewTimer+0x1a>
 800469c:	f000 fb7b 	bl	8004d96 <ulSetInterruptMask>
 80046a0:	e7fe      	b.n	80046a0 <prvInitialiseNewTimer+0x18>
        prvCheckForValidListAndQueue();
 80046a2:	f7ff fd9d 	bl	80041e0 <prvCheckForValidListAndQueue>
        pxNewTimer->pcTimerName = pcTimerName;
 80046a6:	69fb      	ldr	r3, [r7, #28]
 80046a8:	68fa      	ldr	r2, [r7, #12]
 80046aa:	601a      	str	r2, [r3, #0]
        pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80046ac:	69fb      	ldr	r3, [r7, #28]
 80046ae:	68ba      	ldr	r2, [r7, #8]
 80046b0:	619a      	str	r2, [r3, #24]
        pxNewTimer->pvTimerID = pvTimerID;
 80046b2:	69fb      	ldr	r3, [r7, #28]
 80046b4:	683a      	ldr	r2, [r7, #0]
 80046b6:	61da      	str	r2, [r3, #28]
        pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80046b8:	69fb      	ldr	r3, [r7, #28]
 80046ba:	69ba      	ldr	r2, [r7, #24]
 80046bc:	621a      	str	r2, [r3, #32]
        vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80046be:	69fb      	ldr	r3, [r7, #28]
 80046c0:	3304      	adds	r3, #4
 80046c2:	4618      	mov	r0, r3
 80046c4:	f7fb fdd8 	bl	8000278 <vListInitialiseItem>
        if( xAutoReload != pdFALSE )
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d008      	beq.n	80046e0 <prvInitialiseNewTimer+0x58>
            pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80046ce:	69fb      	ldr	r3, [r7, #28]
 80046d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80046d4:	f043 0304 	orr.w	r3, r3, #4
 80046d8:	b2da      	uxtb	r2, r3
 80046da:	69fb      	ldr	r3, [r7, #28]
 80046dc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    }
 80046e0:	bf00      	nop
 80046e2:	3710      	adds	r7, #16
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}

080046e8 <pxPortInitialiseStack>:
                                         StackType_t * pxEndOfStack,
                                         TaskFunction_t pxCode,
                                         void * pvParameters ) /* PRIVILEGED_FUNCTION */
#endif /* configENABLE_MPU */
/* *INDENT-ON* */
{
 80046e8:	b480      	push	{r7}
 80046ea:	b085      	sub	sp, #20
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	60f8      	str	r0, [r7, #12]
 80046f0:	60b9      	str	r1, [r7, #8]
 80046f2:	607a      	str	r2, [r7, #4]
 80046f4:	603b      	str	r3, [r7, #0]
        }
        #endif /* configENABLE_TRUSTZONE */
    }
    #else /* portPRELOAD_REGISTERS */
    {
        pxTopOfStack--;                                          /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	3b04      	subs	r3, #4
 80046fa:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = portINITIAL_XPSR;                        /* xPSR */
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004702:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	3b04      	subs	r3, #4
 8004708:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) pxCode;                  /* PC */
 800470a:	687a      	ldr	r2, [r7, #4]
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	3b04      	subs	r3, #4
 8004714:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS; /* LR */
 8004716:	4a3f      	ldr	r2, [pc, #252]	; (8004814 <pxPortInitialiseStack+0x12c>)
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	3b04      	subs	r3, #4
 8004720:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x12121212UL;            /* R12 */
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	f04f 3212 	mov.w	r2, #303174162	; 0x12121212
 8004728:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	3b04      	subs	r3, #4
 800472e:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x03030303UL;            /* R3 */
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	f04f 3203 	mov.w	r2, #50529027	; 0x3030303
 8004736:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	3b04      	subs	r3, #4
 800473c:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x02020202UL;            /* R2 */
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	f04f 3202 	mov.w	r2, #33686018	; 0x2020202
 8004744:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	3b04      	subs	r3, #4
 800474a:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x01010101UL;            /* R1 */
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	f04f 3201 	mov.w	r2, #16843009	; 0x1010101
 8004752:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	3b04      	subs	r3, #4
 8004758:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) pvParameters;            /* R0 */
 800475a:	683a      	ldr	r2, [r7, #0]
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	3b04      	subs	r3, #4
 8004764:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x11111111UL;            /* R11 */
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 800476c:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	3b04      	subs	r3, #4
 8004772:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x10101010UL;            /* R10 */
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f04f 3210 	mov.w	r2, #269488144	; 0x10101010
 800477a:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	3b04      	subs	r3, #4
 8004780:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x09090909UL;            /* R09 */
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	f04f 3209 	mov.w	r2, #151587081	; 0x9090909
 8004788:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	3b04      	subs	r3, #4
 800478e:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x08080808UL;            /* R08 */
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	f04f 3208 	mov.w	r2, #134744072	; 0x8080808
 8004796:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	3b04      	subs	r3, #4
 800479c:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x07070707UL;            /* R07 */
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	f04f 3207 	mov.w	r2, #117901063	; 0x7070707
 80047a4:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	3b04      	subs	r3, #4
 80047aa:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x06060606UL;            /* R06 */
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f04f 3206 	mov.w	r2, #101058054	; 0x6060606
 80047b2:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	3b04      	subs	r3, #4
 80047b8:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x05050505UL;            /* R05 */
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	f04f 3205 	mov.w	r2, #84215045	; 0x5050505
 80047c0:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	3b04      	subs	r3, #4
 80047c6:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) 0x04040404UL;            /* R04 */
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	f04f 3204 	mov.w	r2, #67372036	; 0x4040404
 80047ce:	601a      	str	r2, [r3, #0]
        pxTopOfStack--;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	3b04      	subs	r3, #4
 80047d4:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = portINITIAL_EXC_RETURN;                  /* EXC_RETURN */
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	f06f 0243 	mvn.w	r2, #67	; 0x43
 80047dc:	601a      	str	r2, [r3, #0]

        #if ( configENABLE_MPU == 1 )
        {
            pxTopOfStack--;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	3b04      	subs	r3, #4
 80047e2:	60fb      	str	r3, [r7, #12]

            if( xRunPrivileged == pdTRUE )
 80047e4:	69bb      	ldr	r3, [r7, #24]
 80047e6:	2b01      	cmp	r3, #1
 80047e8:	d103      	bne.n	80047f2 <pxPortInitialiseStack+0x10a>
            {
                *pxTopOfStack = portINITIAL_CONTROL_PRIVILEGED; /* Slot used to hold this task's CONTROL value. */
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2202      	movs	r2, #2
 80047ee:	601a      	str	r2, [r3, #0]
 80047f0:	e002      	b.n	80047f8 <pxPortInitialiseStack+0x110>
            }
            else
            {
                *pxTopOfStack = portINITIAL_CONTROL_UNPRIVILEGED; /* Slot used to hold this task's CONTROL value. */
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2203      	movs	r2, #3
 80047f6:	601a      	str	r2, [r3, #0]
            }
        }
        #endif /* configENABLE_MPU */

        pxTopOfStack--;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	3b04      	subs	r3, #4
 80047fc:	60fb      	str	r3, [r7, #12]
        *pxTopOfStack = ( StackType_t ) pxEndOfStack; /* Slot used to hold this task's PSPLIM value. */
 80047fe:	68ba      	ldr	r2, [r7, #8]
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	601a      	str	r2, [r3, #0]
        }
        #endif /* configENABLE_TRUSTZONE */
    }
    #endif /* portPRELOAD_REGISTERS */

    return pxTopOfStack;
 8004804:	68fb      	ldr	r3, [r7, #12]
}
 8004806:	4618      	mov	r0, r3
 8004808:	3714      	adds	r7, #20
 800480a:	46bd      	mov	sp, r7
 800480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004810:	4770      	bx	lr
 8004812:	bf00      	nop
 8004814:	08009f61 	.word	0x08009f61

08004818 <xPortStartScheduler>:
/*-----------------------------------------------------------*/

BaseType_t xPortStartScheduler( void ) /* PRIVILEGED_FUNCTION */
{
 8004818:	b580      	push	{r7, lr}
 800481a:	af00      	add	r7, sp, #0
    /* Make PendSV, CallSV and SysTick the same priority as the kernel. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800481c:	4b0d      	ldr	r3, [pc, #52]	; (8004854 <xPortStartScheduler+0x3c>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a0c      	ldr	r2, [pc, #48]	; (8004854 <xPortStartScheduler+0x3c>)
 8004822:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004826:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004828:	4b0a      	ldr	r3, [pc, #40]	; (8004854 <xPortStartScheduler+0x3c>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a09      	ldr	r2, [pc, #36]	; (8004854 <xPortStartScheduler+0x3c>)
 800482e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004832:	6013      	str	r3, [r2, #0]

    #if ( configENABLE_MPU == 1 )
    {
        /* Setup the Memory Protection Unit (MPU). */
        prvSetupMPU();
 8004834:	f000 f92a 	bl	8004a8c <prvSetupMPU>
    }
    #endif /* configENABLE_MPU */

    /* Start the timer that generates the tick ISR. Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004838:	f000 f9b4 	bl	8004ba4 <vPortSetupTimerInterrupt>

    /* Initialize the critical nesting count ready for the first task. */
    ulCriticalNesting = 0;
 800483c:	4b06      	ldr	r3, [pc, #24]	; (8004858 <xPortStartScheduler+0x40>)
 800483e:	2200      	movs	r2, #0
 8004840:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    vStartFirstTask();
 8004842:	f000 fa98 	bl	8004d76 <vStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS. Call
     * vTaskSwitchContext() so link time optimization does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004846:	f7fe fd4b 	bl	80032e0 <vTaskSwitchContext>
    prvTaskExitError();
 800484a:	f005 fb89 	bl	8009f60 <prvTaskExitError>

    /* Should not get here. */
    return 0;
 800484e:	2300      	movs	r3, #0
}
 8004850:	4618      	mov	r0, r3
 8004852:	bd80      	pop	{r7, pc}
 8004854:	e000ed20 	.word	0xe000ed20
 8004858:	2000057c 	.word	0x2000057c

0800485c <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void ) /* PRIVILEGED_FUNCTION */
{
 800485c:	b580      	push	{r7, lr}
 800485e:	af00      	add	r7, sp, #0
    /* Not implemented in ports where there is nothing to return to.
     * Artificially force an assert. */
    configASSERT( ulCriticalNesting == 1000UL );
 8004860:	4b04      	ldr	r3, [pc, #16]	; (8004874 <vPortEndScheduler+0x18>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004868:	d002      	beq.n	8004870 <vPortEndScheduler+0x14>
 800486a:	f000 fa94 	bl	8004d96 <ulSetInterruptMask>
 800486e:	e7fe      	b.n	800486e <vPortEndScheduler+0x12>
}
 8004870:	bf00      	nop
 8004872:	bd80      	pop	{r7, pc}
 8004874:	2000057c 	.word	0x2000057c

08004878 <vPortStoreTaskMPUSettings>:
#if ( configENABLE_MPU == 1 )
    void vPortStoreTaskMPUSettings( xMPU_SETTINGS * xMPUSettings,
                                    const struct xMEMORY_REGION * const xRegions,
                                    StackType_t * pxBottomOfStack,
                                    uint32_t ulStackDepth )
    {
 8004878:	b480      	push	{r7}
 800487a:	b089      	sub	sp, #36	; 0x24
 800487c:	af00      	add	r7, sp, #0
 800487e:	60f8      	str	r0, [r7, #12]
 8004880:	60b9      	str	r1, [r7, #8]
 8004882:	607a      	str	r2, [r7, #4]
 8004884:	603b      	str	r3, [r7, #0]
        uint32_t ulRegionStartAddress, ulRegionEndAddress, ulRegionNumber;
        int32_t lIndex = 0;
 8004886:	2300      	movs	r3, #0
 8004888:	61bb      	str	r3, [r7, #24]
            extern uint32_t __privileged_sram_start__[];
            extern uint32_t __privileged_sram_end__[];
        #endif /* defined( __ARMCC_VERSION ) */

        /* Setup MAIR0. */
        xMPUSettings->ulMAIR0 = ( ( portMPU_NORMAL_MEMORY_BUFFERABLE_CACHEABLE << portMPU_MAIR_ATTR0_POS ) & portMPU_MAIR_ATTR0_MASK );
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	22ff      	movs	r2, #255	; 0xff
 800488e:	601a      	str	r2, [r3, #0]
        xMPUSettings->ulMAIR0 |= ( ( portMPU_DEVICE_MEMORY_nGnRE << portMPU_MAIR_ATTR1_POS ) & portMPU_MAIR_ATTR1_MASK );
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	601a      	str	r2, [r3, #0]

        /* This function is called automatically when the task is created - in
         * which case the stack region parameters will be valid.  At all other
         * times the stack parameters will not be valid and it is assumed that
         * the stack region has already been configured. */
        if( ulStackDepth > 0 )
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d028      	beq.n	80048f4 <vPortStoreTaskMPUSettings+0x7c>
        {
            ulRegionStartAddress = ( uint32_t ) pxBottomOfStack;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	617b      	str	r3, [r7, #20]
            ulRegionEndAddress = ( uint32_t ) pxBottomOfStack + ( ulStackDepth * ( uint32_t ) sizeof( StackType_t ) ) - 1;
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	009a      	lsls	r2, r3, #2
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	4413      	add	r3, r2
 80048ae:	3b01      	subs	r3, #1
 80048b0:	613b      	str	r3, [r7, #16]

            /* If the stack is within the privileged SRAM, do not protect it
             * using a separate MPU region. This is needed because privileged
             * SRAM is already protected using an MPU region and ARMv8-M does
             * not allow overlapping MPU regions. */
            if( ( ulRegionStartAddress >= ( uint32_t ) __privileged_sram_start__ ) &&
 80048b2:	4a74      	ldr	r2, [pc, #464]	; (8004a84 <vPortStoreTaskMPUSettings+0x20c>)
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d30a      	bcc.n	80048d0 <vPortStoreTaskMPUSettings+0x58>
                ( ulRegionEndAddress <= ( uint32_t ) __privileged_sram_end__ ) )
 80048ba:	4a73      	ldr	r2, [pc, #460]	; (8004a88 <vPortStoreTaskMPUSettings+0x210>)
            if( ( ulRegionStartAddress >= ( uint32_t ) __privileged_sram_start__ ) &&
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	4293      	cmp	r3, r2
 80048c0:	d806      	bhi.n	80048d0 <vPortStoreTaskMPUSettings+0x58>
            {
                xMPUSettings->xRegionsSettings[ 0 ].ulRBAR = 0;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2200      	movs	r2, #0
 80048c6:	605a      	str	r2, [r3, #4]
                xMPUSettings->xRegionsSettings[ 0 ].ulRLAR = 0;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2200      	movs	r2, #0
 80048cc:	609a      	str	r2, [r3, #8]
 80048ce:	e011      	b.n	80048f4 <vPortStoreTaskMPUSettings+0x7c>
            }
            else
            {
                /* Define the region that allows access to the stack. */
                ulRegionStartAddress &= portMPU_RBAR_ADDRESS_MASK;
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	f023 031f 	bic.w	r3, r3, #31
 80048d6:	617b      	str	r3, [r7, #20]
                ulRegionEndAddress &= portMPU_RLAR_ADDRESS_MASK;
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	f023 031f 	bic.w	r3, r3, #31
 80048de:	613b      	str	r3, [r7, #16]

                xMPUSettings->xRegionsSettings[ 0 ].ulRBAR = ( ulRegionStartAddress ) |
                                                             ( portMPU_REGION_NON_SHAREABLE ) |
                                                             ( portMPU_REGION_READ_WRITE ) |
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	f043 0203 	orr.w	r2, r3, #3
                xMPUSettings->xRegionsSettings[ 0 ].ulRBAR = ( ulRegionStartAddress ) |
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	605a      	str	r2, [r3, #4]
                                                             ( portMPU_REGION_EXECUTE_NEVER );

                xMPUSettings->xRegionsSettings[ 0 ].ulRLAR = ( ulRegionEndAddress ) |
                                                             ( portMPU_RLAR_ATTR_INDEX0 ) |
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	f043 0201 	orr.w	r2, r3, #1
                xMPUSettings->xRegionsSettings[ 0 ].ulRLAR = ( ulRegionEndAddress ) |
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	609a      	str	r2, [r3, #8]
                                                             ( portMPU_RLAR_REGION_ENABLE );
            }
        }

        /* User supplied configurable regions. */
        for( ulRegionNumber = 1; ulRegionNumber <= portNUM_CONFIGURABLE_REGIONS; ulRegionNumber++ )
 80048f4:	2301      	movs	r3, #1
 80048f6:	61fb      	str	r3, [r7, #28]
 80048f8:	e0b9      	b.n	8004a6e <vPortStoreTaskMPUSettings+0x1f6>
        {
            /* If xRegions is NULL i.e. the task has not specified any MPU
             * region, the else part ensures that all the configurable MPU
             * regions are invalidated. */
            if( ( xRegions != NULL ) && ( xRegions[ lIndex ].ulLengthInBytes > 0UL ) )
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	f000 80a4 	beq.w	8004a4a <vPortStoreTaskMPUSettings+0x1d2>
 8004902:	69ba      	ldr	r2, [r7, #24]
 8004904:	4613      	mov	r3, r2
 8004906:	005b      	lsls	r3, r3, #1
 8004908:	4413      	add	r3, r2
 800490a:	009b      	lsls	r3, r3, #2
 800490c:	461a      	mov	r2, r3
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	4413      	add	r3, r2
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	2b00      	cmp	r3, #0
 8004916:	f000 8098 	beq.w	8004a4a <vPortStoreTaskMPUSettings+0x1d2>
            {
                /* Translate the generic region definition contained in xRegions
                 * into the ARMv8 specific MPU settings that are then stored in
                 * xMPUSettings. */
                ulRegionStartAddress = ( ( uint32_t ) xRegions[ lIndex ].pvBaseAddress ) & portMPU_RBAR_ADDRESS_MASK;
 800491a:	69ba      	ldr	r2, [r7, #24]
 800491c:	4613      	mov	r3, r2
 800491e:	005b      	lsls	r3, r3, #1
 8004920:	4413      	add	r3, r2
 8004922:	009b      	lsls	r3, r3, #2
 8004924:	461a      	mov	r2, r3
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	4413      	add	r3, r2
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f023 031f 	bic.w	r3, r3, #31
 8004930:	617b      	str	r3, [r7, #20]
                ulRegionEndAddress = ( uint32_t ) xRegions[ lIndex ].pvBaseAddress + xRegions[ lIndex ].ulLengthInBytes - 1;
 8004932:	69ba      	ldr	r2, [r7, #24]
 8004934:	4613      	mov	r3, r2
 8004936:	005b      	lsls	r3, r3, #1
 8004938:	4413      	add	r3, r2
 800493a:	009b      	lsls	r3, r3, #2
 800493c:	461a      	mov	r2, r3
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	4413      	add	r3, r2
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4619      	mov	r1, r3
 8004946:	69ba      	ldr	r2, [r7, #24]
 8004948:	4613      	mov	r3, r2
 800494a:	005b      	lsls	r3, r3, #1
 800494c:	4413      	add	r3, r2
 800494e:	009b      	lsls	r3, r3, #2
 8004950:	461a      	mov	r2, r3
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	4413      	add	r3, r2
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	440b      	add	r3, r1
 800495a:	3b01      	subs	r3, #1
 800495c:	613b      	str	r3, [r7, #16]
                ulRegionEndAddress &= portMPU_RLAR_ADDRESS_MASK;
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	f023 031f 	bic.w	r3, r3, #31
 8004964:	613b      	str	r3, [r7, #16]

                /* Start address. */
                xMPUSettings->xRegionsSettings[ ulRegionNumber ].ulRBAR = ( ulRegionStartAddress ) |
 8004966:	68fa      	ldr	r2, [r7, #12]
 8004968:	69fb      	ldr	r3, [r7, #28]
 800496a:	00db      	lsls	r3, r3, #3
 800496c:	4413      	add	r3, r2
 800496e:	697a      	ldr	r2, [r7, #20]
 8004970:	605a      	str	r2, [r3, #4]
                                                                          ( portMPU_REGION_NON_SHAREABLE );

                /* RO/RW. */
                if( ( xRegions[ lIndex ].ulParameters & tskMPU_REGION_READ_ONLY ) != 0 )
 8004972:	69ba      	ldr	r2, [r7, #24]
 8004974:	4613      	mov	r3, r2
 8004976:	005b      	lsls	r3, r3, #1
 8004978:	4413      	add	r3, r2
 800497a:	009b      	lsls	r3, r3, #2
 800497c:	461a      	mov	r2, r3
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	4413      	add	r3, r2
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	f003 0301 	and.w	r3, r3, #1
 8004988:	2b00      	cmp	r3, #0
 800498a:	d00c      	beq.n	80049a6 <vPortStoreTaskMPUSettings+0x12e>
                {
                    xMPUSettings->xRegionsSettings[ ulRegionNumber ].ulRBAR |= ( portMPU_REGION_READ_ONLY );
 800498c:	68fa      	ldr	r2, [r7, #12]
 800498e:	69fb      	ldr	r3, [r7, #28]
 8004990:	00db      	lsls	r3, r3, #3
 8004992:	4413      	add	r3, r2
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	f043 0206 	orr.w	r2, r3, #6
 800499a:	68f9      	ldr	r1, [r7, #12]
 800499c:	69fb      	ldr	r3, [r7, #28]
 800499e:	00db      	lsls	r3, r3, #3
 80049a0:	440b      	add	r3, r1
 80049a2:	605a      	str	r2, [r3, #4]
 80049a4:	e00b      	b.n	80049be <vPortStoreTaskMPUSettings+0x146>
                }
                else
                {
                    xMPUSettings->xRegionsSettings[ ulRegionNumber ].ulRBAR |= ( portMPU_REGION_READ_WRITE );
 80049a6:	68fa      	ldr	r2, [r7, #12]
 80049a8:	69fb      	ldr	r3, [r7, #28]
 80049aa:	00db      	lsls	r3, r3, #3
 80049ac:	4413      	add	r3, r2
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	f043 0202 	orr.w	r2, r3, #2
 80049b4:	68f9      	ldr	r1, [r7, #12]
 80049b6:	69fb      	ldr	r3, [r7, #28]
 80049b8:	00db      	lsls	r3, r3, #3
 80049ba:	440b      	add	r3, r1
 80049bc:	605a      	str	r2, [r3, #4]
                }

                /* XN. */
                if( ( xRegions[ lIndex ].ulParameters & tskMPU_REGION_EXECUTE_NEVER ) != 0 )
 80049be:	69ba      	ldr	r2, [r7, #24]
 80049c0:	4613      	mov	r3, r2
 80049c2:	005b      	lsls	r3, r3, #1
 80049c4:	4413      	add	r3, r2
 80049c6:	009b      	lsls	r3, r3, #2
 80049c8:	461a      	mov	r2, r3
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	4413      	add	r3, r2
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	f003 0304 	and.w	r3, r3, #4
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d00b      	beq.n	80049f0 <vPortStoreTaskMPUSettings+0x178>
                {
                    xMPUSettings->xRegionsSettings[ ulRegionNumber ].ulRBAR |= ( portMPU_REGION_EXECUTE_NEVER );
 80049d8:	68fa      	ldr	r2, [r7, #12]
 80049da:	69fb      	ldr	r3, [r7, #28]
 80049dc:	00db      	lsls	r3, r3, #3
 80049de:	4413      	add	r3, r2
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	f043 0201 	orr.w	r2, r3, #1
 80049e6:	68f9      	ldr	r1, [r7, #12]
 80049e8:	69fb      	ldr	r3, [r7, #28]
 80049ea:	00db      	lsls	r3, r3, #3
 80049ec:	440b      	add	r3, r1
 80049ee:	605a      	str	r2, [r3, #4]
                }

                /* End Address. */
                xMPUSettings->xRegionsSettings[ ulRegionNumber ].ulRLAR = ( ulRegionEndAddress ) |
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	f043 0201 	orr.w	r2, r3, #1
 80049f6:	68f9      	ldr	r1, [r7, #12]
 80049f8:	69fb      	ldr	r3, [r7, #28]
 80049fa:	00db      	lsls	r3, r3, #3
 80049fc:	440b      	add	r3, r1
 80049fe:	609a      	str	r2, [r3, #8]
                                                                          ( portMPU_RLAR_REGION_ENABLE );

                /* Normal memory/ Device memory. */
                if( ( xRegions[ lIndex ].ulParameters & tskMPU_REGION_DEVICE_MEMORY ) != 0 )
 8004a00:	69ba      	ldr	r2, [r7, #24]
 8004a02:	4613      	mov	r3, r2
 8004a04:	005b      	lsls	r3, r3, #1
 8004a06:	4413      	add	r3, r2
 8004a08:	009b      	lsls	r3, r3, #2
 8004a0a:	461a      	mov	r2, r3
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	4413      	add	r3, r2
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	f003 0310 	and.w	r3, r3, #16
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d00c      	beq.n	8004a34 <vPortStoreTaskMPUSettings+0x1bc>
                {
                    /* Attr1 in MAIR0 is configured as device memory. */
                    xMPUSettings->xRegionsSettings[ ulRegionNumber ].ulRLAR |= portMPU_RLAR_ATTR_INDEX1;
 8004a1a:	68fa      	ldr	r2, [r7, #12]
 8004a1c:	69fb      	ldr	r3, [r7, #28]
 8004a1e:	00db      	lsls	r3, r3, #3
 8004a20:	4413      	add	r3, r2
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	f043 0202 	orr.w	r2, r3, #2
 8004a28:	68f9      	ldr	r1, [r7, #12]
 8004a2a:	69fb      	ldr	r3, [r7, #28]
 8004a2c:	00db      	lsls	r3, r3, #3
 8004a2e:	440b      	add	r3, r1
 8004a30:	609a      	str	r2, [r3, #8]
                if( ( xRegions[ lIndex ].ulParameters & tskMPU_REGION_DEVICE_MEMORY ) != 0 )
 8004a32:	e016      	b.n	8004a62 <vPortStoreTaskMPUSettings+0x1ea>
                }
                else
                {
                    /* Attr0 in MAIR0 is configured as normal memory. */
                    xMPUSettings->xRegionsSettings[ ulRegionNumber ].ulRLAR |= portMPU_RLAR_ATTR_INDEX0;
 8004a34:	68fa      	ldr	r2, [r7, #12]
 8004a36:	69fb      	ldr	r3, [r7, #28]
 8004a38:	00db      	lsls	r3, r3, #3
 8004a3a:	4413      	add	r3, r2
 8004a3c:	689a      	ldr	r2, [r3, #8]
 8004a3e:	68f9      	ldr	r1, [r7, #12]
 8004a40:	69fb      	ldr	r3, [r7, #28]
 8004a42:	00db      	lsls	r3, r3, #3
 8004a44:	440b      	add	r3, r1
 8004a46:	609a      	str	r2, [r3, #8]
                if( ( xRegions[ lIndex ].ulParameters & tskMPU_REGION_DEVICE_MEMORY ) != 0 )
 8004a48:	e00b      	b.n	8004a62 <vPortStoreTaskMPUSettings+0x1ea>
                }
            }
            else
            {
                /* Invalidate the region. */
                xMPUSettings->xRegionsSettings[ ulRegionNumber ].ulRBAR = 0UL;
 8004a4a:	68fa      	ldr	r2, [r7, #12]
 8004a4c:	69fb      	ldr	r3, [r7, #28]
 8004a4e:	00db      	lsls	r3, r3, #3
 8004a50:	4413      	add	r3, r2
 8004a52:	2200      	movs	r2, #0
 8004a54:	605a      	str	r2, [r3, #4]
                xMPUSettings->xRegionsSettings[ ulRegionNumber ].ulRLAR = 0UL;
 8004a56:	68fa      	ldr	r2, [r7, #12]
 8004a58:	69fb      	ldr	r3, [r7, #28]
 8004a5a:	00db      	lsls	r3, r3, #3
 8004a5c:	4413      	add	r3, r2
 8004a5e:	2200      	movs	r2, #0
 8004a60:	609a      	str	r2, [r3, #8]
            }

            lIndex++;
 8004a62:	69bb      	ldr	r3, [r7, #24]
 8004a64:	3301      	adds	r3, #1
 8004a66:	61bb      	str	r3, [r7, #24]
        for( ulRegionNumber = 1; ulRegionNumber <= portNUM_CONFIGURABLE_REGIONS; ulRegionNumber++ )
 8004a68:	69fb      	ldr	r3, [r7, #28]
 8004a6a:	3301      	adds	r3, #1
 8004a6c:	61fb      	str	r3, [r7, #28]
 8004a6e:	69fb      	ldr	r3, [r7, #28]
 8004a70:	2b03      	cmp	r3, #3
 8004a72:	f67f af42 	bls.w	80048fa <vPortStoreTaskMPUSettings+0x82>
        }
    }
 8004a76:	bf00      	nop
 8004a78:	bf00      	nop
 8004a7a:	3724      	adds	r7, #36	; 0x24
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a82:	4770      	bx	lr
 8004a84:	20000000 	.word	0x20000000
 8004a88:	20008000 	.word	0x20008000

08004a8c <prvSetupMPU>:
    {
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	af00      	add	r7, sp, #0
        configASSERT( portMPU_TYPE_REG == portEXPECTED_MPU_TYPE_VALUE );
 8004a90:	4b35      	ldr	r3, [pc, #212]	; (8004b68 <prvSetupMPU+0xdc>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a98:	d002      	beq.n	8004aa0 <prvSetupMPU+0x14>
 8004a9a:	f000 f97c 	bl	8004d96 <ulSetInterruptMask>
 8004a9e:	e7fe      	b.n	8004a9e <prvSetupMPU+0x12>
        if( portMPU_TYPE_REG == portEXPECTED_MPU_TYPE_VALUE )
 8004aa0:	4b31      	ldr	r3, [pc, #196]	; (8004b68 <prvSetupMPU+0xdc>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004aa8:	d15b      	bne.n	8004b62 <prvSetupMPU+0xd6>
            portMPU_MAIR0_REG |= ( ( portMPU_NORMAL_MEMORY_BUFFERABLE_CACHEABLE << portMPU_MAIR_ATTR0_POS ) & portMPU_MAIR_ATTR0_MASK );
 8004aaa:	4b30      	ldr	r3, [pc, #192]	; (8004b6c <prvSetupMPU+0xe0>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a2f      	ldr	r2, [pc, #188]	; (8004b6c <prvSetupMPU+0xe0>)
 8004ab0:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 8004ab4:	6013      	str	r3, [r2, #0]
            portMPU_MAIR0_REG |= ( ( portMPU_DEVICE_MEMORY_nGnRE << portMPU_MAIR_ATTR1_POS ) & portMPU_MAIR_ATTR1_MASK );
 8004ab6:	4b2d      	ldr	r3, [pc, #180]	; (8004b6c <prvSetupMPU+0xe0>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a2c      	ldr	r2, [pc, #176]	; (8004b6c <prvSetupMPU+0xe0>)
 8004abc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004ac0:	6013      	str	r3, [r2, #0]
            portMPU_RNR_REG = portPRIVILEGED_FLASH_REGION;
 8004ac2:	4b2b      	ldr	r3, [pc, #172]	; (8004b70 <prvSetupMPU+0xe4>)
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	601a      	str	r2, [r3, #0]
            portMPU_RBAR_REG = ( ( ( uint32_t ) __privileged_functions_start__ ) & portMPU_RBAR_ADDRESS_MASK ) |
 8004ac8:	4b2a      	ldr	r3, [pc, #168]	; (8004b74 <prvSetupMPU+0xe8>)
 8004aca:	f023 031f 	bic.w	r3, r3, #31
 8004ace:	4a2a      	ldr	r2, [pc, #168]	; (8004b78 <prvSetupMPU+0xec>)
                               ( portMPU_REGION_NON_SHAREABLE ) |
 8004ad0:	f043 0304 	orr.w	r3, r3, #4
            portMPU_RBAR_REG = ( ( ( uint32_t ) __privileged_functions_start__ ) & portMPU_RBAR_ADDRESS_MASK ) |
 8004ad4:	6013      	str	r3, [r2, #0]
            portMPU_RLAR_REG = ( ( ( uint32_t ) __privileged_functions_end__ ) & portMPU_RLAR_ADDRESS_MASK ) |
 8004ad6:	4b29      	ldr	r3, [pc, #164]	; (8004b7c <prvSetupMPU+0xf0>)
 8004ad8:	f023 031f 	bic.w	r3, r3, #31
 8004adc:	4a28      	ldr	r2, [pc, #160]	; (8004b80 <prvSetupMPU+0xf4>)
                               ( portMPU_RLAR_ATTR_INDEX0 ) |
 8004ade:	f043 0301 	orr.w	r3, r3, #1
            portMPU_RLAR_REG = ( ( ( uint32_t ) __privileged_functions_end__ ) & portMPU_RLAR_ADDRESS_MASK ) |
 8004ae2:	6013      	str	r3, [r2, #0]
            portMPU_RNR_REG = portUNPRIVILEGED_FLASH_REGION;
 8004ae4:	4b22      	ldr	r3, [pc, #136]	; (8004b70 <prvSetupMPU+0xe4>)
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	601a      	str	r2, [r3, #0]
            portMPU_RBAR_REG = ( ( ( uint32_t ) __unprivileged_flash_start__ ) & portMPU_RBAR_ADDRESS_MASK ) |
 8004aea:	4b26      	ldr	r3, [pc, #152]	; (8004b84 <prvSetupMPU+0xf8>)
 8004aec:	f023 031f 	bic.w	r3, r3, #31
 8004af0:	4a21      	ldr	r2, [pc, #132]	; (8004b78 <prvSetupMPU+0xec>)
                               ( portMPU_REGION_NON_SHAREABLE ) |
 8004af2:	f043 0306 	orr.w	r3, r3, #6
            portMPU_RBAR_REG = ( ( ( uint32_t ) __unprivileged_flash_start__ ) & portMPU_RBAR_ADDRESS_MASK ) |
 8004af6:	6013      	str	r3, [r2, #0]
            portMPU_RLAR_REG = ( ( ( uint32_t ) __unprivileged_flash_end__ ) & portMPU_RLAR_ADDRESS_MASK ) |
 8004af8:	4b23      	ldr	r3, [pc, #140]	; (8004b88 <prvSetupMPU+0xfc>)
 8004afa:	f023 031f 	bic.w	r3, r3, #31
 8004afe:	4a20      	ldr	r2, [pc, #128]	; (8004b80 <prvSetupMPU+0xf4>)
                               ( portMPU_RLAR_ATTR_INDEX0 ) |
 8004b00:	f043 0301 	orr.w	r3, r3, #1
            portMPU_RLAR_REG = ( ( ( uint32_t ) __unprivileged_flash_end__ ) & portMPU_RLAR_ADDRESS_MASK ) |
 8004b04:	6013      	str	r3, [r2, #0]
            portMPU_RNR_REG = portUNPRIVILEGED_SYSCALLS_REGION;
 8004b06:	4b1a      	ldr	r3, [pc, #104]	; (8004b70 <prvSetupMPU+0xe4>)
 8004b08:	2202      	movs	r2, #2
 8004b0a:	601a      	str	r2, [r3, #0]
            portMPU_RBAR_REG = ( ( ( uint32_t ) __syscalls_flash_start__ ) & portMPU_RBAR_ADDRESS_MASK ) |
 8004b0c:	4b1f      	ldr	r3, [pc, #124]	; (8004b8c <prvSetupMPU+0x100>)
 8004b0e:	f023 031f 	bic.w	r3, r3, #31
 8004b12:	4a19      	ldr	r2, [pc, #100]	; (8004b78 <prvSetupMPU+0xec>)
                               ( portMPU_REGION_NON_SHAREABLE ) |
 8004b14:	f043 0306 	orr.w	r3, r3, #6
            portMPU_RBAR_REG = ( ( ( uint32_t ) __syscalls_flash_start__ ) & portMPU_RBAR_ADDRESS_MASK ) |
 8004b18:	6013      	str	r3, [r2, #0]
            portMPU_RLAR_REG = ( ( ( uint32_t ) __syscalls_flash_end__ ) & portMPU_RLAR_ADDRESS_MASK ) |
 8004b1a:	4b1d      	ldr	r3, [pc, #116]	; (8004b90 <prvSetupMPU+0x104>)
 8004b1c:	f023 031f 	bic.w	r3, r3, #31
 8004b20:	4a17      	ldr	r2, [pc, #92]	; (8004b80 <prvSetupMPU+0xf4>)
                               ( portMPU_RLAR_ATTR_INDEX0 ) |
 8004b22:	f043 0301 	orr.w	r3, r3, #1
            portMPU_RLAR_REG = ( ( ( uint32_t ) __syscalls_flash_end__ ) & portMPU_RLAR_ADDRESS_MASK ) |
 8004b26:	6013      	str	r3, [r2, #0]
            portMPU_RNR_REG = portPRIVILEGED_RAM_REGION;
 8004b28:	4b11      	ldr	r3, [pc, #68]	; (8004b70 <prvSetupMPU+0xe4>)
 8004b2a:	2203      	movs	r2, #3
 8004b2c:	601a      	str	r2, [r3, #0]
            portMPU_RBAR_REG = ( ( ( uint32_t ) __privileged_sram_start__ ) & portMPU_RBAR_ADDRESS_MASK ) |
 8004b2e:	4b19      	ldr	r3, [pc, #100]	; (8004b94 <prvSetupMPU+0x108>)
                               ( portMPU_REGION_NON_SHAREABLE ) |
 8004b30:	f023 031f 	bic.w	r3, r3, #31
            portMPU_RBAR_REG = ( ( ( uint32_t ) __privileged_sram_start__ ) & portMPU_RBAR_ADDRESS_MASK ) |
 8004b34:	4a10      	ldr	r2, [pc, #64]	; (8004b78 <prvSetupMPU+0xec>)
                               ( portMPU_REGION_PRIVILEGED_READ_WRITE ) |
 8004b36:	f043 0301 	orr.w	r3, r3, #1
            portMPU_RBAR_REG = ( ( ( uint32_t ) __privileged_sram_start__ ) & portMPU_RBAR_ADDRESS_MASK ) |
 8004b3a:	6013      	str	r3, [r2, #0]
            portMPU_RLAR_REG = ( ( ( uint32_t ) __privileged_sram_end__ ) & portMPU_RLAR_ADDRESS_MASK ) |
 8004b3c:	4b16      	ldr	r3, [pc, #88]	; (8004b98 <prvSetupMPU+0x10c>)
 8004b3e:	f023 031f 	bic.w	r3, r3, #31
 8004b42:	4a0f      	ldr	r2, [pc, #60]	; (8004b80 <prvSetupMPU+0xf4>)
                               ( portMPU_RLAR_ATTR_INDEX0 ) |
 8004b44:	f043 0301 	orr.w	r3, r3, #1
            portMPU_RLAR_REG = ( ( ( uint32_t ) __privileged_sram_end__ ) & portMPU_RLAR_ADDRESS_MASK ) |
 8004b48:	6013      	str	r3, [r2, #0]
            portSCB_SYS_HANDLER_CTRL_STATE_REG |= portSCB_MEM_FAULT_ENABLE_BIT;
 8004b4a:	4b14      	ldr	r3, [pc, #80]	; (8004b9c <prvSetupMPU+0x110>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a13      	ldr	r2, [pc, #76]	; (8004b9c <prvSetupMPU+0x110>)
 8004b50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b54:	6013      	str	r3, [r2, #0]
            portMPU_CTRL_REG |= ( portMPU_PRIV_BACKGROUND_ENABLE_BIT | portMPU_ENABLE_BIT );
 8004b56:	4b12      	ldr	r3, [pc, #72]	; (8004ba0 <prvSetupMPU+0x114>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a11      	ldr	r2, [pc, #68]	; (8004ba0 <prvSetupMPU+0x114>)
 8004b5c:	f043 0305 	orr.w	r3, r3, #5
 8004b60:	6013      	str	r3, [r2, #0]
    }
 8004b62:	bf00      	nop
 8004b64:	bd80      	pop	{r7, pc}
 8004b66:	bf00      	nop
 8004b68:	e000ed90 	.word	0xe000ed90
 8004b6c:	e000edc0 	.word	0xe000edc0
 8004b70:	e000ed98 	.word	0xe000ed98
 8004b74:	08000000 	.word	0x08000000
 8004b78:	e000ed9c 	.word	0xe000ed9c
 8004b7c:	08008000 	.word	0x08008000
 8004b80:	e000eda0 	.word	0xe000eda0
 8004b84:	08008f00 	.word	0x08008f00
 8004b88:	08200000 	.word	0x08200000
 8004b8c:	08008000 	.word	0x08008000
 8004b90:	08008000 	.word	0x08008000
 8004b94:	20000000 	.word	0x20000000
 8004b98:	20008000 	.word	0x20008000
 8004b9c:	e000ed24 	.word	0xe000ed24
 8004ba0:	e000ed94 	.word	0xe000ed94

08004ba4 <vPortSetupTimerInterrupt>:
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	af00      	add	r7, sp, #0
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004ba8:	4b0b      	ldr	r3, [pc, #44]	; (8004bd8 <vPortSetupTimerInterrupt+0x34>)
 8004baa:	2200      	movs	r2, #0
 8004bac:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004bae:	4b0b      	ldr	r3, [pc, #44]	; (8004bdc <vPortSetupTimerInterrupt+0x38>)
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004bb4:	4b0a      	ldr	r3, [pc, #40]	; (8004be0 <vPortSetupTimerInterrupt+0x3c>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a0a      	ldr	r2, [pc, #40]	; (8004be4 <vPortSetupTimerInterrupt+0x40>)
 8004bba:	fba2 2303 	umull	r2, r3, r2, r3
 8004bbe:	099b      	lsrs	r3, r3, #6
 8004bc0:	4a09      	ldr	r2, [pc, #36]	; (8004be8 <vPortSetupTimerInterrupt+0x44>)
 8004bc2:	3b01      	subs	r3, #1
 8004bc4:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 8004bc6:	4b04      	ldr	r3, [pc, #16]	; (8004bd8 <vPortSetupTimerInterrupt+0x34>)
 8004bc8:	2207      	movs	r2, #7
 8004bca:	601a      	str	r2, [r3, #0]
}
 8004bcc:	bf00      	nop
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd4:	4770      	bx	lr
 8004bd6:	bf00      	nop
 8004bd8:	e000e010 	.word	0xe000e010
 8004bdc:	e000e018 	.word	0xe000e018
 8004be0:	20008000 	.word	0x20008000
 8004be4:	10624dd3 	.word	0x10624dd3
 8004be8:	e000e014 	.word	0xe000e014

08004bec <vPortYield>:
{
 8004bec:	b480      	push	{r7}
 8004bee:	af00      	add	r7, sp, #0
    portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004bf0:	4b06      	ldr	r3, [pc, #24]	; (8004c0c <vPortYield+0x20>)
 8004bf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bf6:	601a      	str	r2, [r3, #0]
    __asm volatile ( "dsb" ::: "memory" );
 8004bf8:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 8004bfc:	f3bf 8f6f 	isb	sy
}
 8004c00:	bf00      	nop
 8004c02:	46bd      	mov	sp, r7
 8004c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c08:	4770      	bx	lr
 8004c0a:	bf00      	nop
 8004c0c:	e000ed04 	.word	0xe000ed04

08004c10 <vPortEnterCritical>:
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8004c14:	f000 f8bf 	bl	8004d96 <ulSetInterruptMask>
    ulCriticalNesting++;
 8004c18:	4b05      	ldr	r3, [pc, #20]	; (8004c30 <vPortEnterCritical+0x20>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	3301      	adds	r3, #1
 8004c1e:	4a04      	ldr	r2, [pc, #16]	; (8004c30 <vPortEnterCritical+0x20>)
 8004c20:	6013      	str	r3, [r2, #0]
    __asm volatile ( "dsb" ::: "memory" );
 8004c22:	f3bf 8f4f 	dsb	sy
    __asm volatile ( "isb" );
 8004c26:	f3bf 8f6f 	isb	sy
}
 8004c2a:	bf00      	nop
 8004c2c:	bd80      	pop	{r7, pc}
 8004c2e:	bf00      	nop
 8004c30:	2000057c 	.word	0x2000057c

08004c34 <vPortExitCritical>:
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	af00      	add	r7, sp, #0
    configASSERT( ulCriticalNesting );
 8004c38:	4b0a      	ldr	r3, [pc, #40]	; (8004c64 <vPortExitCritical+0x30>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d102      	bne.n	8004c46 <vPortExitCritical+0x12>
 8004c40:	f000 f8a9 	bl	8004d96 <ulSetInterruptMask>
 8004c44:	e7fe      	b.n	8004c44 <vPortExitCritical+0x10>
    ulCriticalNesting--;
 8004c46:	4b07      	ldr	r3, [pc, #28]	; (8004c64 <vPortExitCritical+0x30>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	3b01      	subs	r3, #1
 8004c4c:	4a05      	ldr	r2, [pc, #20]	; (8004c64 <vPortExitCritical+0x30>)
 8004c4e:	6013      	str	r3, [r2, #0]
    if( ulCriticalNesting == 0 )
 8004c50:	4b04      	ldr	r3, [pc, #16]	; (8004c64 <vPortExitCritical+0x30>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d102      	bne.n	8004c5e <vPortExitCritical+0x2a>
        portENABLE_INTERRUPTS();
 8004c58:	2000      	movs	r0, #0
 8004c5a:	f000 f8a9 	bl	8004db0 <vClearInterruptMask>
}
 8004c5e:	bf00      	nop
 8004c60:	bd80      	pop	{r7, pc}
 8004c62:	bf00      	nop
 8004c64:	2000057c 	.word	0x2000057c

08004c68 <xPortSysTickHandler>:
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b082      	sub	sp, #8
 8004c6c:	af00      	add	r7, sp, #0
    ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8004c6e:	f000 f892 	bl	8004d96 <ulSetInterruptMask>
 8004c72:	6078      	str	r0, [r7, #4]
        if( xTaskIncrementTick() != pdFALSE )
 8004c74:	f7fe f806 	bl	8002c84 <xTaskIncrementTick>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d003      	beq.n	8004c86 <xPortSysTickHandler+0x1e>
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004c7e:	4b05      	ldr	r3, [pc, #20]	; (8004c94 <xPortSysTickHandler+0x2c>)
 8004c80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c84:	601a      	str	r2, [r3, #0]
    portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8004c86:	6878      	ldr	r0, [r7, #4]
 8004c88:	f000 f892 	bl	8004db0 <vClearInterruptMask>
}
 8004c8c:	bf00      	nop
 8004c8e:	3708      	adds	r7, #8
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}
 8004c94:	e000ed04 	.word	0xe000ed04

08004c98 <vPortSVCHandler_C>:
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b084      	sub	sp, #16
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
    ulPC = pulCallerStackAddress[ 6 ];
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	699b      	ldr	r3, [r3, #24]
 8004ca4:	60fb      	str	r3, [r7, #12]
    ucSVCNumber = ( ( uint8_t * ) ulPC )[ -2 ];
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	3b02      	subs	r3, #2
 8004caa:	781b      	ldrb	r3, [r3, #0]
 8004cac:	72fb      	strb	r3, [r7, #11]
    switch( ucSVCNumber )
 8004cae:	7afb      	ldrb	r3, [r7, #11]
 8004cb0:	2b02      	cmp	r3, #2
 8004cb2:	d002      	beq.n	8004cba <vPortSVCHandler_C+0x22>
 8004cb4:	2b03      	cmp	r3, #3
 8004cb6:	d003      	beq.n	8004cc0 <vPortSVCHandler_C+0x28>
 8004cb8:	e00d      	b.n	8004cd6 <vPortSVCHandler_C+0x3e>
            vRestoreContextOfFirstTask();
 8004cba:	f000 f819 	bl	8004cf0 <vRestoreContextOfFirstTask>
            break;
 8004cbe:	e00e      	b.n	8004cde <vPortSVCHandler_C+0x46>
                    if( ( ulPC >= ( uint32_t ) __syscalls_flash_start__ ) &&
 8004cc0:	4a09      	ldr	r2, [pc, #36]	; (8004ce8 <vPortSVCHandler_C+0x50>)
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d309      	bcc.n	8004cdc <vPortSVCHandler_C+0x44>
                        ( ulPC <= ( uint32_t ) __syscalls_flash_end__ ) )
 8004cc8:	4a08      	ldr	r2, [pc, #32]	; (8004cec <vPortSVCHandler_C+0x54>)
                    if( ( ulPC >= ( uint32_t ) __syscalls_flash_start__ ) &&
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d805      	bhi.n	8004cdc <vPortSVCHandler_C+0x44>
                        vRaisePrivilege();
 8004cd0:	f000 f849 	bl	8004d66 <vRaisePrivilege>
                    break;
 8004cd4:	e002      	b.n	8004cdc <vPortSVCHandler_C+0x44>
            configASSERT( pdFALSE );
 8004cd6:	f000 f85e 	bl	8004d96 <ulSetInterruptMask>
 8004cda:	e7fe      	b.n	8004cda <vPortSVCHandler_C+0x42>
                    break;
 8004cdc:	bf00      	nop
}
 8004cde:	bf00      	nop
 8004ce0:	3710      	adds	r7, #16
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}
 8004ce6:	bf00      	nop
 8004ce8:	08008000 	.word	0x08008000
 8004cec:	08008000 	.word	0x08008000

08004cf0 <vRestoreContextOfFirstTask>:
 * header files. */
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

void vRestoreContextOfFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 8004cf0:	4a17      	ldr	r2, [pc, #92]	; (8004d50 <pxCurrentTCBConst2>)
 8004cf2:	6811      	ldr	r1, [r2, #0]
 8004cf4:	6808      	ldr	r0, [r1, #0]
 8004cf6:	f3bf 8f5f 	dmb	sy
 8004cfa:	4a16      	ldr	r2, [pc, #88]	; (8004d54 <xMPUCTRLConst2>)
 8004cfc:	6814      	ldr	r4, [r2, #0]
 8004cfe:	f024 0401 	bic.w	r4, r4, #1
 8004d02:	6014      	str	r4, [r2, #0]
 8004d04:	3104      	adds	r1, #4
 8004d06:	680b      	ldr	r3, [r1, #0]
 8004d08:	4a13      	ldr	r2, [pc, #76]	; (8004d58 <xMAIR0Const2>)
 8004d0a:	6013      	str	r3, [r2, #0]
 8004d0c:	4a13      	ldr	r2, [pc, #76]	; (8004d5c <xRNRConst2>)
 8004d0e:	2304      	movs	r3, #4
 8004d10:	6013      	str	r3, [r2, #0]
 8004d12:	3104      	adds	r1, #4
 8004d14:	4a12      	ldr	r2, [pc, #72]	; (8004d60 <xRBARConst2>)
 8004d16:	e8b1 0ff0 	ldmia.w	r1!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004d1a:	e8a2 0ff0 	stmia.w	r2!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004d1e:	4a0d      	ldr	r2, [pc, #52]	; (8004d54 <xMPUCTRLConst2>)
 8004d20:	6814      	ldr	r4, [r2, #0]
 8004d22:	f044 0401 	orr.w	r4, r4, #1
 8004d26:	6014      	str	r4, [r2, #0]
 8004d28:	f3bf 8f4f 	dsb	sy
 8004d2c:	c80e      	ldmia	r0!, {r1, r2, r3}
 8004d2e:	f381 880b 	msr	PSPLIM, r1
 8004d32:	f382 8814 	msr	CONTROL, r2
 8004d36:	3020      	adds	r0, #32
 8004d38:	f380 8809 	msr	PSP, r0
 8004d3c:	f3bf 8f6f 	isb	sy
 8004d40:	f04f 0000 	mov.w	r0, #0
 8004d44:	f380 8811 	msr	BASEPRI, r0
 8004d48:	4718      	bx	r3
 8004d4a:	bf00      	nop
 8004d4c:	f3af 8000 	nop.w

08004d50 <pxCurrentTCBConst2>:
 8004d50:	20000040 	.word	0x20000040

08004d54 <xMPUCTRLConst2>:
 8004d54:	e000ed94 	.word	0xe000ed94

08004d58 <xMAIR0Const2>:
 8004d58:	e000edc0 	.word	0xe000edc0

08004d5c <xRNRConst2>:
 8004d5c:	e000ed98 	.word	0xe000ed98

08004d60 <xRBARConst2>:
 8004d60:	e000ed9c 	.word	0xe000ed9c
            "xMAIR0Const2: .word 0xe000edc0						\n"
            "xRNRConst2: .word 0xe000ed98						\n"
            "xRBARConst2: .word 0xe000ed9c						\n"
        #endif /* configENABLE_MPU */
    );
}
 8004d64:	bf00      	nop

08004d66 <vRaisePrivilege>:
}
/*-----------------------------------------------------------*/

void vRaisePrivilege( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 8004d66:	f3ef 8014 	mrs	r0, CONTROL
 8004d6a:	f020 0001 	bic.w	r0, r0, #1
 8004d6e:	f380 8814 	msr	CONTROL, r0
 8004d72:	4770      	bx	lr
        "	bic r0, #1										\n"/* Clear the bit 0. */
        "	msr  control, r0								\n"/* Write back the new CONTROL value. */
        "	bx lr											\n"/* Return to the caller. */
        ::: "r0", "memory"
    );
}
 8004d74:	bf00      	nop

08004d76 <vStartFirstTask>:
}
/*-----------------------------------------------------------*/

void vStartFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 8004d76:	4806      	ldr	r0, [pc, #24]	; (8004d90 <xVTORConst>)
 8004d78:	6800      	ldr	r0, [r0, #0]
 8004d7a:	6800      	ldr	r0, [r0, #0]
 8004d7c:	f380 8808 	msr	MSP, r0
 8004d80:	b662      	cpsie	i
 8004d82:	b661      	cpsie	f
 8004d84:	f3bf 8f4f 	dsb	sy
 8004d88:	f3bf 8f6f 	isb	sy
 8004d8c:	df02      	svc	2
 8004d8e:	bf00      	nop

08004d90 <xVTORConst>:
 8004d90:	e000ed08 	.word	0xe000ed08
        "													\n"
        "   .align 4										\n"
        "xVTORConst: .word 0xe000ed08						\n"
        ::"i" ( portSVC_START_SCHEDULER ) : "memory"
    );
}
 8004d94:	bf00      	nop

08004d96 <ulSetInterruptMask>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMask( void ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 8004d96:	f3ef 8011 	mrs	r0, BASEPRI
 8004d9a:	f04f 0150 	mov.w	r1, #80	; 0x50
 8004d9e:	f381 8811 	msr	BASEPRI, r1
 8004da2:	f3bf 8f4f 	dsb	sy
 8004da6:	f3bf 8f6f 	isb	sy
 8004daa:	4770      	bx	lr
        "	dsb												\n"
        "	isb												\n"
        "	bx lr											\n"/* Return. */
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 8004dac:	bf00      	nop
 8004dae:	4618      	mov	r0, r3

08004db0 <vClearInterruptMask>:
/*-----------------------------------------------------------*/

void vClearInterruptMask( __attribute__( ( unused ) ) uint32_t ulMask ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 8004db0:	f380 8811 	msr	BASEPRI, r0
 8004db4:	f3bf 8f4f 	dsb	sy
 8004db8:	f3bf 8f6f 	isb	sy
 8004dbc:	4770      	bx	lr
        "	dsb												\n"
        "	isb												\n"
        "	bx lr											\n"/* Return. */
        ::: "memory"
    );
}
 8004dbe:	bf00      	nop

08004dc0 <PendSV_Handler>:
/*-----------------------------------------------------------*/

void PendSV_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 8004dc0:	f3ef 8009 	mrs	r0, PSP
 8004dc4:	f3ef 810b 	mrs	r1, PSPLIM
 8004dc8:	f3ef 8214 	mrs	r2, CONTROL
 8004dcc:	4673      	mov	r3, lr
 8004dce:	e920 0ffe 	stmdb	r0!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8004dd2:	4a1f      	ldr	r2, [pc, #124]	; (8004e50 <pxCurrentTCBConst>)
 8004dd4:	6811      	ldr	r1, [r2, #0]
 8004dd6:	6008      	str	r0, [r1, #0]
 8004dd8:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004ddc:	f380 8811 	msr	BASEPRI, r0
 8004de0:	f3bf 8f4f 	dsb	sy
 8004de4:	f3bf 8f6f 	isb	sy
 8004de8:	f7fe fa7a 	bl	80032e0 <vTaskSwitchContext>
 8004dec:	f04f 0000 	mov.w	r0, #0
 8004df0:	f380 8811 	msr	BASEPRI, r0
 8004df4:	4a16      	ldr	r2, [pc, #88]	; (8004e50 <pxCurrentTCBConst>)
 8004df6:	6811      	ldr	r1, [r2, #0]
 8004df8:	6808      	ldr	r0, [r1, #0]
 8004dfa:	f3bf 8f5f 	dmb	sy
 8004dfe:	4a15      	ldr	r2, [pc, #84]	; (8004e54 <xMPUCTRLConst>)
 8004e00:	6814      	ldr	r4, [r2, #0]
 8004e02:	f024 0401 	bic.w	r4, r4, #1
 8004e06:	6014      	str	r4, [r2, #0]
 8004e08:	3104      	adds	r1, #4
 8004e0a:	680b      	ldr	r3, [r1, #0]
 8004e0c:	4a12      	ldr	r2, [pc, #72]	; (8004e58 <xMAIR0Const>)
 8004e0e:	6013      	str	r3, [r2, #0]
 8004e10:	4a12      	ldr	r2, [pc, #72]	; (8004e5c <xRNRConst>)
 8004e12:	2304      	movs	r3, #4
 8004e14:	6013      	str	r3, [r2, #0]
 8004e16:	3104      	adds	r1, #4
 8004e18:	4a11      	ldr	r2, [pc, #68]	; (8004e60 <xRBARConst>)
 8004e1a:	e8b1 0ff0 	ldmia.w	r1!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004e1e:	e8a2 0ff0 	stmia.w	r2!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004e22:	4a0c      	ldr	r2, [pc, #48]	; (8004e54 <xMPUCTRLConst>)
 8004e24:	6814      	ldr	r4, [r2, #0]
 8004e26:	f044 0401 	orr.w	r4, r4, #1
 8004e2a:	6014      	str	r4, [r2, #0]
 8004e2c:	f3bf 8f4f 	dsb	sy
 8004e30:	e8b0 0ffe 	ldmia.w	r0!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8004e34:	f381 880b 	msr	PSPLIM, r1
 8004e38:	f382 8814 	msr	CONTROL, r2
 8004e3c:	f380 8809 	msr	PSP, r0
 8004e40:	4718      	bx	r3
 8004e42:	bf00      	nop
 8004e44:	f3af 8000 	nop.w
 8004e48:	f3af 8000 	nop.w
 8004e4c:	f3af 8000 	nop.w

08004e50 <pxCurrentTCBConst>:
 8004e50:	20000040 	.word	0x20000040

08004e54 <xMPUCTRLConst>:
 8004e54:	e000ed94 	.word	0xe000ed94

08004e58 <xMAIR0Const>:
 8004e58:	e000edc0 	.word	0xe000edc0

08004e5c <xRNRConst>:
 8004e5c:	e000ed98 	.word	0xe000ed98

08004e60 <xRBARConst>:
 8004e60:	e000ed9c 	.word	0xe000ed9c
            "xRNRConst: .word 0xe000ed98						\n"
            "xRBARConst: .word 0xe000ed9c						\n"
        #endif /* configENABLE_MPU */
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004e64:	bf00      	nop

08004e66 <SVC_Handler>:
/*-----------------------------------------------------------*/

void SVC_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
    __asm volatile
 8004e66:	f01e 0f04 	tst.w	lr, #4
 8004e6a:	bf0c      	ite	eq
 8004e6c:	f3ef 8008 	mrseq	r0, MSP
 8004e70:	f3ef 8009 	mrsne	r0, PSP
 8004e74:	4902      	ldr	r1, [pc, #8]	; (8004e80 <svchandler_address_const>)
 8004e76:	4708      	bx	r1
 8004e78:	f3af 8000 	nop.w
 8004e7c:	f3af 8000 	nop.w

08004e80 <svchandler_address_const>:
 8004e80:	08004c99 	.word	0x08004c99
        "	bx r1											\n"
        "													\n"
        "	.align 4										\n"
        "svchandler_address_const: .word vPortSVCHandler_C	\n"
    );
}
 8004e84:	bf00      	nop
 8004e86:	bf00      	nop

08004e88 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b088      	sub	sp, #32
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8004e90:	2300      	movs	r3, #0
 8004e92:	617b      	str	r3, [r7, #20]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8004e94:	f7fd f842 	bl	8001f1c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8004e98:	4b4b      	ldr	r3, [pc, #300]	; (8004fc8 <pvPortMalloc+0x140>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d101      	bne.n	8004ea4 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004ea0:	f000 f990 	bl	80051c4 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d012      	beq.n	8004ed0 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8004eaa:	2208      	movs	r2, #8
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	f003 0307 	and.w	r3, r3, #7
 8004eb2:	1ad3      	subs	r3, r2, r3
 8004eb4:	3308      	adds	r3, #8
 8004eb6:	613b      	str	r3, [r7, #16]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	43db      	mvns	r3, r3
 8004ebc:	687a      	ldr	r2, [r7, #4]
 8004ebe:	429a      	cmp	r2, r3
 8004ec0:	d804      	bhi.n	8004ecc <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8004ec2:	687a      	ldr	r2, [r7, #4]
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	4413      	add	r3, r2
 8004ec8:	607b      	str	r3, [r7, #4]
 8004eca:	e001      	b.n	8004ed0 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	db68      	blt.n	8004fa8 <pvPortMalloc+0x120>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d065      	beq.n	8004fa8 <pvPortMalloc+0x120>
 8004edc:	4b3b      	ldr	r3, [pc, #236]	; (8004fcc <pvPortMalloc+0x144>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	687a      	ldr	r2, [r7, #4]
 8004ee2:	429a      	cmp	r2, r3
 8004ee4:	d860      	bhi.n	8004fa8 <pvPortMalloc+0x120>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004ee6:	4b3a      	ldr	r3, [pc, #232]	; (8004fd0 <pvPortMalloc+0x148>)
 8004ee8:	61bb      	str	r3, [r7, #24]
                pxBlock = xStart.pxNextFreeBlock;
 8004eea:	4b39      	ldr	r3, [pc, #228]	; (8004fd0 <pvPortMalloc+0x148>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	61fb      	str	r3, [r7, #28]

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004ef0:	e004      	b.n	8004efc <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8004ef2:	69fb      	ldr	r3, [r7, #28]
 8004ef4:	61bb      	str	r3, [r7, #24]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004ef6:	69fb      	ldr	r3, [r7, #28]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	61fb      	str	r3, [r7, #28]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004efc:	69fb      	ldr	r3, [r7, #28]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	687a      	ldr	r2, [r7, #4]
 8004f02:	429a      	cmp	r2, r3
 8004f04:	d903      	bls.n	8004f0e <pvPortMalloc+0x86>
 8004f06:	69fb      	ldr	r3, [r7, #28]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d1f1      	bne.n	8004ef2 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004f0e:	4b2e      	ldr	r3, [pc, #184]	; (8004fc8 <pvPortMalloc+0x140>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	69fa      	ldr	r2, [r7, #28]
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d047      	beq.n	8004fa8 <pvPortMalloc+0x120>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004f18:	69bb      	ldr	r3, [r7, #24]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	2208      	movs	r2, #8
 8004f1e:	4413      	add	r3, r2
 8004f20:	617b      	str	r3, [r7, #20]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004f22:	69fb      	ldr	r3, [r7, #28]
 8004f24:	681a      	ldr	r2, [r3, #0]
 8004f26:	69bb      	ldr	r3, [r7, #24]
 8004f28:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004f2a:	69fb      	ldr	r3, [r7, #28]
 8004f2c:	685a      	ldr	r2, [r3, #4]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	1ad2      	subs	r2, r2, r3
 8004f32:	2308      	movs	r3, #8
 8004f34:	005b      	lsls	r3, r3, #1
 8004f36:	429a      	cmp	r2, r3
 8004f38:	d917      	bls.n	8004f6a <pvPortMalloc+0xe2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004f3a:	69fa      	ldr	r2, [r7, #28]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	4413      	add	r3, r2
 8004f40:	60fb      	str	r3, [r7, #12]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	f003 0307 	and.w	r3, r3, #7
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d002      	beq.n	8004f52 <pvPortMalloc+0xca>
 8004f4c:	f7ff ff23 	bl	8004d96 <ulSetInterruptMask>
 8004f50:	e7fe      	b.n	8004f50 <pvPortMalloc+0xc8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004f52:	69fb      	ldr	r3, [r7, #28]
 8004f54:	685a      	ldr	r2, [r3, #4]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	1ad2      	subs	r2, r2, r3
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004f5e:	69fb      	ldr	r3, [r7, #28]
 8004f60:	687a      	ldr	r2, [r7, #4]
 8004f62:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004f64:	68f8      	ldr	r0, [r7, #12]
 8004f66:	f000 f8d3 	bl	8005110 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004f6a:	4b18      	ldr	r3, [pc, #96]	; (8004fcc <pvPortMalloc+0x144>)
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	69fb      	ldr	r3, [r7, #28]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	1ad3      	subs	r3, r2, r3
 8004f74:	4a15      	ldr	r2, [pc, #84]	; (8004fcc <pvPortMalloc+0x144>)
 8004f76:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004f78:	4b14      	ldr	r3, [pc, #80]	; (8004fcc <pvPortMalloc+0x144>)
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	4b15      	ldr	r3, [pc, #84]	; (8004fd4 <pvPortMalloc+0x14c>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d203      	bcs.n	8004f8c <pvPortMalloc+0x104>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004f84:	4b11      	ldr	r3, [pc, #68]	; (8004fcc <pvPortMalloc+0x144>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a12      	ldr	r2, [pc, #72]	; (8004fd4 <pvPortMalloc+0x14c>)
 8004f8a:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8004f8c:	69fb      	ldr	r3, [r7, #28]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004f94:	69fb      	ldr	r3, [r7, #28]
 8004f96:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004f98:	69fb      	ldr	r3, [r7, #28]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004f9e:	4b0e      	ldr	r3, [pc, #56]	; (8004fd8 <pvPortMalloc+0x150>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	3301      	adds	r3, #1
 8004fa4:	4a0c      	ldr	r2, [pc, #48]	; (8004fd8 <pvPortMalloc+0x150>)
 8004fa6:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004fa8:	f7fc ffc6 	bl	8001f38 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	f003 0307 	and.w	r3, r3, #7
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d002      	beq.n	8004fbc <pvPortMalloc+0x134>
 8004fb6:	f7ff feee 	bl	8004d96 <ulSetInterruptMask>
 8004fba:	e7fe      	b.n	8004fba <pvPortMalloc+0x132>
    return pvReturn;
 8004fbc:	697b      	ldr	r3, [r7, #20]
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3720      	adds	r7, #32
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}
 8004fc6:	bf00      	nop
 8004fc8:	20002588 	.word	0x20002588
 8004fcc:	2000258c 	.word	0x2000258c
 8004fd0:	20002580 	.word	0x20002580
 8004fd4:	20002590 	.word	0x20002590
 8004fd8:	20002594 	.word	0x20002594

08004fdc <pvPortCalloc>:
}
/*-----------------------------------------------------------*/

void * pvPortCalloc( size_t xNum,
                     size_t xSize )
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b084      	sub	sp, #16
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
 8004fe4:	6039      	str	r1, [r7, #0]
    void * pv = NULL;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	60fb      	str	r3, [r7, #12]

    if( heapMULTIPLY_WILL_OVERFLOW( xNum, xSize ) == 0 )
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d009      	beq.n	8005004 <pvPortCalloc+0x28>
 8004ff0:	f04f 32ff 	mov.w	r2, #4294967295
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ffa:	683a      	ldr	r2, [r7, #0]
 8004ffc:	429a      	cmp	r2, r3
 8004ffe:	d901      	bls.n	8005004 <pvPortCalloc+0x28>
 8005000:	2301      	movs	r3, #1
 8005002:	e000      	b.n	8005006 <pvPortCalloc+0x2a>
 8005004:	2300      	movs	r3, #0
 8005006:	2b00      	cmp	r3, #0
 8005008:	d113      	bne.n	8005032 <pvPortCalloc+0x56>
    {
        pv = pvPortMalloc( xNum * xSize );
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	683a      	ldr	r2, [r7, #0]
 800500e:	fb02 f303 	mul.w	r3, r2, r3
 8005012:	4618      	mov	r0, r3
 8005014:	f7ff ff38 	bl	8004e88 <pvPortMalloc>
 8005018:	60f8      	str	r0, [r7, #12]

        if( pv != NULL )
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d008      	beq.n	8005032 <pvPortCalloc+0x56>
        {
            ( void ) memset( pv, 0, xNum * xSize );
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	683a      	ldr	r2, [r7, #0]
 8005024:	fb02 f303 	mul.w	r3, r2, r3
 8005028:	461a      	mov	r2, r3
 800502a:	2100      	movs	r1, #0
 800502c:	68f8      	ldr	r0, [r7, #12]
 800502e:	f004 ffb1 	bl	8009f94 <memset>
        }
    }

    return pv;
 8005032:	68fb      	ldr	r3, [r7, #12]
}
 8005034:	4618      	mov	r0, r3
 8005036:	3710      	adds	r7, #16
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}

0800503c <vPortFree>:
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b084      	sub	sp, #16
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	60fb      	str	r3, [r7, #12]
    if( pv != NULL )
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d039      	beq.n	80050c2 <vPortFree+0x86>
        puc -= xHeapStructSize;
 800504e:	2308      	movs	r3, #8
 8005050:	425b      	negs	r3, r3
 8005052:	68fa      	ldr	r2, [r7, #12]
 8005054:	4413      	add	r3, r2
 8005056:	60fb      	str	r3, [r7, #12]
        pxLink = ( void * ) puc;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	60bb      	str	r3, [r7, #8]
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	2b00      	cmp	r3, #0
 8005062:	db02      	blt.n	800506a <vPortFree+0x2e>
 8005064:	f7ff fe97 	bl	8004d96 <ulSetInterruptMask>
 8005068:	e7fe      	b.n	8005068 <vPortFree+0x2c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d002      	beq.n	8005078 <vPortFree+0x3c>
 8005072:	f7ff fe90 	bl	8004d96 <ulSetInterruptMask>
 8005076:	e7fe      	b.n	8005076 <vPortFree+0x3a>
        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	0fdb      	lsrs	r3, r3, #31
 800507e:	f003 0301 	and.w	r3, r3, #1
 8005082:	b2db      	uxtb	r3, r3
 8005084:	2b00      	cmp	r3, #0
 8005086:	d01c      	beq.n	80050c2 <vPortFree+0x86>
            if( pxLink->pxNextFreeBlock == NULL )
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d118      	bne.n	80050c2 <vPortFree+0x86>
                heapFREE_BLOCK( pxLink );
 8005090:	68bb      	ldr	r3, [r7, #8]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	605a      	str	r2, [r3, #4]
                vTaskSuspendAll();
 800509c:	f7fc ff3e 	bl	8001f1c <vTaskSuspendAll>
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	685a      	ldr	r2, [r3, #4]
 80050a4:	4b09      	ldr	r3, [pc, #36]	; (80050cc <vPortFree+0x90>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4413      	add	r3, r2
 80050aa:	4a08      	ldr	r2, [pc, #32]	; (80050cc <vPortFree+0x90>)
 80050ac:	6013      	str	r3, [r2, #0]
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80050ae:	68b8      	ldr	r0, [r7, #8]
 80050b0:	f000 f82e 	bl	8005110 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80050b4:	4b06      	ldr	r3, [pc, #24]	; (80050d0 <vPortFree+0x94>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	3301      	adds	r3, #1
 80050ba:	4a05      	ldr	r2, [pc, #20]	; (80050d0 <vPortFree+0x94>)
 80050bc:	6013      	str	r3, [r2, #0]
                ( void ) xTaskResumeAll();
 80050be:	f7fc ff3b 	bl	8001f38 <xTaskResumeAll>
}
 80050c2:	bf00      	nop
 80050c4:	3710      	adds	r7, #16
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}
 80050ca:	bf00      	nop
 80050cc:	2000258c 	.word	0x2000258c
 80050d0:	20002598 	.word	0x20002598

080050d4 <vPortInitialiseBlocks>:
{
 80050d4:	b480      	push	{r7}
 80050d6:	af00      	add	r7, sp, #0
}
 80050d8:	bf00      	nop
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr

080050e2 <xPortGetFreeHeapSize>:
{
 80050e2:	b480      	push	{r7}
 80050e4:	af00      	add	r7, sp, #0
    return xFreeBytesRemaining;
 80050e6:	4b03      	ldr	r3, [pc, #12]	; (80050f4 <xPortGetFreeHeapSize+0x12>)
 80050e8:	681b      	ldr	r3, [r3, #0]
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr
 80050f4:	2000258c 	.word	0x2000258c

080050f8 <xPortGetMinimumEverFreeHeapSize>:
{
 80050f8:	b480      	push	{r7}
 80050fa:	af00      	add	r7, sp, #0
    return xMinimumEverFreeBytesRemaining;
 80050fc:	4b03      	ldr	r3, [pc, #12]	; (800510c <xPortGetMinimumEverFreeHeapSize+0x14>)
 80050fe:	681b      	ldr	r3, [r3, #0]
}
 8005100:	4618      	mov	r0, r3
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr
 800510a:	bf00      	nop
 800510c:	20002590 	.word	0x20002590

08005110 <prvInsertBlockIntoFreeList>:
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8005110:	b480      	push	{r7}
 8005112:	b085      	sub	sp, #20
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005118:	4b28      	ldr	r3, [pc, #160]	; (80051bc <prvInsertBlockIntoFreeList+0xac>)
 800511a:	60fb      	str	r3, [r7, #12]
 800511c:	e002      	b.n	8005124 <prvInsertBlockIntoFreeList+0x14>
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	60fb      	str	r3, [r7, #12]
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	687a      	ldr	r2, [r7, #4]
 800512a:	429a      	cmp	r2, r3
 800512c:	d8f7      	bhi.n	800511e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	68ba      	ldr	r2, [r7, #8]
 8005138:	4413      	add	r3, r2
 800513a:	687a      	ldr	r2, [r7, #4]
 800513c:	429a      	cmp	r2, r3
 800513e:	d108      	bne.n	8005152 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	685a      	ldr	r2, [r3, #4]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	441a      	add	r2, r3
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	68ba      	ldr	r2, [r7, #8]
 800515c:	441a      	add	r2, r3
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	429a      	cmp	r2, r3
 8005164:	d118      	bne.n	8005198 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681a      	ldr	r2, [r3, #0]
 800516a:	4b15      	ldr	r3, [pc, #84]	; (80051c0 <prvInsertBlockIntoFreeList+0xb0>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	429a      	cmp	r2, r3
 8005170:	d00d      	beq.n	800518e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	685a      	ldr	r2, [r3, #4]
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	685b      	ldr	r3, [r3, #4]
 800517c:	441a      	add	r2, r3
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	681a      	ldr	r2, [r3, #0]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	601a      	str	r2, [r3, #0]
 800518c:	e008      	b.n	80051a0 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800518e:	4b0c      	ldr	r3, [pc, #48]	; (80051c0 <prvInsertBlockIntoFreeList+0xb0>)
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	601a      	str	r2, [r3, #0]
 8005196:	e003      	b.n	80051a0 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80051a0:	68fa      	ldr	r2, [r7, #12]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d002      	beq.n	80051ae <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	687a      	ldr	r2, [r7, #4]
 80051ac:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80051ae:	bf00      	nop
 80051b0:	3714      	adds	r7, #20
 80051b2:	46bd      	mov	sp, r7
 80051b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b8:	4770      	bx	lr
 80051ba:	bf00      	nop
 80051bc:	20002580 	.word	0x20002580
 80051c0:	20002588 	.word	0x20002588

080051c4 <prvHeapInit>:
{
 80051c4:	b480      	push	{r7}
 80051c6:	b085      	sub	sp, #20
 80051c8:	af00      	add	r7, sp, #0
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80051ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80051ce:	60bb      	str	r3, [r7, #8]
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 80051d0:	4b25      	ldr	r3, [pc, #148]	; (8005268 <prvHeapInit+0xa4>)
 80051d2:	60fb      	str	r3, [r7, #12]
    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	f003 0307 	and.w	r3, r3, #7
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d00c      	beq.n	80051f8 <prvHeapInit+0x34>
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	3307      	adds	r3, #7
 80051e2:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f023 0307 	bic.w	r3, r3, #7
 80051ea:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 80051ec:	68ba      	ldr	r2, [r7, #8]
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	1ad3      	subs	r3, r2, r3
 80051f2:	4a1d      	ldr	r2, [pc, #116]	; (8005268 <prvHeapInit+0xa4>)
 80051f4:	4413      	add	r3, r2
 80051f6:	60bb      	str	r3, [r7, #8]
    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	607b      	str	r3, [r7, #4]
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80051fc:	4a1b      	ldr	r2, [pc, #108]	; (800526c <prvHeapInit+0xa8>)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8005202:	4b1a      	ldr	r3, [pc, #104]	; (800526c <prvHeapInit+0xa8>)
 8005204:	2200      	movs	r2, #0
 8005206:	605a      	str	r2, [r3, #4]
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	68ba      	ldr	r2, [r7, #8]
 800520c:	4413      	add	r3, r2
 800520e:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8005210:	2208      	movs	r2, #8
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	1a9b      	subs	r3, r3, r2
 8005216:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f023 0307 	bic.w	r3, r3, #7
 800521e:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	4a13      	ldr	r2, [pc, #76]	; (8005270 <prvHeapInit+0xac>)
 8005224:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8005226:	4b12      	ldr	r3, [pc, #72]	; (8005270 <prvHeapInit+0xac>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	2200      	movs	r2, #0
 800522c:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800522e:	4b10      	ldr	r3, [pc, #64]	; (8005270 <prvHeapInit+0xac>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	2200      	movs	r2, #0
 8005234:	601a      	str	r2, [r3, #0]
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	68fa      	ldr	r2, [r7, #12]
 800523e:	1ad2      	subs	r2, r2, r3
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005244:	4b0a      	ldr	r3, [pc, #40]	; (8005270 <prvHeapInit+0xac>)
 8005246:	681a      	ldr	r2, [r3, #0]
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	601a      	str	r2, [r3, #0]
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	4a08      	ldr	r2, [pc, #32]	; (8005274 <prvHeapInit+0xb0>)
 8005252:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	4a07      	ldr	r2, [pc, #28]	; (8005278 <prvHeapInit+0xb4>)
 800525a:	6013      	str	r3, [r2, #0]
}
 800525c:	bf00      	nop
 800525e:	3714      	adds	r7, #20
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr
 8005268:	20000580 	.word	0x20000580
 800526c:	20002580 	.word	0x20002580
 8005270:	20002588 	.word	0x20002588
 8005274:	20002590 	.word	0x20002590
 8005278:	2000258c 	.word	0x2000258c
 800527c:	addeadde 	.word	0xaddeadde
 8005280:	addeadde 	.word	0xaddeadde
 8005284:	addeadde 	.word	0xaddeadde
 8005288:	addeadde 	.word	0xaddeadde
 800528c:	addeadde 	.word	0xaddeadde
 8005290:	addeadde 	.word	0xaddeadde
 8005294:	addeadde 	.word	0xaddeadde
 8005298:	addeadde 	.word	0xaddeadde
 800529c:	addeadde 	.word	0xaddeadde
 80052a0:	addeadde 	.word	0xaddeadde
 80052a4:	addeadde 	.word	0xaddeadde
 80052a8:	addeadde 	.word	0xaddeadde
 80052ac:	addeadde 	.word	0xaddeadde
 80052b0:	addeadde 	.word	0xaddeadde
 80052b4:	addeadde 	.word	0xaddeadde
 80052b8:	addeadde 	.word	0xaddeadde
 80052bc:	addeadde 	.word	0xaddeadde
 80052c0:	addeadde 	.word	0xaddeadde
 80052c4:	addeadde 	.word	0xaddeadde
 80052c8:	addeadde 	.word	0xaddeadde
 80052cc:	addeadde 	.word	0xaddeadde
 80052d0:	addeadde 	.word	0xaddeadde
 80052d4:	addeadde 	.word	0xaddeadde
 80052d8:	addeadde 	.word	0xaddeadde
 80052dc:	addeadde 	.word	0xaddeadde
 80052e0:	addeadde 	.word	0xaddeadde
 80052e4:	addeadde 	.word	0xaddeadde
 80052e8:	addeadde 	.word	0xaddeadde
 80052ec:	addeadde 	.word	0xaddeadde
 80052f0:	addeadde 	.word	0xaddeadde
 80052f4:	addeadde 	.word	0xaddeadde
 80052f8:	addeadde 	.word	0xaddeadde
 80052fc:	addeadde 	.word	0xaddeadde
 8005300:	addeadde 	.word	0xaddeadde
 8005304:	addeadde 	.word	0xaddeadde
 8005308:	addeadde 	.word	0xaddeadde
 800530c:	addeadde 	.word	0xaddeadde
 8005310:	addeadde 	.word	0xaddeadde
 8005314:	addeadde 	.word	0xaddeadde
 8005318:	addeadde 	.word	0xaddeadde
 800531c:	addeadde 	.word	0xaddeadde
 8005320:	addeadde 	.word	0xaddeadde
 8005324:	addeadde 	.word	0xaddeadde
 8005328:	addeadde 	.word	0xaddeadde
 800532c:	addeadde 	.word	0xaddeadde
 8005330:	addeadde 	.word	0xaddeadde
 8005334:	addeadde 	.word	0xaddeadde
 8005338:	addeadde 	.word	0xaddeadde
 800533c:	addeadde 	.word	0xaddeadde
 8005340:	addeadde 	.word	0xaddeadde
 8005344:	addeadde 	.word	0xaddeadde
 8005348:	addeadde 	.word	0xaddeadde
 800534c:	addeadde 	.word	0xaddeadde
 8005350:	addeadde 	.word	0xaddeadde
 8005354:	addeadde 	.word	0xaddeadde
 8005358:	addeadde 	.word	0xaddeadde
 800535c:	addeadde 	.word	0xaddeadde
 8005360:	addeadde 	.word	0xaddeadde
 8005364:	addeadde 	.word	0xaddeadde
 8005368:	addeadde 	.word	0xaddeadde
 800536c:	addeadde 	.word	0xaddeadde
 8005370:	addeadde 	.word	0xaddeadde
 8005374:	addeadde 	.word	0xaddeadde
 8005378:	addeadde 	.word	0xaddeadde
 800537c:	addeadde 	.word	0xaddeadde
 8005380:	addeadde 	.word	0xaddeadde
 8005384:	addeadde 	.word	0xaddeadde
 8005388:	addeadde 	.word	0xaddeadde
 800538c:	addeadde 	.word	0xaddeadde
 8005390:	addeadde 	.word	0xaddeadde
 8005394:	addeadde 	.word	0xaddeadde
 8005398:	addeadde 	.word	0xaddeadde
 800539c:	addeadde 	.word	0xaddeadde
 80053a0:	addeadde 	.word	0xaddeadde
 80053a4:	addeadde 	.word	0xaddeadde
 80053a8:	addeadde 	.word	0xaddeadde
 80053ac:	addeadde 	.word	0xaddeadde
 80053b0:	addeadde 	.word	0xaddeadde
 80053b4:	addeadde 	.word	0xaddeadde
 80053b8:	addeadde 	.word	0xaddeadde
 80053bc:	addeadde 	.word	0xaddeadde
 80053c0:	addeadde 	.word	0xaddeadde
 80053c4:	addeadde 	.word	0xaddeadde
 80053c8:	addeadde 	.word	0xaddeadde
 80053cc:	addeadde 	.word	0xaddeadde
 80053d0:	addeadde 	.word	0xaddeadde
 80053d4:	addeadde 	.word	0xaddeadde
 80053d8:	addeadde 	.word	0xaddeadde
 80053dc:	addeadde 	.word	0xaddeadde
 80053e0:	addeadde 	.word	0xaddeadde
 80053e4:	addeadde 	.word	0xaddeadde
 80053e8:	addeadde 	.word	0xaddeadde
 80053ec:	addeadde 	.word	0xaddeadde
 80053f0:	addeadde 	.word	0xaddeadde
 80053f4:	addeadde 	.word	0xaddeadde
 80053f8:	addeadde 	.word	0xaddeadde
 80053fc:	addeadde 	.word	0xaddeadde
 8005400:	addeadde 	.word	0xaddeadde
 8005404:	addeadde 	.word	0xaddeadde
 8005408:	addeadde 	.word	0xaddeadde
 800540c:	addeadde 	.word	0xaddeadde
 8005410:	addeadde 	.word	0xaddeadde
 8005414:	addeadde 	.word	0xaddeadde
 8005418:	addeadde 	.word	0xaddeadde
 800541c:	addeadde 	.word	0xaddeadde
 8005420:	addeadde 	.word	0xaddeadde
 8005424:	addeadde 	.word	0xaddeadde
 8005428:	addeadde 	.word	0xaddeadde
 800542c:	addeadde 	.word	0xaddeadde
 8005430:	addeadde 	.word	0xaddeadde
 8005434:	addeadde 	.word	0xaddeadde
 8005438:	addeadde 	.word	0xaddeadde
 800543c:	addeadde 	.word	0xaddeadde
 8005440:	addeadde 	.word	0xaddeadde
 8005444:	addeadde 	.word	0xaddeadde
 8005448:	addeadde 	.word	0xaddeadde
 800544c:	addeadde 	.word	0xaddeadde
 8005450:	addeadde 	.word	0xaddeadde
 8005454:	addeadde 	.word	0xaddeadde
 8005458:	addeadde 	.word	0xaddeadde
 800545c:	addeadde 	.word	0xaddeadde
 8005460:	addeadde 	.word	0xaddeadde
 8005464:	addeadde 	.word	0xaddeadde
 8005468:	addeadde 	.word	0xaddeadde
 800546c:	addeadde 	.word	0xaddeadde
 8005470:	addeadde 	.word	0xaddeadde
 8005474:	addeadde 	.word	0xaddeadde
 8005478:	addeadde 	.word	0xaddeadde
 800547c:	addeadde 	.word	0xaddeadde
 8005480:	addeadde 	.word	0xaddeadde
 8005484:	addeadde 	.word	0xaddeadde
 8005488:	addeadde 	.word	0xaddeadde
 800548c:	addeadde 	.word	0xaddeadde
 8005490:	addeadde 	.word	0xaddeadde
 8005494:	addeadde 	.word	0xaddeadde
 8005498:	addeadde 	.word	0xaddeadde
 800549c:	addeadde 	.word	0xaddeadde
 80054a0:	addeadde 	.word	0xaddeadde
 80054a4:	addeadde 	.word	0xaddeadde
 80054a8:	addeadde 	.word	0xaddeadde
 80054ac:	addeadde 	.word	0xaddeadde
 80054b0:	addeadde 	.word	0xaddeadde
 80054b4:	addeadde 	.word	0xaddeadde
 80054b8:	addeadde 	.word	0xaddeadde
 80054bc:	addeadde 	.word	0xaddeadde
 80054c0:	addeadde 	.word	0xaddeadde
 80054c4:	addeadde 	.word	0xaddeadde
 80054c8:	addeadde 	.word	0xaddeadde
 80054cc:	addeadde 	.word	0xaddeadde
 80054d0:	addeadde 	.word	0xaddeadde
 80054d4:	addeadde 	.word	0xaddeadde
 80054d8:	addeadde 	.word	0xaddeadde
 80054dc:	addeadde 	.word	0xaddeadde
 80054e0:	addeadde 	.word	0xaddeadde
 80054e4:	addeadde 	.word	0xaddeadde
 80054e8:	addeadde 	.word	0xaddeadde
 80054ec:	addeadde 	.word	0xaddeadde
 80054f0:	addeadde 	.word	0xaddeadde
 80054f4:	addeadde 	.word	0xaddeadde
 80054f8:	addeadde 	.word	0xaddeadde
 80054fc:	addeadde 	.word	0xaddeadde
 8005500:	addeadde 	.word	0xaddeadde
 8005504:	addeadde 	.word	0xaddeadde
 8005508:	addeadde 	.word	0xaddeadde
 800550c:	addeadde 	.word	0xaddeadde
 8005510:	addeadde 	.word	0xaddeadde
 8005514:	addeadde 	.word	0xaddeadde
 8005518:	addeadde 	.word	0xaddeadde
 800551c:	addeadde 	.word	0xaddeadde
 8005520:	addeadde 	.word	0xaddeadde
 8005524:	addeadde 	.word	0xaddeadde
 8005528:	addeadde 	.word	0xaddeadde
 800552c:	addeadde 	.word	0xaddeadde
 8005530:	addeadde 	.word	0xaddeadde
 8005534:	addeadde 	.word	0xaddeadde
 8005538:	addeadde 	.word	0xaddeadde
 800553c:	addeadde 	.word	0xaddeadde
 8005540:	addeadde 	.word	0xaddeadde
 8005544:	addeadde 	.word	0xaddeadde
 8005548:	addeadde 	.word	0xaddeadde
 800554c:	addeadde 	.word	0xaddeadde
 8005550:	addeadde 	.word	0xaddeadde
 8005554:	addeadde 	.word	0xaddeadde
 8005558:	addeadde 	.word	0xaddeadde
 800555c:	addeadde 	.word	0xaddeadde
 8005560:	addeadde 	.word	0xaddeadde
 8005564:	addeadde 	.word	0xaddeadde
 8005568:	addeadde 	.word	0xaddeadde
 800556c:	addeadde 	.word	0xaddeadde
 8005570:	addeadde 	.word	0xaddeadde
 8005574:	addeadde 	.word	0xaddeadde
 8005578:	addeadde 	.word	0xaddeadde
 800557c:	addeadde 	.word	0xaddeadde
 8005580:	addeadde 	.word	0xaddeadde
 8005584:	addeadde 	.word	0xaddeadde
 8005588:	addeadde 	.word	0xaddeadde
 800558c:	addeadde 	.word	0xaddeadde
 8005590:	addeadde 	.word	0xaddeadde
 8005594:	addeadde 	.word	0xaddeadde
 8005598:	addeadde 	.word	0xaddeadde
 800559c:	addeadde 	.word	0xaddeadde
 80055a0:	addeadde 	.word	0xaddeadde
 80055a4:	addeadde 	.word	0xaddeadde
 80055a8:	addeadde 	.word	0xaddeadde
 80055ac:	addeadde 	.word	0xaddeadde
 80055b0:	addeadde 	.word	0xaddeadde
 80055b4:	addeadde 	.word	0xaddeadde
 80055b8:	addeadde 	.word	0xaddeadde
 80055bc:	addeadde 	.word	0xaddeadde
 80055c0:	addeadde 	.word	0xaddeadde
 80055c4:	addeadde 	.word	0xaddeadde
 80055c8:	addeadde 	.word	0xaddeadde
 80055cc:	addeadde 	.word	0xaddeadde
 80055d0:	addeadde 	.word	0xaddeadde
 80055d4:	addeadde 	.word	0xaddeadde
 80055d8:	addeadde 	.word	0xaddeadde
 80055dc:	addeadde 	.word	0xaddeadde
 80055e0:	addeadde 	.word	0xaddeadde
 80055e4:	addeadde 	.word	0xaddeadde
 80055e8:	addeadde 	.word	0xaddeadde
 80055ec:	addeadde 	.word	0xaddeadde
 80055f0:	addeadde 	.word	0xaddeadde
 80055f4:	addeadde 	.word	0xaddeadde
 80055f8:	addeadde 	.word	0xaddeadde
 80055fc:	addeadde 	.word	0xaddeadde
 8005600:	addeadde 	.word	0xaddeadde
 8005604:	addeadde 	.word	0xaddeadde
 8005608:	addeadde 	.word	0xaddeadde
 800560c:	addeadde 	.word	0xaddeadde
 8005610:	addeadde 	.word	0xaddeadde
 8005614:	addeadde 	.word	0xaddeadde
 8005618:	addeadde 	.word	0xaddeadde
 800561c:	addeadde 	.word	0xaddeadde
 8005620:	addeadde 	.word	0xaddeadde
 8005624:	addeadde 	.word	0xaddeadde
 8005628:	addeadde 	.word	0xaddeadde
 800562c:	addeadde 	.word	0xaddeadde
 8005630:	addeadde 	.word	0xaddeadde
 8005634:	addeadde 	.word	0xaddeadde
 8005638:	addeadde 	.word	0xaddeadde
 800563c:	addeadde 	.word	0xaddeadde
 8005640:	addeadde 	.word	0xaddeadde
 8005644:	addeadde 	.word	0xaddeadde
 8005648:	addeadde 	.word	0xaddeadde
 800564c:	addeadde 	.word	0xaddeadde
 8005650:	addeadde 	.word	0xaddeadde
 8005654:	addeadde 	.word	0xaddeadde
 8005658:	addeadde 	.word	0xaddeadde
 800565c:	addeadde 	.word	0xaddeadde
 8005660:	addeadde 	.word	0xaddeadde
 8005664:	addeadde 	.word	0xaddeadde
 8005668:	addeadde 	.word	0xaddeadde
 800566c:	addeadde 	.word	0xaddeadde
 8005670:	addeadde 	.word	0xaddeadde
 8005674:	addeadde 	.word	0xaddeadde
 8005678:	addeadde 	.word	0xaddeadde
 800567c:	addeadde 	.word	0xaddeadde
 8005680:	addeadde 	.word	0xaddeadde
 8005684:	addeadde 	.word	0xaddeadde
 8005688:	addeadde 	.word	0xaddeadde
 800568c:	addeadde 	.word	0xaddeadde
 8005690:	addeadde 	.word	0xaddeadde
 8005694:	addeadde 	.word	0xaddeadde
 8005698:	addeadde 	.word	0xaddeadde
 800569c:	addeadde 	.word	0xaddeadde
 80056a0:	addeadde 	.word	0xaddeadde
 80056a4:	addeadde 	.word	0xaddeadde
 80056a8:	addeadde 	.word	0xaddeadde
 80056ac:	addeadde 	.word	0xaddeadde
 80056b0:	addeadde 	.word	0xaddeadde
 80056b4:	addeadde 	.word	0xaddeadde
 80056b8:	addeadde 	.word	0xaddeadde
 80056bc:	addeadde 	.word	0xaddeadde
 80056c0:	addeadde 	.word	0xaddeadde
 80056c4:	addeadde 	.word	0xaddeadde
 80056c8:	addeadde 	.word	0xaddeadde
 80056cc:	addeadde 	.word	0xaddeadde
 80056d0:	addeadde 	.word	0xaddeadde
 80056d4:	addeadde 	.word	0xaddeadde
 80056d8:	addeadde 	.word	0xaddeadde
 80056dc:	addeadde 	.word	0xaddeadde
 80056e0:	addeadde 	.word	0xaddeadde
 80056e4:	addeadde 	.word	0xaddeadde
 80056e8:	addeadde 	.word	0xaddeadde
 80056ec:	addeadde 	.word	0xaddeadde
 80056f0:	addeadde 	.word	0xaddeadde
 80056f4:	addeadde 	.word	0xaddeadde
 80056f8:	addeadde 	.word	0xaddeadde
 80056fc:	addeadde 	.word	0xaddeadde
 8005700:	addeadde 	.word	0xaddeadde
 8005704:	addeadde 	.word	0xaddeadde
 8005708:	addeadde 	.word	0xaddeadde
 800570c:	addeadde 	.word	0xaddeadde
 8005710:	addeadde 	.word	0xaddeadde
 8005714:	addeadde 	.word	0xaddeadde
 8005718:	addeadde 	.word	0xaddeadde
 800571c:	addeadde 	.word	0xaddeadde
 8005720:	addeadde 	.word	0xaddeadde
 8005724:	addeadde 	.word	0xaddeadde
 8005728:	addeadde 	.word	0xaddeadde
 800572c:	addeadde 	.word	0xaddeadde
 8005730:	addeadde 	.word	0xaddeadde
 8005734:	addeadde 	.word	0xaddeadde
 8005738:	addeadde 	.word	0xaddeadde
 800573c:	addeadde 	.word	0xaddeadde
 8005740:	addeadde 	.word	0xaddeadde
 8005744:	addeadde 	.word	0xaddeadde
 8005748:	addeadde 	.word	0xaddeadde
 800574c:	addeadde 	.word	0xaddeadde
 8005750:	addeadde 	.word	0xaddeadde
 8005754:	addeadde 	.word	0xaddeadde
 8005758:	addeadde 	.word	0xaddeadde
 800575c:	addeadde 	.word	0xaddeadde
 8005760:	addeadde 	.word	0xaddeadde
 8005764:	addeadde 	.word	0xaddeadde
 8005768:	addeadde 	.word	0xaddeadde
 800576c:	addeadde 	.word	0xaddeadde
 8005770:	addeadde 	.word	0xaddeadde
 8005774:	addeadde 	.word	0xaddeadde
 8005778:	addeadde 	.word	0xaddeadde
 800577c:	addeadde 	.word	0xaddeadde
 8005780:	addeadde 	.word	0xaddeadde
 8005784:	addeadde 	.word	0xaddeadde
 8005788:	addeadde 	.word	0xaddeadde
 800578c:	addeadde 	.word	0xaddeadde
 8005790:	addeadde 	.word	0xaddeadde
 8005794:	addeadde 	.word	0xaddeadde
 8005798:	addeadde 	.word	0xaddeadde
 800579c:	addeadde 	.word	0xaddeadde
 80057a0:	addeadde 	.word	0xaddeadde
 80057a4:	addeadde 	.word	0xaddeadde
 80057a8:	addeadde 	.word	0xaddeadde
 80057ac:	addeadde 	.word	0xaddeadde
 80057b0:	addeadde 	.word	0xaddeadde
 80057b4:	addeadde 	.word	0xaddeadde
 80057b8:	addeadde 	.word	0xaddeadde
 80057bc:	addeadde 	.word	0xaddeadde
 80057c0:	addeadde 	.word	0xaddeadde
 80057c4:	addeadde 	.word	0xaddeadde
 80057c8:	addeadde 	.word	0xaddeadde
 80057cc:	addeadde 	.word	0xaddeadde
 80057d0:	addeadde 	.word	0xaddeadde
 80057d4:	addeadde 	.word	0xaddeadde
 80057d8:	addeadde 	.word	0xaddeadde
 80057dc:	addeadde 	.word	0xaddeadde
 80057e0:	addeadde 	.word	0xaddeadde
 80057e4:	addeadde 	.word	0xaddeadde
 80057e8:	addeadde 	.word	0xaddeadde
 80057ec:	addeadde 	.word	0xaddeadde
 80057f0:	addeadde 	.word	0xaddeadde
 80057f4:	addeadde 	.word	0xaddeadde
 80057f8:	addeadde 	.word	0xaddeadde
 80057fc:	addeadde 	.word	0xaddeadde
 8005800:	addeadde 	.word	0xaddeadde
 8005804:	addeadde 	.word	0xaddeadde
 8005808:	addeadde 	.word	0xaddeadde
 800580c:	addeadde 	.word	0xaddeadde
 8005810:	addeadde 	.word	0xaddeadde
 8005814:	addeadde 	.word	0xaddeadde
 8005818:	addeadde 	.word	0xaddeadde
 800581c:	addeadde 	.word	0xaddeadde
 8005820:	addeadde 	.word	0xaddeadde
 8005824:	addeadde 	.word	0xaddeadde
 8005828:	addeadde 	.word	0xaddeadde
 800582c:	addeadde 	.word	0xaddeadde
 8005830:	addeadde 	.word	0xaddeadde
 8005834:	addeadde 	.word	0xaddeadde
 8005838:	addeadde 	.word	0xaddeadde
 800583c:	addeadde 	.word	0xaddeadde
 8005840:	addeadde 	.word	0xaddeadde
 8005844:	addeadde 	.word	0xaddeadde
 8005848:	addeadde 	.word	0xaddeadde
 800584c:	addeadde 	.word	0xaddeadde
 8005850:	addeadde 	.word	0xaddeadde
 8005854:	addeadde 	.word	0xaddeadde
 8005858:	addeadde 	.word	0xaddeadde
 800585c:	addeadde 	.word	0xaddeadde
 8005860:	addeadde 	.word	0xaddeadde
 8005864:	addeadde 	.word	0xaddeadde
 8005868:	addeadde 	.word	0xaddeadde
 800586c:	addeadde 	.word	0xaddeadde
 8005870:	addeadde 	.word	0xaddeadde
 8005874:	addeadde 	.word	0xaddeadde
 8005878:	addeadde 	.word	0xaddeadde
 800587c:	addeadde 	.word	0xaddeadde
 8005880:	addeadde 	.word	0xaddeadde
 8005884:	addeadde 	.word	0xaddeadde
 8005888:	addeadde 	.word	0xaddeadde
 800588c:	addeadde 	.word	0xaddeadde
 8005890:	addeadde 	.word	0xaddeadde
 8005894:	addeadde 	.word	0xaddeadde
 8005898:	addeadde 	.word	0xaddeadde
 800589c:	addeadde 	.word	0xaddeadde
 80058a0:	addeadde 	.word	0xaddeadde
 80058a4:	addeadde 	.word	0xaddeadde
 80058a8:	addeadde 	.word	0xaddeadde
 80058ac:	addeadde 	.word	0xaddeadde
 80058b0:	addeadde 	.word	0xaddeadde
 80058b4:	addeadde 	.word	0xaddeadde
 80058b8:	addeadde 	.word	0xaddeadde
 80058bc:	addeadde 	.word	0xaddeadde
 80058c0:	addeadde 	.word	0xaddeadde
 80058c4:	addeadde 	.word	0xaddeadde
 80058c8:	addeadde 	.word	0xaddeadde
 80058cc:	addeadde 	.word	0xaddeadde
 80058d0:	addeadde 	.word	0xaddeadde
 80058d4:	addeadde 	.word	0xaddeadde
 80058d8:	addeadde 	.word	0xaddeadde
 80058dc:	addeadde 	.word	0xaddeadde
 80058e0:	addeadde 	.word	0xaddeadde
 80058e4:	addeadde 	.word	0xaddeadde
 80058e8:	addeadde 	.word	0xaddeadde
 80058ec:	addeadde 	.word	0xaddeadde
 80058f0:	addeadde 	.word	0xaddeadde
 80058f4:	addeadde 	.word	0xaddeadde
 80058f8:	addeadde 	.word	0xaddeadde
 80058fc:	addeadde 	.word	0xaddeadde
 8005900:	addeadde 	.word	0xaddeadde
 8005904:	addeadde 	.word	0xaddeadde
 8005908:	addeadde 	.word	0xaddeadde
 800590c:	addeadde 	.word	0xaddeadde
 8005910:	addeadde 	.word	0xaddeadde
 8005914:	addeadde 	.word	0xaddeadde
 8005918:	addeadde 	.word	0xaddeadde
 800591c:	addeadde 	.word	0xaddeadde
 8005920:	addeadde 	.word	0xaddeadde
 8005924:	addeadde 	.word	0xaddeadde
 8005928:	addeadde 	.word	0xaddeadde
 800592c:	addeadde 	.word	0xaddeadde
 8005930:	addeadde 	.word	0xaddeadde
 8005934:	addeadde 	.word	0xaddeadde
 8005938:	addeadde 	.word	0xaddeadde
 800593c:	addeadde 	.word	0xaddeadde
 8005940:	addeadde 	.word	0xaddeadde
 8005944:	addeadde 	.word	0xaddeadde
 8005948:	addeadde 	.word	0xaddeadde
 800594c:	addeadde 	.word	0xaddeadde
 8005950:	addeadde 	.word	0xaddeadde
 8005954:	addeadde 	.word	0xaddeadde
 8005958:	addeadde 	.word	0xaddeadde
 800595c:	addeadde 	.word	0xaddeadde
 8005960:	addeadde 	.word	0xaddeadde
 8005964:	addeadde 	.word	0xaddeadde
 8005968:	addeadde 	.word	0xaddeadde
 800596c:	addeadde 	.word	0xaddeadde
 8005970:	addeadde 	.word	0xaddeadde
 8005974:	addeadde 	.word	0xaddeadde
 8005978:	addeadde 	.word	0xaddeadde
 800597c:	addeadde 	.word	0xaddeadde
 8005980:	addeadde 	.word	0xaddeadde
 8005984:	addeadde 	.word	0xaddeadde
 8005988:	addeadde 	.word	0xaddeadde
 800598c:	addeadde 	.word	0xaddeadde
 8005990:	addeadde 	.word	0xaddeadde
 8005994:	addeadde 	.word	0xaddeadde
 8005998:	addeadde 	.word	0xaddeadde
 800599c:	addeadde 	.word	0xaddeadde
 80059a0:	addeadde 	.word	0xaddeadde
 80059a4:	addeadde 	.word	0xaddeadde
 80059a8:	addeadde 	.word	0xaddeadde
 80059ac:	addeadde 	.word	0xaddeadde
 80059b0:	addeadde 	.word	0xaddeadde
 80059b4:	addeadde 	.word	0xaddeadde
 80059b8:	addeadde 	.word	0xaddeadde
 80059bc:	addeadde 	.word	0xaddeadde
 80059c0:	addeadde 	.word	0xaddeadde
 80059c4:	addeadde 	.word	0xaddeadde
 80059c8:	addeadde 	.word	0xaddeadde
 80059cc:	addeadde 	.word	0xaddeadde
 80059d0:	addeadde 	.word	0xaddeadde
 80059d4:	addeadde 	.word	0xaddeadde
 80059d8:	addeadde 	.word	0xaddeadde
 80059dc:	addeadde 	.word	0xaddeadde
 80059e0:	addeadde 	.word	0xaddeadde
 80059e4:	addeadde 	.word	0xaddeadde
 80059e8:	addeadde 	.word	0xaddeadde
 80059ec:	addeadde 	.word	0xaddeadde
 80059f0:	addeadde 	.word	0xaddeadde
 80059f4:	addeadde 	.word	0xaddeadde
 80059f8:	addeadde 	.word	0xaddeadde
 80059fc:	addeadde 	.word	0xaddeadde
 8005a00:	addeadde 	.word	0xaddeadde
 8005a04:	addeadde 	.word	0xaddeadde
 8005a08:	addeadde 	.word	0xaddeadde
 8005a0c:	addeadde 	.word	0xaddeadde
 8005a10:	addeadde 	.word	0xaddeadde
 8005a14:	addeadde 	.word	0xaddeadde
 8005a18:	addeadde 	.word	0xaddeadde
 8005a1c:	addeadde 	.word	0xaddeadde
 8005a20:	addeadde 	.word	0xaddeadde
 8005a24:	addeadde 	.word	0xaddeadde
 8005a28:	addeadde 	.word	0xaddeadde
 8005a2c:	addeadde 	.word	0xaddeadde
 8005a30:	addeadde 	.word	0xaddeadde
 8005a34:	addeadde 	.word	0xaddeadde
 8005a38:	addeadde 	.word	0xaddeadde
 8005a3c:	addeadde 	.word	0xaddeadde
 8005a40:	addeadde 	.word	0xaddeadde
 8005a44:	addeadde 	.word	0xaddeadde
 8005a48:	addeadde 	.word	0xaddeadde
 8005a4c:	addeadde 	.word	0xaddeadde
 8005a50:	addeadde 	.word	0xaddeadde
 8005a54:	addeadde 	.word	0xaddeadde
 8005a58:	addeadde 	.word	0xaddeadde
 8005a5c:	addeadde 	.word	0xaddeadde
 8005a60:	addeadde 	.word	0xaddeadde
 8005a64:	addeadde 	.word	0xaddeadde
 8005a68:	addeadde 	.word	0xaddeadde
 8005a6c:	addeadde 	.word	0xaddeadde
 8005a70:	addeadde 	.word	0xaddeadde
 8005a74:	addeadde 	.word	0xaddeadde
 8005a78:	addeadde 	.word	0xaddeadde
 8005a7c:	addeadde 	.word	0xaddeadde
 8005a80:	addeadde 	.word	0xaddeadde
 8005a84:	addeadde 	.word	0xaddeadde
 8005a88:	addeadde 	.word	0xaddeadde
 8005a8c:	addeadde 	.word	0xaddeadde
 8005a90:	addeadde 	.word	0xaddeadde
 8005a94:	addeadde 	.word	0xaddeadde
 8005a98:	addeadde 	.word	0xaddeadde
 8005a9c:	addeadde 	.word	0xaddeadde
 8005aa0:	addeadde 	.word	0xaddeadde
 8005aa4:	addeadde 	.word	0xaddeadde
 8005aa8:	addeadde 	.word	0xaddeadde
 8005aac:	addeadde 	.word	0xaddeadde
 8005ab0:	addeadde 	.word	0xaddeadde
 8005ab4:	addeadde 	.word	0xaddeadde
 8005ab8:	addeadde 	.word	0xaddeadde
 8005abc:	addeadde 	.word	0xaddeadde
 8005ac0:	addeadde 	.word	0xaddeadde
 8005ac4:	addeadde 	.word	0xaddeadde
 8005ac8:	addeadde 	.word	0xaddeadde
 8005acc:	addeadde 	.word	0xaddeadde
 8005ad0:	addeadde 	.word	0xaddeadde
 8005ad4:	addeadde 	.word	0xaddeadde
 8005ad8:	addeadde 	.word	0xaddeadde
 8005adc:	addeadde 	.word	0xaddeadde
 8005ae0:	addeadde 	.word	0xaddeadde
 8005ae4:	addeadde 	.word	0xaddeadde
 8005ae8:	addeadde 	.word	0xaddeadde
 8005aec:	addeadde 	.word	0xaddeadde
 8005af0:	addeadde 	.word	0xaddeadde
 8005af4:	addeadde 	.word	0xaddeadde
 8005af8:	addeadde 	.word	0xaddeadde
 8005afc:	addeadde 	.word	0xaddeadde
 8005b00:	addeadde 	.word	0xaddeadde
 8005b04:	addeadde 	.word	0xaddeadde
 8005b08:	addeadde 	.word	0xaddeadde
 8005b0c:	addeadde 	.word	0xaddeadde
 8005b10:	addeadde 	.word	0xaddeadde
 8005b14:	addeadde 	.word	0xaddeadde
 8005b18:	addeadde 	.word	0xaddeadde
 8005b1c:	addeadde 	.word	0xaddeadde
 8005b20:	addeadde 	.word	0xaddeadde
 8005b24:	addeadde 	.word	0xaddeadde
 8005b28:	addeadde 	.word	0xaddeadde
 8005b2c:	addeadde 	.word	0xaddeadde
 8005b30:	addeadde 	.word	0xaddeadde
 8005b34:	addeadde 	.word	0xaddeadde
 8005b38:	addeadde 	.word	0xaddeadde
 8005b3c:	addeadde 	.word	0xaddeadde
 8005b40:	addeadde 	.word	0xaddeadde
 8005b44:	addeadde 	.word	0xaddeadde
 8005b48:	addeadde 	.word	0xaddeadde
 8005b4c:	addeadde 	.word	0xaddeadde
 8005b50:	addeadde 	.word	0xaddeadde
 8005b54:	addeadde 	.word	0xaddeadde
 8005b58:	addeadde 	.word	0xaddeadde
 8005b5c:	addeadde 	.word	0xaddeadde
 8005b60:	addeadde 	.word	0xaddeadde
 8005b64:	addeadde 	.word	0xaddeadde
 8005b68:	addeadde 	.word	0xaddeadde
 8005b6c:	addeadde 	.word	0xaddeadde
 8005b70:	addeadde 	.word	0xaddeadde
 8005b74:	addeadde 	.word	0xaddeadde
 8005b78:	addeadde 	.word	0xaddeadde
 8005b7c:	addeadde 	.word	0xaddeadde
 8005b80:	addeadde 	.word	0xaddeadde
 8005b84:	addeadde 	.word	0xaddeadde
 8005b88:	addeadde 	.word	0xaddeadde
 8005b8c:	addeadde 	.word	0xaddeadde
 8005b90:	addeadde 	.word	0xaddeadde
 8005b94:	addeadde 	.word	0xaddeadde
 8005b98:	addeadde 	.word	0xaddeadde
 8005b9c:	addeadde 	.word	0xaddeadde
 8005ba0:	addeadde 	.word	0xaddeadde
 8005ba4:	addeadde 	.word	0xaddeadde
 8005ba8:	addeadde 	.word	0xaddeadde
 8005bac:	addeadde 	.word	0xaddeadde
 8005bb0:	addeadde 	.word	0xaddeadde
 8005bb4:	addeadde 	.word	0xaddeadde
 8005bb8:	addeadde 	.word	0xaddeadde
 8005bbc:	addeadde 	.word	0xaddeadde
 8005bc0:	addeadde 	.word	0xaddeadde
 8005bc4:	addeadde 	.word	0xaddeadde
 8005bc8:	addeadde 	.word	0xaddeadde
 8005bcc:	addeadde 	.word	0xaddeadde
 8005bd0:	addeadde 	.word	0xaddeadde
 8005bd4:	addeadde 	.word	0xaddeadde
 8005bd8:	addeadde 	.word	0xaddeadde
 8005bdc:	addeadde 	.word	0xaddeadde
 8005be0:	addeadde 	.word	0xaddeadde
 8005be4:	addeadde 	.word	0xaddeadde
 8005be8:	addeadde 	.word	0xaddeadde
 8005bec:	addeadde 	.word	0xaddeadde
 8005bf0:	addeadde 	.word	0xaddeadde
 8005bf4:	addeadde 	.word	0xaddeadde
 8005bf8:	addeadde 	.word	0xaddeadde
 8005bfc:	addeadde 	.word	0xaddeadde
 8005c00:	addeadde 	.word	0xaddeadde
 8005c04:	addeadde 	.word	0xaddeadde
 8005c08:	addeadde 	.word	0xaddeadde
 8005c0c:	addeadde 	.word	0xaddeadde
 8005c10:	addeadde 	.word	0xaddeadde
 8005c14:	addeadde 	.word	0xaddeadde
 8005c18:	addeadde 	.word	0xaddeadde
 8005c1c:	addeadde 	.word	0xaddeadde
 8005c20:	addeadde 	.word	0xaddeadde
 8005c24:	addeadde 	.word	0xaddeadde
 8005c28:	addeadde 	.word	0xaddeadde
 8005c2c:	addeadde 	.word	0xaddeadde
 8005c30:	addeadde 	.word	0xaddeadde
 8005c34:	addeadde 	.word	0xaddeadde
 8005c38:	addeadde 	.word	0xaddeadde
 8005c3c:	addeadde 	.word	0xaddeadde
 8005c40:	addeadde 	.word	0xaddeadde
 8005c44:	addeadde 	.word	0xaddeadde
 8005c48:	addeadde 	.word	0xaddeadde
 8005c4c:	addeadde 	.word	0xaddeadde
 8005c50:	addeadde 	.word	0xaddeadde
 8005c54:	addeadde 	.word	0xaddeadde
 8005c58:	addeadde 	.word	0xaddeadde
 8005c5c:	addeadde 	.word	0xaddeadde
 8005c60:	addeadde 	.word	0xaddeadde
 8005c64:	addeadde 	.word	0xaddeadde
 8005c68:	addeadde 	.word	0xaddeadde
 8005c6c:	addeadde 	.word	0xaddeadde
 8005c70:	addeadde 	.word	0xaddeadde
 8005c74:	addeadde 	.word	0xaddeadde
 8005c78:	addeadde 	.word	0xaddeadde
 8005c7c:	addeadde 	.word	0xaddeadde
 8005c80:	addeadde 	.word	0xaddeadde
 8005c84:	addeadde 	.word	0xaddeadde
 8005c88:	addeadde 	.word	0xaddeadde
 8005c8c:	addeadde 	.word	0xaddeadde
 8005c90:	addeadde 	.word	0xaddeadde
 8005c94:	addeadde 	.word	0xaddeadde
 8005c98:	addeadde 	.word	0xaddeadde
 8005c9c:	addeadde 	.word	0xaddeadde
 8005ca0:	addeadde 	.word	0xaddeadde
 8005ca4:	addeadde 	.word	0xaddeadde
 8005ca8:	addeadde 	.word	0xaddeadde
 8005cac:	addeadde 	.word	0xaddeadde
 8005cb0:	addeadde 	.word	0xaddeadde
 8005cb4:	addeadde 	.word	0xaddeadde
 8005cb8:	addeadde 	.word	0xaddeadde
 8005cbc:	addeadde 	.word	0xaddeadde
 8005cc0:	addeadde 	.word	0xaddeadde
 8005cc4:	addeadde 	.word	0xaddeadde
 8005cc8:	addeadde 	.word	0xaddeadde
 8005ccc:	addeadde 	.word	0xaddeadde
 8005cd0:	addeadde 	.word	0xaddeadde
 8005cd4:	addeadde 	.word	0xaddeadde
 8005cd8:	addeadde 	.word	0xaddeadde
 8005cdc:	addeadde 	.word	0xaddeadde
 8005ce0:	addeadde 	.word	0xaddeadde
 8005ce4:	addeadde 	.word	0xaddeadde
 8005ce8:	addeadde 	.word	0xaddeadde
 8005cec:	addeadde 	.word	0xaddeadde
 8005cf0:	addeadde 	.word	0xaddeadde
 8005cf4:	addeadde 	.word	0xaddeadde
 8005cf8:	addeadde 	.word	0xaddeadde
 8005cfc:	addeadde 	.word	0xaddeadde
 8005d00:	addeadde 	.word	0xaddeadde
 8005d04:	addeadde 	.word	0xaddeadde
 8005d08:	addeadde 	.word	0xaddeadde
 8005d0c:	addeadde 	.word	0xaddeadde
 8005d10:	addeadde 	.word	0xaddeadde
 8005d14:	addeadde 	.word	0xaddeadde
 8005d18:	addeadde 	.word	0xaddeadde
 8005d1c:	addeadde 	.word	0xaddeadde
 8005d20:	addeadde 	.word	0xaddeadde
 8005d24:	addeadde 	.word	0xaddeadde
 8005d28:	addeadde 	.word	0xaddeadde
 8005d2c:	addeadde 	.word	0xaddeadde
 8005d30:	addeadde 	.word	0xaddeadde
 8005d34:	addeadde 	.word	0xaddeadde
 8005d38:	addeadde 	.word	0xaddeadde
 8005d3c:	addeadde 	.word	0xaddeadde
 8005d40:	addeadde 	.word	0xaddeadde
 8005d44:	addeadde 	.word	0xaddeadde
 8005d48:	addeadde 	.word	0xaddeadde
 8005d4c:	addeadde 	.word	0xaddeadde
 8005d50:	addeadde 	.word	0xaddeadde
 8005d54:	addeadde 	.word	0xaddeadde
 8005d58:	addeadde 	.word	0xaddeadde
 8005d5c:	addeadde 	.word	0xaddeadde
 8005d60:	addeadde 	.word	0xaddeadde
 8005d64:	addeadde 	.word	0xaddeadde
 8005d68:	addeadde 	.word	0xaddeadde
 8005d6c:	addeadde 	.word	0xaddeadde
 8005d70:	addeadde 	.word	0xaddeadde
 8005d74:	addeadde 	.word	0xaddeadde
 8005d78:	addeadde 	.word	0xaddeadde
 8005d7c:	addeadde 	.word	0xaddeadde
 8005d80:	addeadde 	.word	0xaddeadde
 8005d84:	addeadde 	.word	0xaddeadde
 8005d88:	addeadde 	.word	0xaddeadde
 8005d8c:	addeadde 	.word	0xaddeadde
 8005d90:	addeadde 	.word	0xaddeadde
 8005d94:	addeadde 	.word	0xaddeadde
 8005d98:	addeadde 	.word	0xaddeadde
 8005d9c:	addeadde 	.word	0xaddeadde
 8005da0:	addeadde 	.word	0xaddeadde
 8005da4:	addeadde 	.word	0xaddeadde
 8005da8:	addeadde 	.word	0xaddeadde
 8005dac:	addeadde 	.word	0xaddeadde
 8005db0:	addeadde 	.word	0xaddeadde
 8005db4:	addeadde 	.word	0xaddeadde
 8005db8:	addeadde 	.word	0xaddeadde
 8005dbc:	addeadde 	.word	0xaddeadde
 8005dc0:	addeadde 	.word	0xaddeadde
 8005dc4:	addeadde 	.word	0xaddeadde
 8005dc8:	addeadde 	.word	0xaddeadde
 8005dcc:	addeadde 	.word	0xaddeadde
 8005dd0:	addeadde 	.word	0xaddeadde
 8005dd4:	addeadde 	.word	0xaddeadde
 8005dd8:	addeadde 	.word	0xaddeadde
 8005ddc:	addeadde 	.word	0xaddeadde
 8005de0:	addeadde 	.word	0xaddeadde
 8005de4:	addeadde 	.word	0xaddeadde
 8005de8:	addeadde 	.word	0xaddeadde
 8005dec:	addeadde 	.word	0xaddeadde
 8005df0:	addeadde 	.word	0xaddeadde
 8005df4:	addeadde 	.word	0xaddeadde
 8005df8:	addeadde 	.word	0xaddeadde
 8005dfc:	addeadde 	.word	0xaddeadde
 8005e00:	addeadde 	.word	0xaddeadde
 8005e04:	addeadde 	.word	0xaddeadde
 8005e08:	addeadde 	.word	0xaddeadde
 8005e0c:	addeadde 	.word	0xaddeadde
 8005e10:	addeadde 	.word	0xaddeadde
 8005e14:	addeadde 	.word	0xaddeadde
 8005e18:	addeadde 	.word	0xaddeadde
 8005e1c:	addeadde 	.word	0xaddeadde
 8005e20:	addeadde 	.word	0xaddeadde
 8005e24:	addeadde 	.word	0xaddeadde
 8005e28:	addeadde 	.word	0xaddeadde
 8005e2c:	addeadde 	.word	0xaddeadde
 8005e30:	addeadde 	.word	0xaddeadde
 8005e34:	addeadde 	.word	0xaddeadde
 8005e38:	addeadde 	.word	0xaddeadde
 8005e3c:	addeadde 	.word	0xaddeadde
 8005e40:	addeadde 	.word	0xaddeadde
 8005e44:	addeadde 	.word	0xaddeadde
 8005e48:	addeadde 	.word	0xaddeadde
 8005e4c:	addeadde 	.word	0xaddeadde
 8005e50:	addeadde 	.word	0xaddeadde
 8005e54:	addeadde 	.word	0xaddeadde
 8005e58:	addeadde 	.word	0xaddeadde
 8005e5c:	addeadde 	.word	0xaddeadde
 8005e60:	addeadde 	.word	0xaddeadde
 8005e64:	addeadde 	.word	0xaddeadde
 8005e68:	addeadde 	.word	0xaddeadde
 8005e6c:	addeadde 	.word	0xaddeadde
 8005e70:	addeadde 	.word	0xaddeadde
 8005e74:	addeadde 	.word	0xaddeadde
 8005e78:	addeadde 	.word	0xaddeadde
 8005e7c:	addeadde 	.word	0xaddeadde
 8005e80:	addeadde 	.word	0xaddeadde
 8005e84:	addeadde 	.word	0xaddeadde
 8005e88:	addeadde 	.word	0xaddeadde
 8005e8c:	addeadde 	.word	0xaddeadde
 8005e90:	addeadde 	.word	0xaddeadde
 8005e94:	addeadde 	.word	0xaddeadde
 8005e98:	addeadde 	.word	0xaddeadde
 8005e9c:	addeadde 	.word	0xaddeadde
 8005ea0:	addeadde 	.word	0xaddeadde
 8005ea4:	addeadde 	.word	0xaddeadde
 8005ea8:	addeadde 	.word	0xaddeadde
 8005eac:	addeadde 	.word	0xaddeadde
 8005eb0:	addeadde 	.word	0xaddeadde
 8005eb4:	addeadde 	.word	0xaddeadde
 8005eb8:	addeadde 	.word	0xaddeadde
 8005ebc:	addeadde 	.word	0xaddeadde
 8005ec0:	addeadde 	.word	0xaddeadde
 8005ec4:	addeadde 	.word	0xaddeadde
 8005ec8:	addeadde 	.word	0xaddeadde
 8005ecc:	addeadde 	.word	0xaddeadde
 8005ed0:	addeadde 	.word	0xaddeadde
 8005ed4:	addeadde 	.word	0xaddeadde
 8005ed8:	addeadde 	.word	0xaddeadde
 8005edc:	addeadde 	.word	0xaddeadde
 8005ee0:	addeadde 	.word	0xaddeadde
 8005ee4:	addeadde 	.word	0xaddeadde
 8005ee8:	addeadde 	.word	0xaddeadde
 8005eec:	addeadde 	.word	0xaddeadde
 8005ef0:	addeadde 	.word	0xaddeadde
 8005ef4:	addeadde 	.word	0xaddeadde
 8005ef8:	addeadde 	.word	0xaddeadde
 8005efc:	addeadde 	.word	0xaddeadde
 8005f00:	addeadde 	.word	0xaddeadde
 8005f04:	addeadde 	.word	0xaddeadde
 8005f08:	addeadde 	.word	0xaddeadde
 8005f0c:	addeadde 	.word	0xaddeadde
 8005f10:	addeadde 	.word	0xaddeadde
 8005f14:	addeadde 	.word	0xaddeadde
 8005f18:	addeadde 	.word	0xaddeadde
 8005f1c:	addeadde 	.word	0xaddeadde
 8005f20:	addeadde 	.word	0xaddeadde
 8005f24:	addeadde 	.word	0xaddeadde
 8005f28:	addeadde 	.word	0xaddeadde
 8005f2c:	addeadde 	.word	0xaddeadde
 8005f30:	addeadde 	.word	0xaddeadde
 8005f34:	addeadde 	.word	0xaddeadde
 8005f38:	addeadde 	.word	0xaddeadde
 8005f3c:	addeadde 	.word	0xaddeadde
 8005f40:	addeadde 	.word	0xaddeadde
 8005f44:	addeadde 	.word	0xaddeadde
 8005f48:	addeadde 	.word	0xaddeadde
 8005f4c:	addeadde 	.word	0xaddeadde
 8005f50:	addeadde 	.word	0xaddeadde
 8005f54:	addeadde 	.word	0xaddeadde
 8005f58:	addeadde 	.word	0xaddeadde
 8005f5c:	addeadde 	.word	0xaddeadde
 8005f60:	addeadde 	.word	0xaddeadde
 8005f64:	addeadde 	.word	0xaddeadde
 8005f68:	addeadde 	.word	0xaddeadde
 8005f6c:	addeadde 	.word	0xaddeadde
 8005f70:	addeadde 	.word	0xaddeadde
 8005f74:	addeadde 	.word	0xaddeadde
 8005f78:	addeadde 	.word	0xaddeadde
 8005f7c:	addeadde 	.word	0xaddeadde
 8005f80:	addeadde 	.word	0xaddeadde
 8005f84:	addeadde 	.word	0xaddeadde
 8005f88:	addeadde 	.word	0xaddeadde
 8005f8c:	addeadde 	.word	0xaddeadde
 8005f90:	addeadde 	.word	0xaddeadde
 8005f94:	addeadde 	.word	0xaddeadde
 8005f98:	addeadde 	.word	0xaddeadde
 8005f9c:	addeadde 	.word	0xaddeadde
 8005fa0:	addeadde 	.word	0xaddeadde
 8005fa4:	addeadde 	.word	0xaddeadde
 8005fa8:	addeadde 	.word	0xaddeadde
 8005fac:	addeadde 	.word	0xaddeadde
 8005fb0:	addeadde 	.word	0xaddeadde
 8005fb4:	addeadde 	.word	0xaddeadde
 8005fb8:	addeadde 	.word	0xaddeadde
 8005fbc:	addeadde 	.word	0xaddeadde
 8005fc0:	addeadde 	.word	0xaddeadde
 8005fc4:	addeadde 	.word	0xaddeadde
 8005fc8:	addeadde 	.word	0xaddeadde
 8005fcc:	addeadde 	.word	0xaddeadde
 8005fd0:	addeadde 	.word	0xaddeadde
 8005fd4:	addeadde 	.word	0xaddeadde
 8005fd8:	addeadde 	.word	0xaddeadde
 8005fdc:	addeadde 	.word	0xaddeadde
 8005fe0:	addeadde 	.word	0xaddeadde
 8005fe4:	addeadde 	.word	0xaddeadde
 8005fe8:	addeadde 	.word	0xaddeadde
 8005fec:	addeadde 	.word	0xaddeadde
 8005ff0:	addeadde 	.word	0xaddeadde
 8005ff4:	addeadde 	.word	0xaddeadde
 8005ff8:	addeadde 	.word	0xaddeadde
 8005ffc:	addeadde 	.word	0xaddeadde
 8006000:	addeadde 	.word	0xaddeadde
 8006004:	addeadde 	.word	0xaddeadde
 8006008:	addeadde 	.word	0xaddeadde
 800600c:	addeadde 	.word	0xaddeadde
 8006010:	addeadde 	.word	0xaddeadde
 8006014:	addeadde 	.word	0xaddeadde
 8006018:	addeadde 	.word	0xaddeadde
 800601c:	addeadde 	.word	0xaddeadde
 8006020:	addeadde 	.word	0xaddeadde
 8006024:	addeadde 	.word	0xaddeadde
 8006028:	addeadde 	.word	0xaddeadde
 800602c:	addeadde 	.word	0xaddeadde
 8006030:	addeadde 	.word	0xaddeadde
 8006034:	addeadde 	.word	0xaddeadde
 8006038:	addeadde 	.word	0xaddeadde
 800603c:	addeadde 	.word	0xaddeadde
 8006040:	addeadde 	.word	0xaddeadde
 8006044:	addeadde 	.word	0xaddeadde
 8006048:	addeadde 	.word	0xaddeadde
 800604c:	addeadde 	.word	0xaddeadde
 8006050:	addeadde 	.word	0xaddeadde
 8006054:	addeadde 	.word	0xaddeadde
 8006058:	addeadde 	.word	0xaddeadde
 800605c:	addeadde 	.word	0xaddeadde
 8006060:	addeadde 	.word	0xaddeadde
 8006064:	addeadde 	.word	0xaddeadde
 8006068:	addeadde 	.word	0xaddeadde
 800606c:	addeadde 	.word	0xaddeadde
 8006070:	addeadde 	.word	0xaddeadde
 8006074:	addeadde 	.word	0xaddeadde
 8006078:	addeadde 	.word	0xaddeadde
 800607c:	addeadde 	.word	0xaddeadde
 8006080:	addeadde 	.word	0xaddeadde
 8006084:	addeadde 	.word	0xaddeadde
 8006088:	addeadde 	.word	0xaddeadde
 800608c:	addeadde 	.word	0xaddeadde
 8006090:	addeadde 	.word	0xaddeadde
 8006094:	addeadde 	.word	0xaddeadde
 8006098:	addeadde 	.word	0xaddeadde
 800609c:	addeadde 	.word	0xaddeadde
 80060a0:	addeadde 	.word	0xaddeadde
 80060a4:	addeadde 	.word	0xaddeadde
 80060a8:	addeadde 	.word	0xaddeadde
 80060ac:	addeadde 	.word	0xaddeadde
 80060b0:	addeadde 	.word	0xaddeadde
 80060b4:	addeadde 	.word	0xaddeadde
 80060b8:	addeadde 	.word	0xaddeadde
 80060bc:	addeadde 	.word	0xaddeadde
 80060c0:	addeadde 	.word	0xaddeadde
 80060c4:	addeadde 	.word	0xaddeadde
 80060c8:	addeadde 	.word	0xaddeadde
 80060cc:	addeadde 	.word	0xaddeadde
 80060d0:	addeadde 	.word	0xaddeadde
 80060d4:	addeadde 	.word	0xaddeadde
 80060d8:	addeadde 	.word	0xaddeadde
 80060dc:	addeadde 	.word	0xaddeadde
 80060e0:	addeadde 	.word	0xaddeadde
 80060e4:	addeadde 	.word	0xaddeadde
 80060e8:	addeadde 	.word	0xaddeadde
 80060ec:	addeadde 	.word	0xaddeadde
 80060f0:	addeadde 	.word	0xaddeadde
 80060f4:	addeadde 	.word	0xaddeadde
 80060f8:	addeadde 	.word	0xaddeadde
 80060fc:	addeadde 	.word	0xaddeadde
 8006100:	addeadde 	.word	0xaddeadde
 8006104:	addeadde 	.word	0xaddeadde
 8006108:	addeadde 	.word	0xaddeadde
 800610c:	addeadde 	.word	0xaddeadde
 8006110:	addeadde 	.word	0xaddeadde
 8006114:	addeadde 	.word	0xaddeadde
 8006118:	addeadde 	.word	0xaddeadde
 800611c:	addeadde 	.word	0xaddeadde
 8006120:	addeadde 	.word	0xaddeadde
 8006124:	addeadde 	.word	0xaddeadde
 8006128:	addeadde 	.word	0xaddeadde
 800612c:	addeadde 	.word	0xaddeadde
 8006130:	addeadde 	.word	0xaddeadde
 8006134:	addeadde 	.word	0xaddeadde
 8006138:	addeadde 	.word	0xaddeadde
 800613c:	addeadde 	.word	0xaddeadde
 8006140:	addeadde 	.word	0xaddeadde
 8006144:	addeadde 	.word	0xaddeadde
 8006148:	addeadde 	.word	0xaddeadde
 800614c:	addeadde 	.word	0xaddeadde
 8006150:	addeadde 	.word	0xaddeadde
 8006154:	addeadde 	.word	0xaddeadde
 8006158:	addeadde 	.word	0xaddeadde
 800615c:	addeadde 	.word	0xaddeadde
 8006160:	addeadde 	.word	0xaddeadde
 8006164:	addeadde 	.word	0xaddeadde
 8006168:	addeadde 	.word	0xaddeadde
 800616c:	addeadde 	.word	0xaddeadde
 8006170:	addeadde 	.word	0xaddeadde
 8006174:	addeadde 	.word	0xaddeadde
 8006178:	addeadde 	.word	0xaddeadde
 800617c:	addeadde 	.word	0xaddeadde
 8006180:	addeadde 	.word	0xaddeadde
 8006184:	addeadde 	.word	0xaddeadde
 8006188:	addeadde 	.word	0xaddeadde
 800618c:	addeadde 	.word	0xaddeadde
 8006190:	addeadde 	.word	0xaddeadde
 8006194:	addeadde 	.word	0xaddeadde
 8006198:	addeadde 	.word	0xaddeadde
 800619c:	addeadde 	.word	0xaddeadde
 80061a0:	addeadde 	.word	0xaddeadde
 80061a4:	addeadde 	.word	0xaddeadde
 80061a8:	addeadde 	.word	0xaddeadde
 80061ac:	addeadde 	.word	0xaddeadde
 80061b0:	addeadde 	.word	0xaddeadde
 80061b4:	addeadde 	.word	0xaddeadde
 80061b8:	addeadde 	.word	0xaddeadde
 80061bc:	addeadde 	.word	0xaddeadde
 80061c0:	addeadde 	.word	0xaddeadde
 80061c4:	addeadde 	.word	0xaddeadde
 80061c8:	addeadde 	.word	0xaddeadde
 80061cc:	addeadde 	.word	0xaddeadde
 80061d0:	addeadde 	.word	0xaddeadde
 80061d4:	addeadde 	.word	0xaddeadde
 80061d8:	addeadde 	.word	0xaddeadde
 80061dc:	addeadde 	.word	0xaddeadde
 80061e0:	addeadde 	.word	0xaddeadde
 80061e4:	addeadde 	.word	0xaddeadde
 80061e8:	addeadde 	.word	0xaddeadde
 80061ec:	addeadde 	.word	0xaddeadde
 80061f0:	addeadde 	.word	0xaddeadde
 80061f4:	addeadde 	.word	0xaddeadde
 80061f8:	addeadde 	.word	0xaddeadde
 80061fc:	addeadde 	.word	0xaddeadde
 8006200:	addeadde 	.word	0xaddeadde
 8006204:	addeadde 	.word	0xaddeadde
 8006208:	addeadde 	.word	0xaddeadde
 800620c:	addeadde 	.word	0xaddeadde
 8006210:	addeadde 	.word	0xaddeadde
 8006214:	addeadde 	.word	0xaddeadde
 8006218:	addeadde 	.word	0xaddeadde
 800621c:	addeadde 	.word	0xaddeadde
 8006220:	addeadde 	.word	0xaddeadde
 8006224:	addeadde 	.word	0xaddeadde
 8006228:	addeadde 	.word	0xaddeadde
 800622c:	addeadde 	.word	0xaddeadde
 8006230:	addeadde 	.word	0xaddeadde
 8006234:	addeadde 	.word	0xaddeadde
 8006238:	addeadde 	.word	0xaddeadde
 800623c:	addeadde 	.word	0xaddeadde
 8006240:	addeadde 	.word	0xaddeadde
 8006244:	addeadde 	.word	0xaddeadde
 8006248:	addeadde 	.word	0xaddeadde
 800624c:	addeadde 	.word	0xaddeadde
 8006250:	addeadde 	.word	0xaddeadde
 8006254:	addeadde 	.word	0xaddeadde
 8006258:	addeadde 	.word	0xaddeadde
 800625c:	addeadde 	.word	0xaddeadde
 8006260:	addeadde 	.word	0xaddeadde
 8006264:	addeadde 	.word	0xaddeadde
 8006268:	addeadde 	.word	0xaddeadde
 800626c:	addeadde 	.word	0xaddeadde
 8006270:	addeadde 	.word	0xaddeadde
 8006274:	addeadde 	.word	0xaddeadde
 8006278:	addeadde 	.word	0xaddeadde
 800627c:	addeadde 	.word	0xaddeadde
 8006280:	addeadde 	.word	0xaddeadde
 8006284:	addeadde 	.word	0xaddeadde
 8006288:	addeadde 	.word	0xaddeadde
 800628c:	addeadde 	.word	0xaddeadde
 8006290:	addeadde 	.word	0xaddeadde
 8006294:	addeadde 	.word	0xaddeadde
 8006298:	addeadde 	.word	0xaddeadde
 800629c:	addeadde 	.word	0xaddeadde
 80062a0:	addeadde 	.word	0xaddeadde
 80062a4:	addeadde 	.word	0xaddeadde
 80062a8:	addeadde 	.word	0xaddeadde
 80062ac:	addeadde 	.word	0xaddeadde
 80062b0:	addeadde 	.word	0xaddeadde
 80062b4:	addeadde 	.word	0xaddeadde
 80062b8:	addeadde 	.word	0xaddeadde
 80062bc:	addeadde 	.word	0xaddeadde
 80062c0:	addeadde 	.word	0xaddeadde
 80062c4:	addeadde 	.word	0xaddeadde
 80062c8:	addeadde 	.word	0xaddeadde
 80062cc:	addeadde 	.word	0xaddeadde
 80062d0:	addeadde 	.word	0xaddeadde
 80062d4:	addeadde 	.word	0xaddeadde
 80062d8:	addeadde 	.word	0xaddeadde
 80062dc:	addeadde 	.word	0xaddeadde
 80062e0:	addeadde 	.word	0xaddeadde
 80062e4:	addeadde 	.word	0xaddeadde
 80062e8:	addeadde 	.word	0xaddeadde
 80062ec:	addeadde 	.word	0xaddeadde
 80062f0:	addeadde 	.word	0xaddeadde
 80062f4:	addeadde 	.word	0xaddeadde
 80062f8:	addeadde 	.word	0xaddeadde
 80062fc:	addeadde 	.word	0xaddeadde
 8006300:	addeadde 	.word	0xaddeadde
 8006304:	addeadde 	.word	0xaddeadde
 8006308:	addeadde 	.word	0xaddeadde
 800630c:	addeadde 	.word	0xaddeadde
 8006310:	addeadde 	.word	0xaddeadde
 8006314:	addeadde 	.word	0xaddeadde
 8006318:	addeadde 	.word	0xaddeadde
 800631c:	addeadde 	.word	0xaddeadde
 8006320:	addeadde 	.word	0xaddeadde
 8006324:	addeadde 	.word	0xaddeadde
 8006328:	addeadde 	.word	0xaddeadde
 800632c:	addeadde 	.word	0xaddeadde
 8006330:	addeadde 	.word	0xaddeadde
 8006334:	addeadde 	.word	0xaddeadde
 8006338:	addeadde 	.word	0xaddeadde
 800633c:	addeadde 	.word	0xaddeadde
 8006340:	addeadde 	.word	0xaddeadde
 8006344:	addeadde 	.word	0xaddeadde
 8006348:	addeadde 	.word	0xaddeadde
 800634c:	addeadde 	.word	0xaddeadde
 8006350:	addeadde 	.word	0xaddeadde
 8006354:	addeadde 	.word	0xaddeadde
 8006358:	addeadde 	.word	0xaddeadde
 800635c:	addeadde 	.word	0xaddeadde
 8006360:	addeadde 	.word	0xaddeadde
 8006364:	addeadde 	.word	0xaddeadde
 8006368:	addeadde 	.word	0xaddeadde
 800636c:	addeadde 	.word	0xaddeadde
 8006370:	addeadde 	.word	0xaddeadde
 8006374:	addeadde 	.word	0xaddeadde
 8006378:	addeadde 	.word	0xaddeadde
 800637c:	addeadde 	.word	0xaddeadde
 8006380:	addeadde 	.word	0xaddeadde
 8006384:	addeadde 	.word	0xaddeadde
 8006388:	addeadde 	.word	0xaddeadde
 800638c:	addeadde 	.word	0xaddeadde
 8006390:	addeadde 	.word	0xaddeadde
 8006394:	addeadde 	.word	0xaddeadde
 8006398:	addeadde 	.word	0xaddeadde
 800639c:	addeadde 	.word	0xaddeadde
 80063a0:	addeadde 	.word	0xaddeadde
 80063a4:	addeadde 	.word	0xaddeadde
 80063a8:	addeadde 	.word	0xaddeadde
 80063ac:	addeadde 	.word	0xaddeadde
 80063b0:	addeadde 	.word	0xaddeadde
 80063b4:	addeadde 	.word	0xaddeadde
 80063b8:	addeadde 	.word	0xaddeadde
 80063bc:	addeadde 	.word	0xaddeadde
 80063c0:	addeadde 	.word	0xaddeadde
 80063c4:	addeadde 	.word	0xaddeadde
 80063c8:	addeadde 	.word	0xaddeadde
 80063cc:	addeadde 	.word	0xaddeadde
 80063d0:	addeadde 	.word	0xaddeadde
 80063d4:	addeadde 	.word	0xaddeadde
 80063d8:	addeadde 	.word	0xaddeadde
 80063dc:	addeadde 	.word	0xaddeadde
 80063e0:	addeadde 	.word	0xaddeadde
 80063e4:	addeadde 	.word	0xaddeadde
 80063e8:	addeadde 	.word	0xaddeadde
 80063ec:	addeadde 	.word	0xaddeadde
 80063f0:	addeadde 	.word	0xaddeadde
 80063f4:	addeadde 	.word	0xaddeadde
 80063f8:	addeadde 	.word	0xaddeadde
 80063fc:	addeadde 	.word	0xaddeadde
 8006400:	addeadde 	.word	0xaddeadde
 8006404:	addeadde 	.word	0xaddeadde
 8006408:	addeadde 	.word	0xaddeadde
 800640c:	addeadde 	.word	0xaddeadde
 8006410:	addeadde 	.word	0xaddeadde
 8006414:	addeadde 	.word	0xaddeadde
 8006418:	addeadde 	.word	0xaddeadde
 800641c:	addeadde 	.word	0xaddeadde
 8006420:	addeadde 	.word	0xaddeadde
 8006424:	addeadde 	.word	0xaddeadde
 8006428:	addeadde 	.word	0xaddeadde
 800642c:	addeadde 	.word	0xaddeadde
 8006430:	addeadde 	.word	0xaddeadde
 8006434:	addeadde 	.word	0xaddeadde
 8006438:	addeadde 	.word	0xaddeadde
 800643c:	addeadde 	.word	0xaddeadde
 8006440:	addeadde 	.word	0xaddeadde
 8006444:	addeadde 	.word	0xaddeadde
 8006448:	addeadde 	.word	0xaddeadde
 800644c:	addeadde 	.word	0xaddeadde
 8006450:	addeadde 	.word	0xaddeadde
 8006454:	addeadde 	.word	0xaddeadde
 8006458:	addeadde 	.word	0xaddeadde
 800645c:	addeadde 	.word	0xaddeadde
 8006460:	addeadde 	.word	0xaddeadde
 8006464:	addeadde 	.word	0xaddeadde
 8006468:	addeadde 	.word	0xaddeadde
 800646c:	addeadde 	.word	0xaddeadde
 8006470:	addeadde 	.word	0xaddeadde
 8006474:	addeadde 	.word	0xaddeadde
 8006478:	addeadde 	.word	0xaddeadde
 800647c:	addeadde 	.word	0xaddeadde
 8006480:	addeadde 	.word	0xaddeadde
 8006484:	addeadde 	.word	0xaddeadde
 8006488:	addeadde 	.word	0xaddeadde
 800648c:	addeadde 	.word	0xaddeadde
 8006490:	addeadde 	.word	0xaddeadde
 8006494:	addeadde 	.word	0xaddeadde
 8006498:	addeadde 	.word	0xaddeadde
 800649c:	addeadde 	.word	0xaddeadde
 80064a0:	addeadde 	.word	0xaddeadde
 80064a4:	addeadde 	.word	0xaddeadde
 80064a8:	addeadde 	.word	0xaddeadde
 80064ac:	addeadde 	.word	0xaddeadde
 80064b0:	addeadde 	.word	0xaddeadde
 80064b4:	addeadde 	.word	0xaddeadde
 80064b8:	addeadde 	.word	0xaddeadde
 80064bc:	addeadde 	.word	0xaddeadde
 80064c0:	addeadde 	.word	0xaddeadde
 80064c4:	addeadde 	.word	0xaddeadde
 80064c8:	addeadde 	.word	0xaddeadde
 80064cc:	addeadde 	.word	0xaddeadde
 80064d0:	addeadde 	.word	0xaddeadde
 80064d4:	addeadde 	.word	0xaddeadde
 80064d8:	addeadde 	.word	0xaddeadde
 80064dc:	addeadde 	.word	0xaddeadde
 80064e0:	addeadde 	.word	0xaddeadde
 80064e4:	addeadde 	.word	0xaddeadde
 80064e8:	addeadde 	.word	0xaddeadde
 80064ec:	addeadde 	.word	0xaddeadde
 80064f0:	addeadde 	.word	0xaddeadde
 80064f4:	addeadde 	.word	0xaddeadde
 80064f8:	addeadde 	.word	0xaddeadde
 80064fc:	addeadde 	.word	0xaddeadde
 8006500:	addeadde 	.word	0xaddeadde
 8006504:	addeadde 	.word	0xaddeadde
 8006508:	addeadde 	.word	0xaddeadde
 800650c:	addeadde 	.word	0xaddeadde
 8006510:	addeadde 	.word	0xaddeadde
 8006514:	addeadde 	.word	0xaddeadde
 8006518:	addeadde 	.word	0xaddeadde
 800651c:	addeadde 	.word	0xaddeadde
 8006520:	addeadde 	.word	0xaddeadde
 8006524:	addeadde 	.word	0xaddeadde
 8006528:	addeadde 	.word	0xaddeadde
 800652c:	addeadde 	.word	0xaddeadde
 8006530:	addeadde 	.word	0xaddeadde
 8006534:	addeadde 	.word	0xaddeadde
 8006538:	addeadde 	.word	0xaddeadde
 800653c:	addeadde 	.word	0xaddeadde
 8006540:	addeadde 	.word	0xaddeadde
 8006544:	addeadde 	.word	0xaddeadde
 8006548:	addeadde 	.word	0xaddeadde
 800654c:	addeadde 	.word	0xaddeadde
 8006550:	addeadde 	.word	0xaddeadde
 8006554:	addeadde 	.word	0xaddeadde
 8006558:	addeadde 	.word	0xaddeadde
 800655c:	addeadde 	.word	0xaddeadde
 8006560:	addeadde 	.word	0xaddeadde
 8006564:	addeadde 	.word	0xaddeadde
 8006568:	addeadde 	.word	0xaddeadde
 800656c:	addeadde 	.word	0xaddeadde
 8006570:	addeadde 	.word	0xaddeadde
 8006574:	addeadde 	.word	0xaddeadde
 8006578:	addeadde 	.word	0xaddeadde
 800657c:	addeadde 	.word	0xaddeadde
 8006580:	addeadde 	.word	0xaddeadde
 8006584:	addeadde 	.word	0xaddeadde
 8006588:	addeadde 	.word	0xaddeadde
 800658c:	addeadde 	.word	0xaddeadde
 8006590:	addeadde 	.word	0xaddeadde
 8006594:	addeadde 	.word	0xaddeadde
 8006598:	addeadde 	.word	0xaddeadde
 800659c:	addeadde 	.word	0xaddeadde
 80065a0:	addeadde 	.word	0xaddeadde
 80065a4:	addeadde 	.word	0xaddeadde
 80065a8:	addeadde 	.word	0xaddeadde
 80065ac:	addeadde 	.word	0xaddeadde
 80065b0:	addeadde 	.word	0xaddeadde
 80065b4:	addeadde 	.word	0xaddeadde
 80065b8:	addeadde 	.word	0xaddeadde
 80065bc:	addeadde 	.word	0xaddeadde
 80065c0:	addeadde 	.word	0xaddeadde
 80065c4:	addeadde 	.word	0xaddeadde
 80065c8:	addeadde 	.word	0xaddeadde
 80065cc:	addeadde 	.word	0xaddeadde
 80065d0:	addeadde 	.word	0xaddeadde
 80065d4:	addeadde 	.word	0xaddeadde
 80065d8:	addeadde 	.word	0xaddeadde
 80065dc:	addeadde 	.word	0xaddeadde
 80065e0:	addeadde 	.word	0xaddeadde
 80065e4:	addeadde 	.word	0xaddeadde
 80065e8:	addeadde 	.word	0xaddeadde
 80065ec:	addeadde 	.word	0xaddeadde
 80065f0:	addeadde 	.word	0xaddeadde
 80065f4:	addeadde 	.word	0xaddeadde
 80065f8:	addeadde 	.word	0xaddeadde
 80065fc:	addeadde 	.word	0xaddeadde
 8006600:	addeadde 	.word	0xaddeadde
 8006604:	addeadde 	.word	0xaddeadde
 8006608:	addeadde 	.word	0xaddeadde
 800660c:	addeadde 	.word	0xaddeadde
 8006610:	addeadde 	.word	0xaddeadde
 8006614:	addeadde 	.word	0xaddeadde
 8006618:	addeadde 	.word	0xaddeadde
 800661c:	addeadde 	.word	0xaddeadde
 8006620:	addeadde 	.word	0xaddeadde
 8006624:	addeadde 	.word	0xaddeadde
 8006628:	addeadde 	.word	0xaddeadde
 800662c:	addeadde 	.word	0xaddeadde
 8006630:	addeadde 	.word	0xaddeadde
 8006634:	addeadde 	.word	0xaddeadde
 8006638:	addeadde 	.word	0xaddeadde
 800663c:	addeadde 	.word	0xaddeadde
 8006640:	addeadde 	.word	0xaddeadde
 8006644:	addeadde 	.word	0xaddeadde
 8006648:	addeadde 	.word	0xaddeadde
 800664c:	addeadde 	.word	0xaddeadde
 8006650:	addeadde 	.word	0xaddeadde
 8006654:	addeadde 	.word	0xaddeadde
 8006658:	addeadde 	.word	0xaddeadde
 800665c:	addeadde 	.word	0xaddeadde
 8006660:	addeadde 	.word	0xaddeadde
 8006664:	addeadde 	.word	0xaddeadde
 8006668:	addeadde 	.word	0xaddeadde
 800666c:	addeadde 	.word	0xaddeadde
 8006670:	addeadde 	.word	0xaddeadde
 8006674:	addeadde 	.word	0xaddeadde
 8006678:	addeadde 	.word	0xaddeadde
 800667c:	addeadde 	.word	0xaddeadde
 8006680:	addeadde 	.word	0xaddeadde
 8006684:	addeadde 	.word	0xaddeadde
 8006688:	addeadde 	.word	0xaddeadde
 800668c:	addeadde 	.word	0xaddeadde
 8006690:	addeadde 	.word	0xaddeadde
 8006694:	addeadde 	.word	0xaddeadde
 8006698:	addeadde 	.word	0xaddeadde
 800669c:	addeadde 	.word	0xaddeadde
 80066a0:	addeadde 	.word	0xaddeadde
 80066a4:	addeadde 	.word	0xaddeadde
 80066a8:	addeadde 	.word	0xaddeadde
 80066ac:	addeadde 	.word	0xaddeadde
 80066b0:	addeadde 	.word	0xaddeadde
 80066b4:	addeadde 	.word	0xaddeadde
 80066b8:	addeadde 	.word	0xaddeadde
 80066bc:	addeadde 	.word	0xaddeadde
 80066c0:	addeadde 	.word	0xaddeadde
 80066c4:	addeadde 	.word	0xaddeadde
 80066c8:	addeadde 	.word	0xaddeadde
 80066cc:	addeadde 	.word	0xaddeadde
 80066d0:	addeadde 	.word	0xaddeadde
 80066d4:	addeadde 	.word	0xaddeadde
 80066d8:	addeadde 	.word	0xaddeadde
 80066dc:	addeadde 	.word	0xaddeadde
 80066e0:	addeadde 	.word	0xaddeadde
 80066e4:	addeadde 	.word	0xaddeadde
 80066e8:	addeadde 	.word	0xaddeadde
 80066ec:	addeadde 	.word	0xaddeadde
 80066f0:	addeadde 	.word	0xaddeadde
 80066f4:	addeadde 	.word	0xaddeadde
 80066f8:	addeadde 	.word	0xaddeadde
 80066fc:	addeadde 	.word	0xaddeadde
 8006700:	addeadde 	.word	0xaddeadde
 8006704:	addeadde 	.word	0xaddeadde
 8006708:	addeadde 	.word	0xaddeadde
 800670c:	addeadde 	.word	0xaddeadde
 8006710:	addeadde 	.word	0xaddeadde
 8006714:	addeadde 	.word	0xaddeadde
 8006718:	addeadde 	.word	0xaddeadde
 800671c:	addeadde 	.word	0xaddeadde
 8006720:	addeadde 	.word	0xaddeadde
 8006724:	addeadde 	.word	0xaddeadde
 8006728:	addeadde 	.word	0xaddeadde
 800672c:	addeadde 	.word	0xaddeadde
 8006730:	addeadde 	.word	0xaddeadde
 8006734:	addeadde 	.word	0xaddeadde
 8006738:	addeadde 	.word	0xaddeadde
 800673c:	addeadde 	.word	0xaddeadde
 8006740:	addeadde 	.word	0xaddeadde
 8006744:	addeadde 	.word	0xaddeadde
 8006748:	addeadde 	.word	0xaddeadde
 800674c:	addeadde 	.word	0xaddeadde
 8006750:	addeadde 	.word	0xaddeadde
 8006754:	addeadde 	.word	0xaddeadde
 8006758:	addeadde 	.word	0xaddeadde
 800675c:	addeadde 	.word	0xaddeadde
 8006760:	addeadde 	.word	0xaddeadde
 8006764:	addeadde 	.word	0xaddeadde
 8006768:	addeadde 	.word	0xaddeadde
 800676c:	addeadde 	.word	0xaddeadde
 8006770:	addeadde 	.word	0xaddeadde
 8006774:	addeadde 	.word	0xaddeadde
 8006778:	addeadde 	.word	0xaddeadde
 800677c:	addeadde 	.word	0xaddeadde
 8006780:	addeadde 	.word	0xaddeadde
 8006784:	addeadde 	.word	0xaddeadde
 8006788:	addeadde 	.word	0xaddeadde
 800678c:	addeadde 	.word	0xaddeadde
 8006790:	addeadde 	.word	0xaddeadde
 8006794:	addeadde 	.word	0xaddeadde
 8006798:	addeadde 	.word	0xaddeadde
 800679c:	addeadde 	.word	0xaddeadde
 80067a0:	addeadde 	.word	0xaddeadde
 80067a4:	addeadde 	.word	0xaddeadde
 80067a8:	addeadde 	.word	0xaddeadde
 80067ac:	addeadde 	.word	0xaddeadde
 80067b0:	addeadde 	.word	0xaddeadde
 80067b4:	addeadde 	.word	0xaddeadde
 80067b8:	addeadde 	.word	0xaddeadde
 80067bc:	addeadde 	.word	0xaddeadde
 80067c0:	addeadde 	.word	0xaddeadde
 80067c4:	addeadde 	.word	0xaddeadde
 80067c8:	addeadde 	.word	0xaddeadde
 80067cc:	addeadde 	.word	0xaddeadde
 80067d0:	addeadde 	.word	0xaddeadde
 80067d4:	addeadde 	.word	0xaddeadde
 80067d8:	addeadde 	.word	0xaddeadde
 80067dc:	addeadde 	.word	0xaddeadde
 80067e0:	addeadde 	.word	0xaddeadde
 80067e4:	addeadde 	.word	0xaddeadde
 80067e8:	addeadde 	.word	0xaddeadde
 80067ec:	addeadde 	.word	0xaddeadde
 80067f0:	addeadde 	.word	0xaddeadde
 80067f4:	addeadde 	.word	0xaddeadde
 80067f8:	addeadde 	.word	0xaddeadde
 80067fc:	addeadde 	.word	0xaddeadde
 8006800:	addeadde 	.word	0xaddeadde
 8006804:	addeadde 	.word	0xaddeadde
 8006808:	addeadde 	.word	0xaddeadde
 800680c:	addeadde 	.word	0xaddeadde
 8006810:	addeadde 	.word	0xaddeadde
 8006814:	addeadde 	.word	0xaddeadde
 8006818:	addeadde 	.word	0xaddeadde
 800681c:	addeadde 	.word	0xaddeadde
 8006820:	addeadde 	.word	0xaddeadde
 8006824:	addeadde 	.word	0xaddeadde
 8006828:	addeadde 	.word	0xaddeadde
 800682c:	addeadde 	.word	0xaddeadde
 8006830:	addeadde 	.word	0xaddeadde
 8006834:	addeadde 	.word	0xaddeadde
 8006838:	addeadde 	.word	0xaddeadde
 800683c:	addeadde 	.word	0xaddeadde
 8006840:	addeadde 	.word	0xaddeadde
 8006844:	addeadde 	.word	0xaddeadde
 8006848:	addeadde 	.word	0xaddeadde
 800684c:	addeadde 	.word	0xaddeadde
 8006850:	addeadde 	.word	0xaddeadde
 8006854:	addeadde 	.word	0xaddeadde
 8006858:	addeadde 	.word	0xaddeadde
 800685c:	addeadde 	.word	0xaddeadde
 8006860:	addeadde 	.word	0xaddeadde
 8006864:	addeadde 	.word	0xaddeadde
 8006868:	addeadde 	.word	0xaddeadde
 800686c:	addeadde 	.word	0xaddeadde
 8006870:	addeadde 	.word	0xaddeadde
 8006874:	addeadde 	.word	0xaddeadde
 8006878:	addeadde 	.word	0xaddeadde
 800687c:	addeadde 	.word	0xaddeadde
 8006880:	addeadde 	.word	0xaddeadde
 8006884:	addeadde 	.word	0xaddeadde
 8006888:	addeadde 	.word	0xaddeadde
 800688c:	addeadde 	.word	0xaddeadde
 8006890:	addeadde 	.word	0xaddeadde
 8006894:	addeadde 	.word	0xaddeadde
 8006898:	addeadde 	.word	0xaddeadde
 800689c:	addeadde 	.word	0xaddeadde
 80068a0:	addeadde 	.word	0xaddeadde
 80068a4:	addeadde 	.word	0xaddeadde
 80068a8:	addeadde 	.word	0xaddeadde
 80068ac:	addeadde 	.word	0xaddeadde
 80068b0:	addeadde 	.word	0xaddeadde
 80068b4:	addeadde 	.word	0xaddeadde
 80068b8:	addeadde 	.word	0xaddeadde
 80068bc:	addeadde 	.word	0xaddeadde
 80068c0:	addeadde 	.word	0xaddeadde
 80068c4:	addeadde 	.word	0xaddeadde
 80068c8:	addeadde 	.word	0xaddeadde
 80068cc:	addeadde 	.word	0xaddeadde
 80068d0:	addeadde 	.word	0xaddeadde
 80068d4:	addeadde 	.word	0xaddeadde
 80068d8:	addeadde 	.word	0xaddeadde
 80068dc:	addeadde 	.word	0xaddeadde
 80068e0:	addeadde 	.word	0xaddeadde
 80068e4:	addeadde 	.word	0xaddeadde
 80068e8:	addeadde 	.word	0xaddeadde
 80068ec:	addeadde 	.word	0xaddeadde
 80068f0:	addeadde 	.word	0xaddeadde
 80068f4:	addeadde 	.word	0xaddeadde
 80068f8:	addeadde 	.word	0xaddeadde
 80068fc:	addeadde 	.word	0xaddeadde
 8006900:	addeadde 	.word	0xaddeadde
 8006904:	addeadde 	.word	0xaddeadde
 8006908:	addeadde 	.word	0xaddeadde
 800690c:	addeadde 	.word	0xaddeadde
 8006910:	addeadde 	.word	0xaddeadde
 8006914:	addeadde 	.word	0xaddeadde
 8006918:	addeadde 	.word	0xaddeadde
 800691c:	addeadde 	.word	0xaddeadde
 8006920:	addeadde 	.word	0xaddeadde
 8006924:	addeadde 	.word	0xaddeadde
 8006928:	addeadde 	.word	0xaddeadde
 800692c:	addeadde 	.word	0xaddeadde
 8006930:	addeadde 	.word	0xaddeadde
 8006934:	addeadde 	.word	0xaddeadde
 8006938:	addeadde 	.word	0xaddeadde
 800693c:	addeadde 	.word	0xaddeadde
 8006940:	addeadde 	.word	0xaddeadde
 8006944:	addeadde 	.word	0xaddeadde
 8006948:	addeadde 	.word	0xaddeadde
 800694c:	addeadde 	.word	0xaddeadde
 8006950:	addeadde 	.word	0xaddeadde
 8006954:	addeadde 	.word	0xaddeadde
 8006958:	addeadde 	.word	0xaddeadde
 800695c:	addeadde 	.word	0xaddeadde
 8006960:	addeadde 	.word	0xaddeadde
 8006964:	addeadde 	.word	0xaddeadde
 8006968:	addeadde 	.word	0xaddeadde
 800696c:	addeadde 	.word	0xaddeadde
 8006970:	addeadde 	.word	0xaddeadde
 8006974:	addeadde 	.word	0xaddeadde
 8006978:	addeadde 	.word	0xaddeadde
 800697c:	addeadde 	.word	0xaddeadde
 8006980:	addeadde 	.word	0xaddeadde
 8006984:	addeadde 	.word	0xaddeadde
 8006988:	addeadde 	.word	0xaddeadde
 800698c:	addeadde 	.word	0xaddeadde
 8006990:	addeadde 	.word	0xaddeadde
 8006994:	addeadde 	.word	0xaddeadde
 8006998:	addeadde 	.word	0xaddeadde
 800699c:	addeadde 	.word	0xaddeadde
 80069a0:	addeadde 	.word	0xaddeadde
 80069a4:	addeadde 	.word	0xaddeadde
 80069a8:	addeadde 	.word	0xaddeadde
 80069ac:	addeadde 	.word	0xaddeadde
 80069b0:	addeadde 	.word	0xaddeadde
 80069b4:	addeadde 	.word	0xaddeadde
 80069b8:	addeadde 	.word	0xaddeadde
 80069bc:	addeadde 	.word	0xaddeadde
 80069c0:	addeadde 	.word	0xaddeadde
 80069c4:	addeadde 	.word	0xaddeadde
 80069c8:	addeadde 	.word	0xaddeadde
 80069cc:	addeadde 	.word	0xaddeadde
 80069d0:	addeadde 	.word	0xaddeadde
 80069d4:	addeadde 	.word	0xaddeadde
 80069d8:	addeadde 	.word	0xaddeadde
 80069dc:	addeadde 	.word	0xaddeadde
 80069e0:	addeadde 	.word	0xaddeadde
 80069e4:	addeadde 	.word	0xaddeadde
 80069e8:	addeadde 	.word	0xaddeadde
 80069ec:	addeadde 	.word	0xaddeadde
 80069f0:	addeadde 	.word	0xaddeadde
 80069f4:	addeadde 	.word	0xaddeadde
 80069f8:	addeadde 	.word	0xaddeadde
 80069fc:	addeadde 	.word	0xaddeadde
 8006a00:	addeadde 	.word	0xaddeadde
 8006a04:	addeadde 	.word	0xaddeadde
 8006a08:	addeadde 	.word	0xaddeadde
 8006a0c:	addeadde 	.word	0xaddeadde
 8006a10:	addeadde 	.word	0xaddeadde
 8006a14:	addeadde 	.word	0xaddeadde
 8006a18:	addeadde 	.word	0xaddeadde
 8006a1c:	addeadde 	.word	0xaddeadde
 8006a20:	addeadde 	.word	0xaddeadde
 8006a24:	addeadde 	.word	0xaddeadde
 8006a28:	addeadde 	.word	0xaddeadde
 8006a2c:	addeadde 	.word	0xaddeadde
 8006a30:	addeadde 	.word	0xaddeadde
 8006a34:	addeadde 	.word	0xaddeadde
 8006a38:	addeadde 	.word	0xaddeadde
 8006a3c:	addeadde 	.word	0xaddeadde
 8006a40:	addeadde 	.word	0xaddeadde
 8006a44:	addeadde 	.word	0xaddeadde
 8006a48:	addeadde 	.word	0xaddeadde
 8006a4c:	addeadde 	.word	0xaddeadde
 8006a50:	addeadde 	.word	0xaddeadde
 8006a54:	addeadde 	.word	0xaddeadde
 8006a58:	addeadde 	.word	0xaddeadde
 8006a5c:	addeadde 	.word	0xaddeadde
 8006a60:	addeadde 	.word	0xaddeadde
 8006a64:	addeadde 	.word	0xaddeadde
 8006a68:	addeadde 	.word	0xaddeadde
 8006a6c:	addeadde 	.word	0xaddeadde
 8006a70:	addeadde 	.word	0xaddeadde
 8006a74:	addeadde 	.word	0xaddeadde
 8006a78:	addeadde 	.word	0xaddeadde
 8006a7c:	addeadde 	.word	0xaddeadde
 8006a80:	addeadde 	.word	0xaddeadde
 8006a84:	addeadde 	.word	0xaddeadde
 8006a88:	addeadde 	.word	0xaddeadde
 8006a8c:	addeadde 	.word	0xaddeadde
 8006a90:	addeadde 	.word	0xaddeadde
 8006a94:	addeadde 	.word	0xaddeadde
 8006a98:	addeadde 	.word	0xaddeadde
 8006a9c:	addeadde 	.word	0xaddeadde
 8006aa0:	addeadde 	.word	0xaddeadde
 8006aa4:	addeadde 	.word	0xaddeadde
 8006aa8:	addeadde 	.word	0xaddeadde
 8006aac:	addeadde 	.word	0xaddeadde
 8006ab0:	addeadde 	.word	0xaddeadde
 8006ab4:	addeadde 	.word	0xaddeadde
 8006ab8:	addeadde 	.word	0xaddeadde
 8006abc:	addeadde 	.word	0xaddeadde
 8006ac0:	addeadde 	.word	0xaddeadde
 8006ac4:	addeadde 	.word	0xaddeadde
 8006ac8:	addeadde 	.word	0xaddeadde
 8006acc:	addeadde 	.word	0xaddeadde
 8006ad0:	addeadde 	.word	0xaddeadde
 8006ad4:	addeadde 	.word	0xaddeadde
 8006ad8:	addeadde 	.word	0xaddeadde
 8006adc:	addeadde 	.word	0xaddeadde
 8006ae0:	addeadde 	.word	0xaddeadde
 8006ae4:	addeadde 	.word	0xaddeadde
 8006ae8:	addeadde 	.word	0xaddeadde
 8006aec:	addeadde 	.word	0xaddeadde
 8006af0:	addeadde 	.word	0xaddeadde
 8006af4:	addeadde 	.word	0xaddeadde
 8006af8:	addeadde 	.word	0xaddeadde
 8006afc:	addeadde 	.word	0xaddeadde
 8006b00:	addeadde 	.word	0xaddeadde
 8006b04:	addeadde 	.word	0xaddeadde
 8006b08:	addeadde 	.word	0xaddeadde
 8006b0c:	addeadde 	.word	0xaddeadde
 8006b10:	addeadde 	.word	0xaddeadde
 8006b14:	addeadde 	.word	0xaddeadde
 8006b18:	addeadde 	.word	0xaddeadde
 8006b1c:	addeadde 	.word	0xaddeadde
 8006b20:	addeadde 	.word	0xaddeadde
 8006b24:	addeadde 	.word	0xaddeadde
 8006b28:	addeadde 	.word	0xaddeadde
 8006b2c:	addeadde 	.word	0xaddeadde
 8006b30:	addeadde 	.word	0xaddeadde
 8006b34:	addeadde 	.word	0xaddeadde
 8006b38:	addeadde 	.word	0xaddeadde
 8006b3c:	addeadde 	.word	0xaddeadde
 8006b40:	addeadde 	.word	0xaddeadde
 8006b44:	addeadde 	.word	0xaddeadde
 8006b48:	addeadde 	.word	0xaddeadde
 8006b4c:	addeadde 	.word	0xaddeadde
 8006b50:	addeadde 	.word	0xaddeadde
 8006b54:	addeadde 	.word	0xaddeadde
 8006b58:	addeadde 	.word	0xaddeadde
 8006b5c:	addeadde 	.word	0xaddeadde
 8006b60:	addeadde 	.word	0xaddeadde
 8006b64:	addeadde 	.word	0xaddeadde
 8006b68:	addeadde 	.word	0xaddeadde
 8006b6c:	addeadde 	.word	0xaddeadde
 8006b70:	addeadde 	.word	0xaddeadde
 8006b74:	addeadde 	.word	0xaddeadde
 8006b78:	addeadde 	.word	0xaddeadde
 8006b7c:	addeadde 	.word	0xaddeadde
 8006b80:	addeadde 	.word	0xaddeadde
 8006b84:	addeadde 	.word	0xaddeadde
 8006b88:	addeadde 	.word	0xaddeadde
 8006b8c:	addeadde 	.word	0xaddeadde
 8006b90:	addeadde 	.word	0xaddeadde
 8006b94:	addeadde 	.word	0xaddeadde
 8006b98:	addeadde 	.word	0xaddeadde
 8006b9c:	addeadde 	.word	0xaddeadde
 8006ba0:	addeadde 	.word	0xaddeadde
 8006ba4:	addeadde 	.word	0xaddeadde
 8006ba8:	addeadde 	.word	0xaddeadde
 8006bac:	addeadde 	.word	0xaddeadde
 8006bb0:	addeadde 	.word	0xaddeadde
 8006bb4:	addeadde 	.word	0xaddeadde
 8006bb8:	addeadde 	.word	0xaddeadde
 8006bbc:	addeadde 	.word	0xaddeadde
 8006bc0:	addeadde 	.word	0xaddeadde
 8006bc4:	addeadde 	.word	0xaddeadde
 8006bc8:	addeadde 	.word	0xaddeadde
 8006bcc:	addeadde 	.word	0xaddeadde
 8006bd0:	addeadde 	.word	0xaddeadde
 8006bd4:	addeadde 	.word	0xaddeadde
 8006bd8:	addeadde 	.word	0xaddeadde
 8006bdc:	addeadde 	.word	0xaddeadde
 8006be0:	addeadde 	.word	0xaddeadde
 8006be4:	addeadde 	.word	0xaddeadde
 8006be8:	addeadde 	.word	0xaddeadde
 8006bec:	addeadde 	.word	0xaddeadde
 8006bf0:	addeadde 	.word	0xaddeadde
 8006bf4:	addeadde 	.word	0xaddeadde
 8006bf8:	addeadde 	.word	0xaddeadde
 8006bfc:	addeadde 	.word	0xaddeadde
 8006c00:	addeadde 	.word	0xaddeadde
 8006c04:	addeadde 	.word	0xaddeadde
 8006c08:	addeadde 	.word	0xaddeadde
 8006c0c:	addeadde 	.word	0xaddeadde
 8006c10:	addeadde 	.word	0xaddeadde
 8006c14:	addeadde 	.word	0xaddeadde
 8006c18:	addeadde 	.word	0xaddeadde
 8006c1c:	addeadde 	.word	0xaddeadde
 8006c20:	addeadde 	.word	0xaddeadde
 8006c24:	addeadde 	.word	0xaddeadde
 8006c28:	addeadde 	.word	0xaddeadde
 8006c2c:	addeadde 	.word	0xaddeadde
 8006c30:	addeadde 	.word	0xaddeadde
 8006c34:	addeadde 	.word	0xaddeadde
 8006c38:	addeadde 	.word	0xaddeadde
 8006c3c:	addeadde 	.word	0xaddeadde
 8006c40:	addeadde 	.word	0xaddeadde
 8006c44:	addeadde 	.word	0xaddeadde
 8006c48:	addeadde 	.word	0xaddeadde
 8006c4c:	addeadde 	.word	0xaddeadde
 8006c50:	addeadde 	.word	0xaddeadde
 8006c54:	addeadde 	.word	0xaddeadde
 8006c58:	addeadde 	.word	0xaddeadde
 8006c5c:	addeadde 	.word	0xaddeadde
 8006c60:	addeadde 	.word	0xaddeadde
 8006c64:	addeadde 	.word	0xaddeadde
 8006c68:	addeadde 	.word	0xaddeadde
 8006c6c:	addeadde 	.word	0xaddeadde
 8006c70:	addeadde 	.word	0xaddeadde
 8006c74:	addeadde 	.word	0xaddeadde
 8006c78:	addeadde 	.word	0xaddeadde
 8006c7c:	addeadde 	.word	0xaddeadde
 8006c80:	addeadde 	.word	0xaddeadde
 8006c84:	addeadde 	.word	0xaddeadde
 8006c88:	addeadde 	.word	0xaddeadde
 8006c8c:	addeadde 	.word	0xaddeadde
 8006c90:	addeadde 	.word	0xaddeadde
 8006c94:	addeadde 	.word	0xaddeadde
 8006c98:	addeadde 	.word	0xaddeadde
 8006c9c:	addeadde 	.word	0xaddeadde
 8006ca0:	addeadde 	.word	0xaddeadde
 8006ca4:	addeadde 	.word	0xaddeadde
 8006ca8:	addeadde 	.word	0xaddeadde
 8006cac:	addeadde 	.word	0xaddeadde
 8006cb0:	addeadde 	.word	0xaddeadde
 8006cb4:	addeadde 	.word	0xaddeadde
 8006cb8:	addeadde 	.word	0xaddeadde
 8006cbc:	addeadde 	.word	0xaddeadde
 8006cc0:	addeadde 	.word	0xaddeadde
 8006cc4:	addeadde 	.word	0xaddeadde
 8006cc8:	addeadde 	.word	0xaddeadde
 8006ccc:	addeadde 	.word	0xaddeadde
 8006cd0:	addeadde 	.word	0xaddeadde
 8006cd4:	addeadde 	.word	0xaddeadde
 8006cd8:	addeadde 	.word	0xaddeadde
 8006cdc:	addeadde 	.word	0xaddeadde
 8006ce0:	addeadde 	.word	0xaddeadde
 8006ce4:	addeadde 	.word	0xaddeadde
 8006ce8:	addeadde 	.word	0xaddeadde
 8006cec:	addeadde 	.word	0xaddeadde
 8006cf0:	addeadde 	.word	0xaddeadde
 8006cf4:	addeadde 	.word	0xaddeadde
 8006cf8:	addeadde 	.word	0xaddeadde
 8006cfc:	addeadde 	.word	0xaddeadde
 8006d00:	addeadde 	.word	0xaddeadde
 8006d04:	addeadde 	.word	0xaddeadde
 8006d08:	addeadde 	.word	0xaddeadde
 8006d0c:	addeadde 	.word	0xaddeadde
 8006d10:	addeadde 	.word	0xaddeadde
 8006d14:	addeadde 	.word	0xaddeadde
 8006d18:	addeadde 	.word	0xaddeadde
 8006d1c:	addeadde 	.word	0xaddeadde
 8006d20:	addeadde 	.word	0xaddeadde
 8006d24:	addeadde 	.word	0xaddeadde
 8006d28:	addeadde 	.word	0xaddeadde
 8006d2c:	addeadde 	.word	0xaddeadde
 8006d30:	addeadde 	.word	0xaddeadde
 8006d34:	addeadde 	.word	0xaddeadde
 8006d38:	addeadde 	.word	0xaddeadde
 8006d3c:	addeadde 	.word	0xaddeadde
 8006d40:	addeadde 	.word	0xaddeadde
 8006d44:	addeadde 	.word	0xaddeadde
 8006d48:	addeadde 	.word	0xaddeadde
 8006d4c:	addeadde 	.word	0xaddeadde
 8006d50:	addeadde 	.word	0xaddeadde
 8006d54:	addeadde 	.word	0xaddeadde
 8006d58:	addeadde 	.word	0xaddeadde
 8006d5c:	addeadde 	.word	0xaddeadde
 8006d60:	addeadde 	.word	0xaddeadde
 8006d64:	addeadde 	.word	0xaddeadde
 8006d68:	addeadde 	.word	0xaddeadde
 8006d6c:	addeadde 	.word	0xaddeadde
 8006d70:	addeadde 	.word	0xaddeadde
 8006d74:	addeadde 	.word	0xaddeadde
 8006d78:	addeadde 	.word	0xaddeadde
 8006d7c:	addeadde 	.word	0xaddeadde
 8006d80:	addeadde 	.word	0xaddeadde
 8006d84:	addeadde 	.word	0xaddeadde
 8006d88:	addeadde 	.word	0xaddeadde
 8006d8c:	addeadde 	.word	0xaddeadde
 8006d90:	addeadde 	.word	0xaddeadde
 8006d94:	addeadde 	.word	0xaddeadde
 8006d98:	addeadde 	.word	0xaddeadde
 8006d9c:	addeadde 	.word	0xaddeadde
 8006da0:	addeadde 	.word	0xaddeadde
 8006da4:	addeadde 	.word	0xaddeadde
 8006da8:	addeadde 	.word	0xaddeadde
 8006dac:	addeadde 	.word	0xaddeadde
 8006db0:	addeadde 	.word	0xaddeadde
 8006db4:	addeadde 	.word	0xaddeadde
 8006db8:	addeadde 	.word	0xaddeadde
 8006dbc:	addeadde 	.word	0xaddeadde
 8006dc0:	addeadde 	.word	0xaddeadde
 8006dc4:	addeadde 	.word	0xaddeadde
 8006dc8:	addeadde 	.word	0xaddeadde
 8006dcc:	addeadde 	.word	0xaddeadde
 8006dd0:	addeadde 	.word	0xaddeadde
 8006dd4:	addeadde 	.word	0xaddeadde
 8006dd8:	addeadde 	.word	0xaddeadde
 8006ddc:	addeadde 	.word	0xaddeadde
 8006de0:	addeadde 	.word	0xaddeadde
 8006de4:	addeadde 	.word	0xaddeadde
 8006de8:	addeadde 	.word	0xaddeadde
 8006dec:	addeadde 	.word	0xaddeadde
 8006df0:	addeadde 	.word	0xaddeadde
 8006df4:	addeadde 	.word	0xaddeadde
 8006df8:	addeadde 	.word	0xaddeadde
 8006dfc:	addeadde 	.word	0xaddeadde
 8006e00:	addeadde 	.word	0xaddeadde
 8006e04:	addeadde 	.word	0xaddeadde
 8006e08:	addeadde 	.word	0xaddeadde
 8006e0c:	addeadde 	.word	0xaddeadde
 8006e10:	addeadde 	.word	0xaddeadde
 8006e14:	addeadde 	.word	0xaddeadde
 8006e18:	addeadde 	.word	0xaddeadde
 8006e1c:	addeadde 	.word	0xaddeadde
 8006e20:	addeadde 	.word	0xaddeadde
 8006e24:	addeadde 	.word	0xaddeadde
 8006e28:	addeadde 	.word	0xaddeadde
 8006e2c:	addeadde 	.word	0xaddeadde
 8006e30:	addeadde 	.word	0xaddeadde
 8006e34:	addeadde 	.word	0xaddeadde
 8006e38:	addeadde 	.word	0xaddeadde
 8006e3c:	addeadde 	.word	0xaddeadde
 8006e40:	addeadde 	.word	0xaddeadde
 8006e44:	addeadde 	.word	0xaddeadde
 8006e48:	addeadde 	.word	0xaddeadde
 8006e4c:	addeadde 	.word	0xaddeadde
 8006e50:	addeadde 	.word	0xaddeadde
 8006e54:	addeadde 	.word	0xaddeadde
 8006e58:	addeadde 	.word	0xaddeadde
 8006e5c:	addeadde 	.word	0xaddeadde
 8006e60:	addeadde 	.word	0xaddeadde
 8006e64:	addeadde 	.word	0xaddeadde
 8006e68:	addeadde 	.word	0xaddeadde
 8006e6c:	addeadde 	.word	0xaddeadde
 8006e70:	addeadde 	.word	0xaddeadde
 8006e74:	addeadde 	.word	0xaddeadde
 8006e78:	addeadde 	.word	0xaddeadde
 8006e7c:	addeadde 	.word	0xaddeadde
 8006e80:	addeadde 	.word	0xaddeadde
 8006e84:	addeadde 	.word	0xaddeadde
 8006e88:	addeadde 	.word	0xaddeadde
 8006e8c:	addeadde 	.word	0xaddeadde
 8006e90:	addeadde 	.word	0xaddeadde
 8006e94:	addeadde 	.word	0xaddeadde
 8006e98:	addeadde 	.word	0xaddeadde
 8006e9c:	addeadde 	.word	0xaddeadde
 8006ea0:	addeadde 	.word	0xaddeadde
 8006ea4:	addeadde 	.word	0xaddeadde
 8006ea8:	addeadde 	.word	0xaddeadde
 8006eac:	addeadde 	.word	0xaddeadde
 8006eb0:	addeadde 	.word	0xaddeadde
 8006eb4:	addeadde 	.word	0xaddeadde
 8006eb8:	addeadde 	.word	0xaddeadde
 8006ebc:	addeadde 	.word	0xaddeadde
 8006ec0:	addeadde 	.word	0xaddeadde
 8006ec4:	addeadde 	.word	0xaddeadde
 8006ec8:	addeadde 	.word	0xaddeadde
 8006ecc:	addeadde 	.word	0xaddeadde
 8006ed0:	addeadde 	.word	0xaddeadde
 8006ed4:	addeadde 	.word	0xaddeadde
 8006ed8:	addeadde 	.word	0xaddeadde
 8006edc:	addeadde 	.word	0xaddeadde
 8006ee0:	addeadde 	.word	0xaddeadde
 8006ee4:	addeadde 	.word	0xaddeadde
 8006ee8:	addeadde 	.word	0xaddeadde
 8006eec:	addeadde 	.word	0xaddeadde
 8006ef0:	addeadde 	.word	0xaddeadde
 8006ef4:	addeadde 	.word	0xaddeadde
 8006ef8:	addeadde 	.word	0xaddeadde
 8006efc:	addeadde 	.word	0xaddeadde
 8006f00:	addeadde 	.word	0xaddeadde
 8006f04:	addeadde 	.word	0xaddeadde
 8006f08:	addeadde 	.word	0xaddeadde
 8006f0c:	addeadde 	.word	0xaddeadde
 8006f10:	addeadde 	.word	0xaddeadde
 8006f14:	addeadde 	.word	0xaddeadde
 8006f18:	addeadde 	.word	0xaddeadde
 8006f1c:	addeadde 	.word	0xaddeadde
 8006f20:	addeadde 	.word	0xaddeadde
 8006f24:	addeadde 	.word	0xaddeadde
 8006f28:	addeadde 	.word	0xaddeadde
 8006f2c:	addeadde 	.word	0xaddeadde
 8006f30:	addeadde 	.word	0xaddeadde
 8006f34:	addeadde 	.word	0xaddeadde
 8006f38:	addeadde 	.word	0xaddeadde
 8006f3c:	addeadde 	.word	0xaddeadde
 8006f40:	addeadde 	.word	0xaddeadde
 8006f44:	addeadde 	.word	0xaddeadde
 8006f48:	addeadde 	.word	0xaddeadde
 8006f4c:	addeadde 	.word	0xaddeadde
 8006f50:	addeadde 	.word	0xaddeadde
 8006f54:	addeadde 	.word	0xaddeadde
 8006f58:	addeadde 	.word	0xaddeadde
 8006f5c:	addeadde 	.word	0xaddeadde
 8006f60:	addeadde 	.word	0xaddeadde
 8006f64:	addeadde 	.word	0xaddeadde
 8006f68:	addeadde 	.word	0xaddeadde
 8006f6c:	addeadde 	.word	0xaddeadde
 8006f70:	addeadde 	.word	0xaddeadde
 8006f74:	addeadde 	.word	0xaddeadde
 8006f78:	addeadde 	.word	0xaddeadde
 8006f7c:	addeadde 	.word	0xaddeadde
 8006f80:	addeadde 	.word	0xaddeadde
 8006f84:	addeadde 	.word	0xaddeadde
 8006f88:	addeadde 	.word	0xaddeadde
 8006f8c:	addeadde 	.word	0xaddeadde
 8006f90:	addeadde 	.word	0xaddeadde
 8006f94:	addeadde 	.word	0xaddeadde
 8006f98:	addeadde 	.word	0xaddeadde
 8006f9c:	addeadde 	.word	0xaddeadde
 8006fa0:	addeadde 	.word	0xaddeadde
 8006fa4:	addeadde 	.word	0xaddeadde
 8006fa8:	addeadde 	.word	0xaddeadde
 8006fac:	addeadde 	.word	0xaddeadde
 8006fb0:	addeadde 	.word	0xaddeadde
 8006fb4:	addeadde 	.word	0xaddeadde
 8006fb8:	addeadde 	.word	0xaddeadde
 8006fbc:	addeadde 	.word	0xaddeadde
 8006fc0:	addeadde 	.word	0xaddeadde
 8006fc4:	addeadde 	.word	0xaddeadde
 8006fc8:	addeadde 	.word	0xaddeadde
 8006fcc:	addeadde 	.word	0xaddeadde
 8006fd0:	addeadde 	.word	0xaddeadde
 8006fd4:	addeadde 	.word	0xaddeadde
 8006fd8:	addeadde 	.word	0xaddeadde
 8006fdc:	addeadde 	.word	0xaddeadde
 8006fe0:	addeadde 	.word	0xaddeadde
 8006fe4:	addeadde 	.word	0xaddeadde
 8006fe8:	addeadde 	.word	0xaddeadde
 8006fec:	addeadde 	.word	0xaddeadde
 8006ff0:	addeadde 	.word	0xaddeadde
 8006ff4:	addeadde 	.word	0xaddeadde
 8006ff8:	addeadde 	.word	0xaddeadde
 8006ffc:	addeadde 	.word	0xaddeadde
 8007000:	addeadde 	.word	0xaddeadde
 8007004:	addeadde 	.word	0xaddeadde
 8007008:	addeadde 	.word	0xaddeadde
 800700c:	addeadde 	.word	0xaddeadde
 8007010:	addeadde 	.word	0xaddeadde
 8007014:	addeadde 	.word	0xaddeadde
 8007018:	addeadde 	.word	0xaddeadde
 800701c:	addeadde 	.word	0xaddeadde
 8007020:	addeadde 	.word	0xaddeadde
 8007024:	addeadde 	.word	0xaddeadde
 8007028:	addeadde 	.word	0xaddeadde
 800702c:	addeadde 	.word	0xaddeadde
 8007030:	addeadde 	.word	0xaddeadde
 8007034:	addeadde 	.word	0xaddeadde
 8007038:	addeadde 	.word	0xaddeadde
 800703c:	addeadde 	.word	0xaddeadde
 8007040:	addeadde 	.word	0xaddeadde
 8007044:	addeadde 	.word	0xaddeadde
 8007048:	addeadde 	.word	0xaddeadde
 800704c:	addeadde 	.word	0xaddeadde
 8007050:	addeadde 	.word	0xaddeadde
 8007054:	addeadde 	.word	0xaddeadde
 8007058:	addeadde 	.word	0xaddeadde
 800705c:	addeadde 	.word	0xaddeadde
 8007060:	addeadde 	.word	0xaddeadde
 8007064:	addeadde 	.word	0xaddeadde
 8007068:	addeadde 	.word	0xaddeadde
 800706c:	addeadde 	.word	0xaddeadde
 8007070:	addeadde 	.word	0xaddeadde
 8007074:	addeadde 	.word	0xaddeadde
 8007078:	addeadde 	.word	0xaddeadde
 800707c:	addeadde 	.word	0xaddeadde
 8007080:	addeadde 	.word	0xaddeadde
 8007084:	addeadde 	.word	0xaddeadde
 8007088:	addeadde 	.word	0xaddeadde
 800708c:	addeadde 	.word	0xaddeadde
 8007090:	addeadde 	.word	0xaddeadde
 8007094:	addeadde 	.word	0xaddeadde
 8007098:	addeadde 	.word	0xaddeadde
 800709c:	addeadde 	.word	0xaddeadde
 80070a0:	addeadde 	.word	0xaddeadde
 80070a4:	addeadde 	.word	0xaddeadde
 80070a8:	addeadde 	.word	0xaddeadde
 80070ac:	addeadde 	.word	0xaddeadde
 80070b0:	addeadde 	.word	0xaddeadde
 80070b4:	addeadde 	.word	0xaddeadde
 80070b8:	addeadde 	.word	0xaddeadde
 80070bc:	addeadde 	.word	0xaddeadde
 80070c0:	addeadde 	.word	0xaddeadde
 80070c4:	addeadde 	.word	0xaddeadde
 80070c8:	addeadde 	.word	0xaddeadde
 80070cc:	addeadde 	.word	0xaddeadde
 80070d0:	addeadde 	.word	0xaddeadde
 80070d4:	addeadde 	.word	0xaddeadde
 80070d8:	addeadde 	.word	0xaddeadde
 80070dc:	addeadde 	.word	0xaddeadde
 80070e0:	addeadde 	.word	0xaddeadde
 80070e4:	addeadde 	.word	0xaddeadde
 80070e8:	addeadde 	.word	0xaddeadde
 80070ec:	addeadde 	.word	0xaddeadde
 80070f0:	addeadde 	.word	0xaddeadde
 80070f4:	addeadde 	.word	0xaddeadde
 80070f8:	addeadde 	.word	0xaddeadde
 80070fc:	addeadde 	.word	0xaddeadde
 8007100:	addeadde 	.word	0xaddeadde
 8007104:	addeadde 	.word	0xaddeadde
 8007108:	addeadde 	.word	0xaddeadde
 800710c:	addeadde 	.word	0xaddeadde
 8007110:	addeadde 	.word	0xaddeadde
 8007114:	addeadde 	.word	0xaddeadde
 8007118:	addeadde 	.word	0xaddeadde
 800711c:	addeadde 	.word	0xaddeadde
 8007120:	addeadde 	.word	0xaddeadde
 8007124:	addeadde 	.word	0xaddeadde
 8007128:	addeadde 	.word	0xaddeadde
 800712c:	addeadde 	.word	0xaddeadde
 8007130:	addeadde 	.word	0xaddeadde
 8007134:	addeadde 	.word	0xaddeadde
 8007138:	addeadde 	.word	0xaddeadde
 800713c:	addeadde 	.word	0xaddeadde
 8007140:	addeadde 	.word	0xaddeadde
 8007144:	addeadde 	.word	0xaddeadde
 8007148:	addeadde 	.word	0xaddeadde
 800714c:	addeadde 	.word	0xaddeadde
 8007150:	addeadde 	.word	0xaddeadde
 8007154:	addeadde 	.word	0xaddeadde
 8007158:	addeadde 	.word	0xaddeadde
 800715c:	addeadde 	.word	0xaddeadde
 8007160:	addeadde 	.word	0xaddeadde
 8007164:	addeadde 	.word	0xaddeadde
 8007168:	addeadde 	.word	0xaddeadde
 800716c:	addeadde 	.word	0xaddeadde
 8007170:	addeadde 	.word	0xaddeadde
 8007174:	addeadde 	.word	0xaddeadde
 8007178:	addeadde 	.word	0xaddeadde
 800717c:	addeadde 	.word	0xaddeadde
 8007180:	addeadde 	.word	0xaddeadde
 8007184:	addeadde 	.word	0xaddeadde
 8007188:	addeadde 	.word	0xaddeadde
 800718c:	addeadde 	.word	0xaddeadde
 8007190:	addeadde 	.word	0xaddeadde
 8007194:	addeadde 	.word	0xaddeadde
 8007198:	addeadde 	.word	0xaddeadde
 800719c:	addeadde 	.word	0xaddeadde
 80071a0:	addeadde 	.word	0xaddeadde
 80071a4:	addeadde 	.word	0xaddeadde
 80071a8:	addeadde 	.word	0xaddeadde
 80071ac:	addeadde 	.word	0xaddeadde
 80071b0:	addeadde 	.word	0xaddeadde
 80071b4:	addeadde 	.word	0xaddeadde
 80071b8:	addeadde 	.word	0xaddeadde
 80071bc:	addeadde 	.word	0xaddeadde
 80071c0:	addeadde 	.word	0xaddeadde
 80071c4:	addeadde 	.word	0xaddeadde
 80071c8:	addeadde 	.word	0xaddeadde
 80071cc:	addeadde 	.word	0xaddeadde
 80071d0:	addeadde 	.word	0xaddeadde
 80071d4:	addeadde 	.word	0xaddeadde
 80071d8:	addeadde 	.word	0xaddeadde
 80071dc:	addeadde 	.word	0xaddeadde
 80071e0:	addeadde 	.word	0xaddeadde
 80071e4:	addeadde 	.word	0xaddeadde
 80071e8:	addeadde 	.word	0xaddeadde
 80071ec:	addeadde 	.word	0xaddeadde
 80071f0:	addeadde 	.word	0xaddeadde
 80071f4:	addeadde 	.word	0xaddeadde
 80071f8:	addeadde 	.word	0xaddeadde
 80071fc:	addeadde 	.word	0xaddeadde
 8007200:	addeadde 	.word	0xaddeadde
 8007204:	addeadde 	.word	0xaddeadde
 8007208:	addeadde 	.word	0xaddeadde
 800720c:	addeadde 	.word	0xaddeadde
 8007210:	addeadde 	.word	0xaddeadde
 8007214:	addeadde 	.word	0xaddeadde
 8007218:	addeadde 	.word	0xaddeadde
 800721c:	addeadde 	.word	0xaddeadde
 8007220:	addeadde 	.word	0xaddeadde
 8007224:	addeadde 	.word	0xaddeadde
 8007228:	addeadde 	.word	0xaddeadde
 800722c:	addeadde 	.word	0xaddeadde
 8007230:	addeadde 	.word	0xaddeadde
 8007234:	addeadde 	.word	0xaddeadde
 8007238:	addeadde 	.word	0xaddeadde
 800723c:	addeadde 	.word	0xaddeadde
 8007240:	addeadde 	.word	0xaddeadde
 8007244:	addeadde 	.word	0xaddeadde
 8007248:	addeadde 	.word	0xaddeadde
 800724c:	addeadde 	.word	0xaddeadde
 8007250:	addeadde 	.word	0xaddeadde
 8007254:	addeadde 	.word	0xaddeadde
 8007258:	addeadde 	.word	0xaddeadde
 800725c:	addeadde 	.word	0xaddeadde
 8007260:	addeadde 	.word	0xaddeadde
 8007264:	addeadde 	.word	0xaddeadde
 8007268:	addeadde 	.word	0xaddeadde
 800726c:	addeadde 	.word	0xaddeadde
 8007270:	addeadde 	.word	0xaddeadde
 8007274:	addeadde 	.word	0xaddeadde
 8007278:	addeadde 	.word	0xaddeadde
 800727c:	addeadde 	.word	0xaddeadde
 8007280:	addeadde 	.word	0xaddeadde
 8007284:	addeadde 	.word	0xaddeadde
 8007288:	addeadde 	.word	0xaddeadde
 800728c:	addeadde 	.word	0xaddeadde
 8007290:	addeadde 	.word	0xaddeadde
 8007294:	addeadde 	.word	0xaddeadde
 8007298:	addeadde 	.word	0xaddeadde
 800729c:	addeadde 	.word	0xaddeadde
 80072a0:	addeadde 	.word	0xaddeadde
 80072a4:	addeadde 	.word	0xaddeadde
 80072a8:	addeadde 	.word	0xaddeadde
 80072ac:	addeadde 	.word	0xaddeadde
 80072b0:	addeadde 	.word	0xaddeadde
 80072b4:	addeadde 	.word	0xaddeadde
 80072b8:	addeadde 	.word	0xaddeadde
 80072bc:	addeadde 	.word	0xaddeadde
 80072c0:	addeadde 	.word	0xaddeadde
 80072c4:	addeadde 	.word	0xaddeadde
 80072c8:	addeadde 	.word	0xaddeadde
 80072cc:	addeadde 	.word	0xaddeadde
 80072d0:	addeadde 	.word	0xaddeadde
 80072d4:	addeadde 	.word	0xaddeadde
 80072d8:	addeadde 	.word	0xaddeadde
 80072dc:	addeadde 	.word	0xaddeadde
 80072e0:	addeadde 	.word	0xaddeadde
 80072e4:	addeadde 	.word	0xaddeadde
 80072e8:	addeadde 	.word	0xaddeadde
 80072ec:	addeadde 	.word	0xaddeadde
 80072f0:	addeadde 	.word	0xaddeadde
 80072f4:	addeadde 	.word	0xaddeadde
 80072f8:	addeadde 	.word	0xaddeadde
 80072fc:	addeadde 	.word	0xaddeadde
 8007300:	addeadde 	.word	0xaddeadde
 8007304:	addeadde 	.word	0xaddeadde
 8007308:	addeadde 	.word	0xaddeadde
 800730c:	addeadde 	.word	0xaddeadde
 8007310:	addeadde 	.word	0xaddeadde
 8007314:	addeadde 	.word	0xaddeadde
 8007318:	addeadde 	.word	0xaddeadde
 800731c:	addeadde 	.word	0xaddeadde
 8007320:	addeadde 	.word	0xaddeadde
 8007324:	addeadde 	.word	0xaddeadde
 8007328:	addeadde 	.word	0xaddeadde
 800732c:	addeadde 	.word	0xaddeadde
 8007330:	addeadde 	.word	0xaddeadde
 8007334:	addeadde 	.word	0xaddeadde
 8007338:	addeadde 	.word	0xaddeadde
 800733c:	addeadde 	.word	0xaddeadde
 8007340:	addeadde 	.word	0xaddeadde
 8007344:	addeadde 	.word	0xaddeadde
 8007348:	addeadde 	.word	0xaddeadde
 800734c:	addeadde 	.word	0xaddeadde
 8007350:	addeadde 	.word	0xaddeadde
 8007354:	addeadde 	.word	0xaddeadde
 8007358:	addeadde 	.word	0xaddeadde
 800735c:	addeadde 	.word	0xaddeadde
 8007360:	addeadde 	.word	0xaddeadde
 8007364:	addeadde 	.word	0xaddeadde
 8007368:	addeadde 	.word	0xaddeadde
 800736c:	addeadde 	.word	0xaddeadde
 8007370:	addeadde 	.word	0xaddeadde
 8007374:	addeadde 	.word	0xaddeadde
 8007378:	addeadde 	.word	0xaddeadde
 800737c:	addeadde 	.word	0xaddeadde
 8007380:	addeadde 	.word	0xaddeadde
 8007384:	addeadde 	.word	0xaddeadde
 8007388:	addeadde 	.word	0xaddeadde
 800738c:	addeadde 	.word	0xaddeadde
 8007390:	addeadde 	.word	0xaddeadde
 8007394:	addeadde 	.word	0xaddeadde
 8007398:	addeadde 	.word	0xaddeadde
 800739c:	addeadde 	.word	0xaddeadde
 80073a0:	addeadde 	.word	0xaddeadde
 80073a4:	addeadde 	.word	0xaddeadde
 80073a8:	addeadde 	.word	0xaddeadde
 80073ac:	addeadde 	.word	0xaddeadde
 80073b0:	addeadde 	.word	0xaddeadde
 80073b4:	addeadde 	.word	0xaddeadde
 80073b8:	addeadde 	.word	0xaddeadde
 80073bc:	addeadde 	.word	0xaddeadde
 80073c0:	addeadde 	.word	0xaddeadde
 80073c4:	addeadde 	.word	0xaddeadde
 80073c8:	addeadde 	.word	0xaddeadde
 80073cc:	addeadde 	.word	0xaddeadde
 80073d0:	addeadde 	.word	0xaddeadde
 80073d4:	addeadde 	.word	0xaddeadde
 80073d8:	addeadde 	.word	0xaddeadde
 80073dc:	addeadde 	.word	0xaddeadde
 80073e0:	addeadde 	.word	0xaddeadde
 80073e4:	addeadde 	.word	0xaddeadde
 80073e8:	addeadde 	.word	0xaddeadde
 80073ec:	addeadde 	.word	0xaddeadde
 80073f0:	addeadde 	.word	0xaddeadde
 80073f4:	addeadde 	.word	0xaddeadde
 80073f8:	addeadde 	.word	0xaddeadde
 80073fc:	addeadde 	.word	0xaddeadde
 8007400:	addeadde 	.word	0xaddeadde
 8007404:	addeadde 	.word	0xaddeadde
 8007408:	addeadde 	.word	0xaddeadde
 800740c:	addeadde 	.word	0xaddeadde
 8007410:	addeadde 	.word	0xaddeadde
 8007414:	addeadde 	.word	0xaddeadde
 8007418:	addeadde 	.word	0xaddeadde
 800741c:	addeadde 	.word	0xaddeadde
 8007420:	addeadde 	.word	0xaddeadde
 8007424:	addeadde 	.word	0xaddeadde
 8007428:	addeadde 	.word	0xaddeadde
 800742c:	addeadde 	.word	0xaddeadde
 8007430:	addeadde 	.word	0xaddeadde
 8007434:	addeadde 	.word	0xaddeadde
 8007438:	addeadde 	.word	0xaddeadde
 800743c:	addeadde 	.word	0xaddeadde
 8007440:	addeadde 	.word	0xaddeadde
 8007444:	addeadde 	.word	0xaddeadde
 8007448:	addeadde 	.word	0xaddeadde
 800744c:	addeadde 	.word	0xaddeadde
 8007450:	addeadde 	.word	0xaddeadde
 8007454:	addeadde 	.word	0xaddeadde
 8007458:	addeadde 	.word	0xaddeadde
 800745c:	addeadde 	.word	0xaddeadde
 8007460:	addeadde 	.word	0xaddeadde
 8007464:	addeadde 	.word	0xaddeadde
 8007468:	addeadde 	.word	0xaddeadde
 800746c:	addeadde 	.word	0xaddeadde
 8007470:	addeadde 	.word	0xaddeadde
 8007474:	addeadde 	.word	0xaddeadde
 8007478:	addeadde 	.word	0xaddeadde
 800747c:	addeadde 	.word	0xaddeadde
 8007480:	addeadde 	.word	0xaddeadde
 8007484:	addeadde 	.word	0xaddeadde
 8007488:	addeadde 	.word	0xaddeadde
 800748c:	addeadde 	.word	0xaddeadde
 8007490:	addeadde 	.word	0xaddeadde
 8007494:	addeadde 	.word	0xaddeadde
 8007498:	addeadde 	.word	0xaddeadde
 800749c:	addeadde 	.word	0xaddeadde
 80074a0:	addeadde 	.word	0xaddeadde
 80074a4:	addeadde 	.word	0xaddeadde
 80074a8:	addeadde 	.word	0xaddeadde
 80074ac:	addeadde 	.word	0xaddeadde
 80074b0:	addeadde 	.word	0xaddeadde
 80074b4:	addeadde 	.word	0xaddeadde
 80074b8:	addeadde 	.word	0xaddeadde
 80074bc:	addeadde 	.word	0xaddeadde
 80074c0:	addeadde 	.word	0xaddeadde
 80074c4:	addeadde 	.word	0xaddeadde
 80074c8:	addeadde 	.word	0xaddeadde
 80074cc:	addeadde 	.word	0xaddeadde
 80074d0:	addeadde 	.word	0xaddeadde
 80074d4:	addeadde 	.word	0xaddeadde
 80074d8:	addeadde 	.word	0xaddeadde
 80074dc:	addeadde 	.word	0xaddeadde
 80074e0:	addeadde 	.word	0xaddeadde
 80074e4:	addeadde 	.word	0xaddeadde
 80074e8:	addeadde 	.word	0xaddeadde
 80074ec:	addeadde 	.word	0xaddeadde
 80074f0:	addeadde 	.word	0xaddeadde
 80074f4:	addeadde 	.word	0xaddeadde
 80074f8:	addeadde 	.word	0xaddeadde
 80074fc:	addeadde 	.word	0xaddeadde
 8007500:	addeadde 	.word	0xaddeadde
 8007504:	addeadde 	.word	0xaddeadde
 8007508:	addeadde 	.word	0xaddeadde
 800750c:	addeadde 	.word	0xaddeadde
 8007510:	addeadde 	.word	0xaddeadde
 8007514:	addeadde 	.word	0xaddeadde
 8007518:	addeadde 	.word	0xaddeadde
 800751c:	addeadde 	.word	0xaddeadde
 8007520:	addeadde 	.word	0xaddeadde
 8007524:	addeadde 	.word	0xaddeadde
 8007528:	addeadde 	.word	0xaddeadde
 800752c:	addeadde 	.word	0xaddeadde
 8007530:	addeadde 	.word	0xaddeadde
 8007534:	addeadde 	.word	0xaddeadde
 8007538:	addeadde 	.word	0xaddeadde
 800753c:	addeadde 	.word	0xaddeadde
 8007540:	addeadde 	.word	0xaddeadde
 8007544:	addeadde 	.word	0xaddeadde
 8007548:	addeadde 	.word	0xaddeadde
 800754c:	addeadde 	.word	0xaddeadde
 8007550:	addeadde 	.word	0xaddeadde
 8007554:	addeadde 	.word	0xaddeadde
 8007558:	addeadde 	.word	0xaddeadde
 800755c:	addeadde 	.word	0xaddeadde
 8007560:	addeadde 	.word	0xaddeadde
 8007564:	addeadde 	.word	0xaddeadde
 8007568:	addeadde 	.word	0xaddeadde
 800756c:	addeadde 	.word	0xaddeadde
 8007570:	addeadde 	.word	0xaddeadde
 8007574:	addeadde 	.word	0xaddeadde
 8007578:	addeadde 	.word	0xaddeadde
 800757c:	addeadde 	.word	0xaddeadde
 8007580:	addeadde 	.word	0xaddeadde
 8007584:	addeadde 	.word	0xaddeadde
 8007588:	addeadde 	.word	0xaddeadde
 800758c:	addeadde 	.word	0xaddeadde
 8007590:	addeadde 	.word	0xaddeadde
 8007594:	addeadde 	.word	0xaddeadde
 8007598:	addeadde 	.word	0xaddeadde
 800759c:	addeadde 	.word	0xaddeadde
 80075a0:	addeadde 	.word	0xaddeadde
 80075a4:	addeadde 	.word	0xaddeadde
 80075a8:	addeadde 	.word	0xaddeadde
 80075ac:	addeadde 	.word	0xaddeadde
 80075b0:	addeadde 	.word	0xaddeadde
 80075b4:	addeadde 	.word	0xaddeadde
 80075b8:	addeadde 	.word	0xaddeadde
 80075bc:	addeadde 	.word	0xaddeadde
 80075c0:	addeadde 	.word	0xaddeadde
 80075c4:	addeadde 	.word	0xaddeadde
 80075c8:	addeadde 	.word	0xaddeadde
 80075cc:	addeadde 	.word	0xaddeadde
 80075d0:	addeadde 	.word	0xaddeadde
 80075d4:	addeadde 	.word	0xaddeadde
 80075d8:	addeadde 	.word	0xaddeadde
 80075dc:	addeadde 	.word	0xaddeadde
 80075e0:	addeadde 	.word	0xaddeadde
 80075e4:	addeadde 	.word	0xaddeadde
 80075e8:	addeadde 	.word	0xaddeadde
 80075ec:	addeadde 	.word	0xaddeadde
 80075f0:	addeadde 	.word	0xaddeadde
 80075f4:	addeadde 	.word	0xaddeadde
 80075f8:	addeadde 	.word	0xaddeadde
 80075fc:	addeadde 	.word	0xaddeadde
 8007600:	addeadde 	.word	0xaddeadde
 8007604:	addeadde 	.word	0xaddeadde
 8007608:	addeadde 	.word	0xaddeadde
 800760c:	addeadde 	.word	0xaddeadde
 8007610:	addeadde 	.word	0xaddeadde
 8007614:	addeadde 	.word	0xaddeadde
 8007618:	addeadde 	.word	0xaddeadde
 800761c:	addeadde 	.word	0xaddeadde
 8007620:	addeadde 	.word	0xaddeadde
 8007624:	addeadde 	.word	0xaddeadde
 8007628:	addeadde 	.word	0xaddeadde
 800762c:	addeadde 	.word	0xaddeadde
 8007630:	addeadde 	.word	0xaddeadde
 8007634:	addeadde 	.word	0xaddeadde
 8007638:	addeadde 	.word	0xaddeadde
 800763c:	addeadde 	.word	0xaddeadde
 8007640:	addeadde 	.word	0xaddeadde
 8007644:	addeadde 	.word	0xaddeadde
 8007648:	addeadde 	.word	0xaddeadde
 800764c:	addeadde 	.word	0xaddeadde
 8007650:	addeadde 	.word	0xaddeadde
 8007654:	addeadde 	.word	0xaddeadde
 8007658:	addeadde 	.word	0xaddeadde
 800765c:	addeadde 	.word	0xaddeadde
 8007660:	addeadde 	.word	0xaddeadde
 8007664:	addeadde 	.word	0xaddeadde
 8007668:	addeadde 	.word	0xaddeadde
 800766c:	addeadde 	.word	0xaddeadde
 8007670:	addeadde 	.word	0xaddeadde
 8007674:	addeadde 	.word	0xaddeadde
 8007678:	addeadde 	.word	0xaddeadde
 800767c:	addeadde 	.word	0xaddeadde
 8007680:	addeadde 	.word	0xaddeadde
 8007684:	addeadde 	.word	0xaddeadde
 8007688:	addeadde 	.word	0xaddeadde
 800768c:	addeadde 	.word	0xaddeadde
 8007690:	addeadde 	.word	0xaddeadde
 8007694:	addeadde 	.word	0xaddeadde
 8007698:	addeadde 	.word	0xaddeadde
 800769c:	addeadde 	.word	0xaddeadde
 80076a0:	addeadde 	.word	0xaddeadde
 80076a4:	addeadde 	.word	0xaddeadde
 80076a8:	addeadde 	.word	0xaddeadde
 80076ac:	addeadde 	.word	0xaddeadde
 80076b0:	addeadde 	.word	0xaddeadde
 80076b4:	addeadde 	.word	0xaddeadde
 80076b8:	addeadde 	.word	0xaddeadde
 80076bc:	addeadde 	.word	0xaddeadde
 80076c0:	addeadde 	.word	0xaddeadde
 80076c4:	addeadde 	.word	0xaddeadde
 80076c8:	addeadde 	.word	0xaddeadde
 80076cc:	addeadde 	.word	0xaddeadde
 80076d0:	addeadde 	.word	0xaddeadde
 80076d4:	addeadde 	.word	0xaddeadde
 80076d8:	addeadde 	.word	0xaddeadde
 80076dc:	addeadde 	.word	0xaddeadde
 80076e0:	addeadde 	.word	0xaddeadde
 80076e4:	addeadde 	.word	0xaddeadde
 80076e8:	addeadde 	.word	0xaddeadde
 80076ec:	addeadde 	.word	0xaddeadde
 80076f0:	addeadde 	.word	0xaddeadde
 80076f4:	addeadde 	.word	0xaddeadde
 80076f8:	addeadde 	.word	0xaddeadde
 80076fc:	addeadde 	.word	0xaddeadde
 8007700:	addeadde 	.word	0xaddeadde
 8007704:	addeadde 	.word	0xaddeadde
 8007708:	addeadde 	.word	0xaddeadde
 800770c:	addeadde 	.word	0xaddeadde
 8007710:	addeadde 	.word	0xaddeadde
 8007714:	addeadde 	.word	0xaddeadde
 8007718:	addeadde 	.word	0xaddeadde
 800771c:	addeadde 	.word	0xaddeadde
 8007720:	addeadde 	.word	0xaddeadde
 8007724:	addeadde 	.word	0xaddeadde
 8007728:	addeadde 	.word	0xaddeadde
 800772c:	addeadde 	.word	0xaddeadde
 8007730:	addeadde 	.word	0xaddeadde
 8007734:	addeadde 	.word	0xaddeadde
 8007738:	addeadde 	.word	0xaddeadde
 800773c:	addeadde 	.word	0xaddeadde
 8007740:	addeadde 	.word	0xaddeadde
 8007744:	addeadde 	.word	0xaddeadde
 8007748:	addeadde 	.word	0xaddeadde
 800774c:	addeadde 	.word	0xaddeadde
 8007750:	addeadde 	.word	0xaddeadde
 8007754:	addeadde 	.word	0xaddeadde
 8007758:	addeadde 	.word	0xaddeadde
 800775c:	addeadde 	.word	0xaddeadde
 8007760:	addeadde 	.word	0xaddeadde
 8007764:	addeadde 	.word	0xaddeadde
 8007768:	addeadde 	.word	0xaddeadde
 800776c:	addeadde 	.word	0xaddeadde
 8007770:	addeadde 	.word	0xaddeadde
 8007774:	addeadde 	.word	0xaddeadde
 8007778:	addeadde 	.word	0xaddeadde
 800777c:	addeadde 	.word	0xaddeadde
 8007780:	addeadde 	.word	0xaddeadde
 8007784:	addeadde 	.word	0xaddeadde
 8007788:	addeadde 	.word	0xaddeadde
 800778c:	addeadde 	.word	0xaddeadde
 8007790:	addeadde 	.word	0xaddeadde
 8007794:	addeadde 	.word	0xaddeadde
 8007798:	addeadde 	.word	0xaddeadde
 800779c:	addeadde 	.word	0xaddeadde
 80077a0:	addeadde 	.word	0xaddeadde
 80077a4:	addeadde 	.word	0xaddeadde
 80077a8:	addeadde 	.word	0xaddeadde
 80077ac:	addeadde 	.word	0xaddeadde
 80077b0:	addeadde 	.word	0xaddeadde
 80077b4:	addeadde 	.word	0xaddeadde
 80077b8:	addeadde 	.word	0xaddeadde
 80077bc:	addeadde 	.word	0xaddeadde
 80077c0:	addeadde 	.word	0xaddeadde
 80077c4:	addeadde 	.word	0xaddeadde
 80077c8:	addeadde 	.word	0xaddeadde
 80077cc:	addeadde 	.word	0xaddeadde
 80077d0:	addeadde 	.word	0xaddeadde
 80077d4:	addeadde 	.word	0xaddeadde
 80077d8:	addeadde 	.word	0xaddeadde
 80077dc:	addeadde 	.word	0xaddeadde
 80077e0:	addeadde 	.word	0xaddeadde
 80077e4:	addeadde 	.word	0xaddeadde
 80077e8:	addeadde 	.word	0xaddeadde
 80077ec:	addeadde 	.word	0xaddeadde
 80077f0:	addeadde 	.word	0xaddeadde
 80077f4:	addeadde 	.word	0xaddeadde
 80077f8:	addeadde 	.word	0xaddeadde
 80077fc:	addeadde 	.word	0xaddeadde
 8007800:	addeadde 	.word	0xaddeadde
 8007804:	addeadde 	.word	0xaddeadde
 8007808:	addeadde 	.word	0xaddeadde
 800780c:	addeadde 	.word	0xaddeadde
 8007810:	addeadde 	.word	0xaddeadde
 8007814:	addeadde 	.word	0xaddeadde
 8007818:	addeadde 	.word	0xaddeadde
 800781c:	addeadde 	.word	0xaddeadde
 8007820:	addeadde 	.word	0xaddeadde
 8007824:	addeadde 	.word	0xaddeadde
 8007828:	addeadde 	.word	0xaddeadde
 800782c:	addeadde 	.word	0xaddeadde
 8007830:	addeadde 	.word	0xaddeadde
 8007834:	addeadde 	.word	0xaddeadde
 8007838:	addeadde 	.word	0xaddeadde
 800783c:	addeadde 	.word	0xaddeadde
 8007840:	addeadde 	.word	0xaddeadde
 8007844:	addeadde 	.word	0xaddeadde
 8007848:	addeadde 	.word	0xaddeadde
 800784c:	addeadde 	.word	0xaddeadde
 8007850:	addeadde 	.word	0xaddeadde
 8007854:	addeadde 	.word	0xaddeadde
 8007858:	addeadde 	.word	0xaddeadde
 800785c:	addeadde 	.word	0xaddeadde
 8007860:	addeadde 	.word	0xaddeadde
 8007864:	addeadde 	.word	0xaddeadde
 8007868:	addeadde 	.word	0xaddeadde
 800786c:	addeadde 	.word	0xaddeadde
 8007870:	addeadde 	.word	0xaddeadde
 8007874:	addeadde 	.word	0xaddeadde
 8007878:	addeadde 	.word	0xaddeadde
 800787c:	addeadde 	.word	0xaddeadde
 8007880:	addeadde 	.word	0xaddeadde
 8007884:	addeadde 	.word	0xaddeadde
 8007888:	addeadde 	.word	0xaddeadde
 800788c:	addeadde 	.word	0xaddeadde
 8007890:	addeadde 	.word	0xaddeadde
 8007894:	addeadde 	.word	0xaddeadde
 8007898:	addeadde 	.word	0xaddeadde
 800789c:	addeadde 	.word	0xaddeadde
 80078a0:	addeadde 	.word	0xaddeadde
 80078a4:	addeadde 	.word	0xaddeadde
 80078a8:	addeadde 	.word	0xaddeadde
 80078ac:	addeadde 	.word	0xaddeadde
 80078b0:	addeadde 	.word	0xaddeadde
 80078b4:	addeadde 	.word	0xaddeadde
 80078b8:	addeadde 	.word	0xaddeadde
 80078bc:	addeadde 	.word	0xaddeadde
 80078c0:	addeadde 	.word	0xaddeadde
 80078c4:	addeadde 	.word	0xaddeadde
 80078c8:	addeadde 	.word	0xaddeadde
 80078cc:	addeadde 	.word	0xaddeadde
 80078d0:	addeadde 	.word	0xaddeadde
 80078d4:	addeadde 	.word	0xaddeadde
 80078d8:	addeadde 	.word	0xaddeadde
 80078dc:	addeadde 	.word	0xaddeadde
 80078e0:	addeadde 	.word	0xaddeadde
 80078e4:	addeadde 	.word	0xaddeadde
 80078e8:	addeadde 	.word	0xaddeadde
 80078ec:	addeadde 	.word	0xaddeadde
 80078f0:	addeadde 	.word	0xaddeadde
 80078f4:	addeadde 	.word	0xaddeadde
 80078f8:	addeadde 	.word	0xaddeadde
 80078fc:	addeadde 	.word	0xaddeadde
 8007900:	addeadde 	.word	0xaddeadde
 8007904:	addeadde 	.word	0xaddeadde
 8007908:	addeadde 	.word	0xaddeadde
 800790c:	addeadde 	.word	0xaddeadde
 8007910:	addeadde 	.word	0xaddeadde
 8007914:	addeadde 	.word	0xaddeadde
 8007918:	addeadde 	.word	0xaddeadde
 800791c:	addeadde 	.word	0xaddeadde
 8007920:	addeadde 	.word	0xaddeadde
 8007924:	addeadde 	.word	0xaddeadde
 8007928:	addeadde 	.word	0xaddeadde
 800792c:	addeadde 	.word	0xaddeadde
 8007930:	addeadde 	.word	0xaddeadde
 8007934:	addeadde 	.word	0xaddeadde
 8007938:	addeadde 	.word	0xaddeadde
 800793c:	addeadde 	.word	0xaddeadde
 8007940:	addeadde 	.word	0xaddeadde
 8007944:	addeadde 	.word	0xaddeadde
 8007948:	addeadde 	.word	0xaddeadde
 800794c:	addeadde 	.word	0xaddeadde
 8007950:	addeadde 	.word	0xaddeadde
 8007954:	addeadde 	.word	0xaddeadde
 8007958:	addeadde 	.word	0xaddeadde
 800795c:	addeadde 	.word	0xaddeadde
 8007960:	addeadde 	.word	0xaddeadde
 8007964:	addeadde 	.word	0xaddeadde
 8007968:	addeadde 	.word	0xaddeadde
 800796c:	addeadde 	.word	0xaddeadde
 8007970:	addeadde 	.word	0xaddeadde
 8007974:	addeadde 	.word	0xaddeadde
 8007978:	addeadde 	.word	0xaddeadde
 800797c:	addeadde 	.word	0xaddeadde
 8007980:	addeadde 	.word	0xaddeadde
 8007984:	addeadde 	.word	0xaddeadde
 8007988:	addeadde 	.word	0xaddeadde
 800798c:	addeadde 	.word	0xaddeadde
 8007990:	addeadde 	.word	0xaddeadde
 8007994:	addeadde 	.word	0xaddeadde
 8007998:	addeadde 	.word	0xaddeadde
 800799c:	addeadde 	.word	0xaddeadde
 80079a0:	addeadde 	.word	0xaddeadde
 80079a4:	addeadde 	.word	0xaddeadde
 80079a8:	addeadde 	.word	0xaddeadde
 80079ac:	addeadde 	.word	0xaddeadde
 80079b0:	addeadde 	.word	0xaddeadde
 80079b4:	addeadde 	.word	0xaddeadde
 80079b8:	addeadde 	.word	0xaddeadde
 80079bc:	addeadde 	.word	0xaddeadde
 80079c0:	addeadde 	.word	0xaddeadde
 80079c4:	addeadde 	.word	0xaddeadde
 80079c8:	addeadde 	.word	0xaddeadde
 80079cc:	addeadde 	.word	0xaddeadde
 80079d0:	addeadde 	.word	0xaddeadde
 80079d4:	addeadde 	.word	0xaddeadde
 80079d8:	addeadde 	.word	0xaddeadde
 80079dc:	addeadde 	.word	0xaddeadde
 80079e0:	addeadde 	.word	0xaddeadde
 80079e4:	addeadde 	.word	0xaddeadde
 80079e8:	addeadde 	.word	0xaddeadde
 80079ec:	addeadde 	.word	0xaddeadde
 80079f0:	addeadde 	.word	0xaddeadde
 80079f4:	addeadde 	.word	0xaddeadde
 80079f8:	addeadde 	.word	0xaddeadde
 80079fc:	addeadde 	.word	0xaddeadde
 8007a00:	addeadde 	.word	0xaddeadde
 8007a04:	addeadde 	.word	0xaddeadde
 8007a08:	addeadde 	.word	0xaddeadde
 8007a0c:	addeadde 	.word	0xaddeadde
 8007a10:	addeadde 	.word	0xaddeadde
 8007a14:	addeadde 	.word	0xaddeadde
 8007a18:	addeadde 	.word	0xaddeadde
 8007a1c:	addeadde 	.word	0xaddeadde
 8007a20:	addeadde 	.word	0xaddeadde
 8007a24:	addeadde 	.word	0xaddeadde
 8007a28:	addeadde 	.word	0xaddeadde
 8007a2c:	addeadde 	.word	0xaddeadde
 8007a30:	addeadde 	.word	0xaddeadde
 8007a34:	addeadde 	.word	0xaddeadde
 8007a38:	addeadde 	.word	0xaddeadde
 8007a3c:	addeadde 	.word	0xaddeadde
 8007a40:	addeadde 	.word	0xaddeadde
 8007a44:	addeadde 	.word	0xaddeadde
 8007a48:	addeadde 	.word	0xaddeadde
 8007a4c:	addeadde 	.word	0xaddeadde
 8007a50:	addeadde 	.word	0xaddeadde
 8007a54:	addeadde 	.word	0xaddeadde
 8007a58:	addeadde 	.word	0xaddeadde
 8007a5c:	addeadde 	.word	0xaddeadde
 8007a60:	addeadde 	.word	0xaddeadde
 8007a64:	addeadde 	.word	0xaddeadde
 8007a68:	addeadde 	.word	0xaddeadde
 8007a6c:	addeadde 	.word	0xaddeadde
 8007a70:	addeadde 	.word	0xaddeadde
 8007a74:	addeadde 	.word	0xaddeadde
 8007a78:	addeadde 	.word	0xaddeadde
 8007a7c:	addeadde 	.word	0xaddeadde
 8007a80:	addeadde 	.word	0xaddeadde
 8007a84:	addeadde 	.word	0xaddeadde
 8007a88:	addeadde 	.word	0xaddeadde
 8007a8c:	addeadde 	.word	0xaddeadde
 8007a90:	addeadde 	.word	0xaddeadde
 8007a94:	addeadde 	.word	0xaddeadde
 8007a98:	addeadde 	.word	0xaddeadde
 8007a9c:	addeadde 	.word	0xaddeadde
 8007aa0:	addeadde 	.word	0xaddeadde
 8007aa4:	addeadde 	.word	0xaddeadde
 8007aa8:	addeadde 	.word	0xaddeadde
 8007aac:	addeadde 	.word	0xaddeadde
 8007ab0:	addeadde 	.word	0xaddeadde
 8007ab4:	addeadde 	.word	0xaddeadde
 8007ab8:	addeadde 	.word	0xaddeadde
 8007abc:	addeadde 	.word	0xaddeadde
 8007ac0:	addeadde 	.word	0xaddeadde
 8007ac4:	addeadde 	.word	0xaddeadde
 8007ac8:	addeadde 	.word	0xaddeadde
 8007acc:	addeadde 	.word	0xaddeadde
 8007ad0:	addeadde 	.word	0xaddeadde
 8007ad4:	addeadde 	.word	0xaddeadde
 8007ad8:	addeadde 	.word	0xaddeadde
 8007adc:	addeadde 	.word	0xaddeadde
 8007ae0:	addeadde 	.word	0xaddeadde
 8007ae4:	addeadde 	.word	0xaddeadde
 8007ae8:	addeadde 	.word	0xaddeadde
 8007aec:	addeadde 	.word	0xaddeadde
 8007af0:	addeadde 	.word	0xaddeadde
 8007af4:	addeadde 	.word	0xaddeadde
 8007af8:	addeadde 	.word	0xaddeadde
 8007afc:	addeadde 	.word	0xaddeadde
 8007b00:	addeadde 	.word	0xaddeadde
 8007b04:	addeadde 	.word	0xaddeadde
 8007b08:	addeadde 	.word	0xaddeadde
 8007b0c:	addeadde 	.word	0xaddeadde
 8007b10:	addeadde 	.word	0xaddeadde
 8007b14:	addeadde 	.word	0xaddeadde
 8007b18:	addeadde 	.word	0xaddeadde
 8007b1c:	addeadde 	.word	0xaddeadde
 8007b20:	addeadde 	.word	0xaddeadde
 8007b24:	addeadde 	.word	0xaddeadde
 8007b28:	addeadde 	.word	0xaddeadde
 8007b2c:	addeadde 	.word	0xaddeadde
 8007b30:	addeadde 	.word	0xaddeadde
 8007b34:	addeadde 	.word	0xaddeadde
 8007b38:	addeadde 	.word	0xaddeadde
 8007b3c:	addeadde 	.word	0xaddeadde
 8007b40:	addeadde 	.word	0xaddeadde
 8007b44:	addeadde 	.word	0xaddeadde
 8007b48:	addeadde 	.word	0xaddeadde
 8007b4c:	addeadde 	.word	0xaddeadde
 8007b50:	addeadde 	.word	0xaddeadde
 8007b54:	addeadde 	.word	0xaddeadde
 8007b58:	addeadde 	.word	0xaddeadde
 8007b5c:	addeadde 	.word	0xaddeadde
 8007b60:	addeadde 	.word	0xaddeadde
 8007b64:	addeadde 	.word	0xaddeadde
 8007b68:	addeadde 	.word	0xaddeadde
 8007b6c:	addeadde 	.word	0xaddeadde
 8007b70:	addeadde 	.word	0xaddeadde
 8007b74:	addeadde 	.word	0xaddeadde
 8007b78:	addeadde 	.word	0xaddeadde
 8007b7c:	addeadde 	.word	0xaddeadde
 8007b80:	addeadde 	.word	0xaddeadde
 8007b84:	addeadde 	.word	0xaddeadde
 8007b88:	addeadde 	.word	0xaddeadde
 8007b8c:	addeadde 	.word	0xaddeadde
 8007b90:	addeadde 	.word	0xaddeadde
 8007b94:	addeadde 	.word	0xaddeadde
 8007b98:	addeadde 	.word	0xaddeadde
 8007b9c:	addeadde 	.word	0xaddeadde
 8007ba0:	addeadde 	.word	0xaddeadde
 8007ba4:	addeadde 	.word	0xaddeadde
 8007ba8:	addeadde 	.word	0xaddeadde
 8007bac:	addeadde 	.word	0xaddeadde
 8007bb0:	addeadde 	.word	0xaddeadde
 8007bb4:	addeadde 	.word	0xaddeadde
 8007bb8:	addeadde 	.word	0xaddeadde
 8007bbc:	addeadde 	.word	0xaddeadde
 8007bc0:	addeadde 	.word	0xaddeadde
 8007bc4:	addeadde 	.word	0xaddeadde
 8007bc8:	addeadde 	.word	0xaddeadde
 8007bcc:	addeadde 	.word	0xaddeadde
 8007bd0:	addeadde 	.word	0xaddeadde
 8007bd4:	addeadde 	.word	0xaddeadde
 8007bd8:	addeadde 	.word	0xaddeadde
 8007bdc:	addeadde 	.word	0xaddeadde
 8007be0:	addeadde 	.word	0xaddeadde
 8007be4:	addeadde 	.word	0xaddeadde
 8007be8:	addeadde 	.word	0xaddeadde
 8007bec:	addeadde 	.word	0xaddeadde
 8007bf0:	addeadde 	.word	0xaddeadde
 8007bf4:	addeadde 	.word	0xaddeadde
 8007bf8:	addeadde 	.word	0xaddeadde
 8007bfc:	addeadde 	.word	0xaddeadde
 8007c00:	addeadde 	.word	0xaddeadde
 8007c04:	addeadde 	.word	0xaddeadde
 8007c08:	addeadde 	.word	0xaddeadde
 8007c0c:	addeadde 	.word	0xaddeadde
 8007c10:	addeadde 	.word	0xaddeadde
 8007c14:	addeadde 	.word	0xaddeadde
 8007c18:	addeadde 	.word	0xaddeadde
 8007c1c:	addeadde 	.word	0xaddeadde
 8007c20:	addeadde 	.word	0xaddeadde
 8007c24:	addeadde 	.word	0xaddeadde
 8007c28:	addeadde 	.word	0xaddeadde
 8007c2c:	addeadde 	.word	0xaddeadde
 8007c30:	addeadde 	.word	0xaddeadde
 8007c34:	addeadde 	.word	0xaddeadde
 8007c38:	addeadde 	.word	0xaddeadde
 8007c3c:	addeadde 	.word	0xaddeadde
 8007c40:	addeadde 	.word	0xaddeadde
 8007c44:	addeadde 	.word	0xaddeadde
 8007c48:	addeadde 	.word	0xaddeadde
 8007c4c:	addeadde 	.word	0xaddeadde
 8007c50:	addeadde 	.word	0xaddeadde
 8007c54:	addeadde 	.word	0xaddeadde
 8007c58:	addeadde 	.word	0xaddeadde
 8007c5c:	addeadde 	.word	0xaddeadde
 8007c60:	addeadde 	.word	0xaddeadde
 8007c64:	addeadde 	.word	0xaddeadde
 8007c68:	addeadde 	.word	0xaddeadde
 8007c6c:	addeadde 	.word	0xaddeadde
 8007c70:	addeadde 	.word	0xaddeadde
 8007c74:	addeadde 	.word	0xaddeadde
 8007c78:	addeadde 	.word	0xaddeadde
 8007c7c:	addeadde 	.word	0xaddeadde
 8007c80:	addeadde 	.word	0xaddeadde
 8007c84:	addeadde 	.word	0xaddeadde
 8007c88:	addeadde 	.word	0xaddeadde
 8007c8c:	addeadde 	.word	0xaddeadde
 8007c90:	addeadde 	.word	0xaddeadde
 8007c94:	addeadde 	.word	0xaddeadde
 8007c98:	addeadde 	.word	0xaddeadde
 8007c9c:	addeadde 	.word	0xaddeadde
 8007ca0:	addeadde 	.word	0xaddeadde
 8007ca4:	addeadde 	.word	0xaddeadde
 8007ca8:	addeadde 	.word	0xaddeadde
 8007cac:	addeadde 	.word	0xaddeadde
 8007cb0:	addeadde 	.word	0xaddeadde
 8007cb4:	addeadde 	.word	0xaddeadde
 8007cb8:	addeadde 	.word	0xaddeadde
 8007cbc:	addeadde 	.word	0xaddeadde
 8007cc0:	addeadde 	.word	0xaddeadde
 8007cc4:	addeadde 	.word	0xaddeadde
 8007cc8:	addeadde 	.word	0xaddeadde
 8007ccc:	addeadde 	.word	0xaddeadde
 8007cd0:	addeadde 	.word	0xaddeadde
 8007cd4:	addeadde 	.word	0xaddeadde
 8007cd8:	addeadde 	.word	0xaddeadde
 8007cdc:	addeadde 	.word	0xaddeadde
 8007ce0:	addeadde 	.word	0xaddeadde
 8007ce4:	addeadde 	.word	0xaddeadde
 8007ce8:	addeadde 	.word	0xaddeadde
 8007cec:	addeadde 	.word	0xaddeadde
 8007cf0:	addeadde 	.word	0xaddeadde
 8007cf4:	addeadde 	.word	0xaddeadde
 8007cf8:	addeadde 	.word	0xaddeadde
 8007cfc:	addeadde 	.word	0xaddeadde
 8007d00:	addeadde 	.word	0xaddeadde
 8007d04:	addeadde 	.word	0xaddeadde
 8007d08:	addeadde 	.word	0xaddeadde
 8007d0c:	addeadde 	.word	0xaddeadde
 8007d10:	addeadde 	.word	0xaddeadde
 8007d14:	addeadde 	.word	0xaddeadde
 8007d18:	addeadde 	.word	0xaddeadde
 8007d1c:	addeadde 	.word	0xaddeadde
 8007d20:	addeadde 	.word	0xaddeadde
 8007d24:	addeadde 	.word	0xaddeadde
 8007d28:	addeadde 	.word	0xaddeadde
 8007d2c:	addeadde 	.word	0xaddeadde
 8007d30:	addeadde 	.word	0xaddeadde
 8007d34:	addeadde 	.word	0xaddeadde
 8007d38:	addeadde 	.word	0xaddeadde
 8007d3c:	addeadde 	.word	0xaddeadde
 8007d40:	addeadde 	.word	0xaddeadde
 8007d44:	addeadde 	.word	0xaddeadde
 8007d48:	addeadde 	.word	0xaddeadde
 8007d4c:	addeadde 	.word	0xaddeadde
 8007d50:	addeadde 	.word	0xaddeadde
 8007d54:	addeadde 	.word	0xaddeadde
 8007d58:	addeadde 	.word	0xaddeadde
 8007d5c:	addeadde 	.word	0xaddeadde
 8007d60:	addeadde 	.word	0xaddeadde
 8007d64:	addeadde 	.word	0xaddeadde
 8007d68:	addeadde 	.word	0xaddeadde
 8007d6c:	addeadde 	.word	0xaddeadde
 8007d70:	addeadde 	.word	0xaddeadde
 8007d74:	addeadde 	.word	0xaddeadde
 8007d78:	addeadde 	.word	0xaddeadde
 8007d7c:	addeadde 	.word	0xaddeadde
 8007d80:	addeadde 	.word	0xaddeadde
 8007d84:	addeadde 	.word	0xaddeadde
 8007d88:	addeadde 	.word	0xaddeadde
 8007d8c:	addeadde 	.word	0xaddeadde
 8007d90:	addeadde 	.word	0xaddeadde
 8007d94:	addeadde 	.word	0xaddeadde
 8007d98:	addeadde 	.word	0xaddeadde
 8007d9c:	addeadde 	.word	0xaddeadde
 8007da0:	addeadde 	.word	0xaddeadde
 8007da4:	addeadde 	.word	0xaddeadde
 8007da8:	addeadde 	.word	0xaddeadde
 8007dac:	addeadde 	.word	0xaddeadde
 8007db0:	addeadde 	.word	0xaddeadde
 8007db4:	addeadde 	.word	0xaddeadde
 8007db8:	addeadde 	.word	0xaddeadde
 8007dbc:	addeadde 	.word	0xaddeadde
 8007dc0:	addeadde 	.word	0xaddeadde
 8007dc4:	addeadde 	.word	0xaddeadde
 8007dc8:	addeadde 	.word	0xaddeadde
 8007dcc:	addeadde 	.word	0xaddeadde
 8007dd0:	addeadde 	.word	0xaddeadde
 8007dd4:	addeadde 	.word	0xaddeadde
 8007dd8:	addeadde 	.word	0xaddeadde
 8007ddc:	addeadde 	.word	0xaddeadde
 8007de0:	addeadde 	.word	0xaddeadde
 8007de4:	addeadde 	.word	0xaddeadde
 8007de8:	addeadde 	.word	0xaddeadde
 8007dec:	addeadde 	.word	0xaddeadde
 8007df0:	addeadde 	.word	0xaddeadde
 8007df4:	addeadde 	.word	0xaddeadde
 8007df8:	addeadde 	.word	0xaddeadde
 8007dfc:	addeadde 	.word	0xaddeadde
 8007e00:	addeadde 	.word	0xaddeadde
 8007e04:	addeadde 	.word	0xaddeadde
 8007e08:	addeadde 	.word	0xaddeadde
 8007e0c:	addeadde 	.word	0xaddeadde
 8007e10:	addeadde 	.word	0xaddeadde
 8007e14:	addeadde 	.word	0xaddeadde
 8007e18:	addeadde 	.word	0xaddeadde
 8007e1c:	addeadde 	.word	0xaddeadde
 8007e20:	addeadde 	.word	0xaddeadde
 8007e24:	addeadde 	.word	0xaddeadde
 8007e28:	addeadde 	.word	0xaddeadde
 8007e2c:	addeadde 	.word	0xaddeadde
 8007e30:	addeadde 	.word	0xaddeadde
 8007e34:	addeadde 	.word	0xaddeadde
 8007e38:	addeadde 	.word	0xaddeadde
 8007e3c:	addeadde 	.word	0xaddeadde
 8007e40:	addeadde 	.word	0xaddeadde
 8007e44:	addeadde 	.word	0xaddeadde
 8007e48:	addeadde 	.word	0xaddeadde
 8007e4c:	addeadde 	.word	0xaddeadde
 8007e50:	addeadde 	.word	0xaddeadde
 8007e54:	addeadde 	.word	0xaddeadde
 8007e58:	addeadde 	.word	0xaddeadde
 8007e5c:	addeadde 	.word	0xaddeadde
 8007e60:	addeadde 	.word	0xaddeadde
 8007e64:	addeadde 	.word	0xaddeadde
 8007e68:	addeadde 	.word	0xaddeadde
 8007e6c:	addeadde 	.word	0xaddeadde
 8007e70:	addeadde 	.word	0xaddeadde
 8007e74:	addeadde 	.word	0xaddeadde
 8007e78:	addeadde 	.word	0xaddeadde
 8007e7c:	addeadde 	.word	0xaddeadde
 8007e80:	addeadde 	.word	0xaddeadde
 8007e84:	addeadde 	.word	0xaddeadde
 8007e88:	addeadde 	.word	0xaddeadde
 8007e8c:	addeadde 	.word	0xaddeadde
 8007e90:	addeadde 	.word	0xaddeadde
 8007e94:	addeadde 	.word	0xaddeadde
 8007e98:	addeadde 	.word	0xaddeadde
 8007e9c:	addeadde 	.word	0xaddeadde
 8007ea0:	addeadde 	.word	0xaddeadde
 8007ea4:	addeadde 	.word	0xaddeadde
 8007ea8:	addeadde 	.word	0xaddeadde
 8007eac:	addeadde 	.word	0xaddeadde
 8007eb0:	addeadde 	.word	0xaddeadde
 8007eb4:	addeadde 	.word	0xaddeadde
 8007eb8:	addeadde 	.word	0xaddeadde
 8007ebc:	addeadde 	.word	0xaddeadde
 8007ec0:	addeadde 	.word	0xaddeadde
 8007ec4:	addeadde 	.word	0xaddeadde
 8007ec8:	addeadde 	.word	0xaddeadde
 8007ecc:	addeadde 	.word	0xaddeadde
 8007ed0:	addeadde 	.word	0xaddeadde
 8007ed4:	addeadde 	.word	0xaddeadde
 8007ed8:	addeadde 	.word	0xaddeadde
 8007edc:	addeadde 	.word	0xaddeadde
 8007ee0:	addeadde 	.word	0xaddeadde
 8007ee4:	addeadde 	.word	0xaddeadde
 8007ee8:	addeadde 	.word	0xaddeadde
 8007eec:	addeadde 	.word	0xaddeadde
 8007ef0:	addeadde 	.word	0xaddeadde
 8007ef4:	addeadde 	.word	0xaddeadde
 8007ef8:	addeadde 	.word	0xaddeadde
 8007efc:	addeadde 	.word	0xaddeadde
 8007f00:	addeadde 	.word	0xaddeadde
 8007f04:	addeadde 	.word	0xaddeadde
 8007f08:	addeadde 	.word	0xaddeadde
 8007f0c:	addeadde 	.word	0xaddeadde
 8007f10:	addeadde 	.word	0xaddeadde
 8007f14:	addeadde 	.word	0xaddeadde
 8007f18:	addeadde 	.word	0xaddeadde
 8007f1c:	addeadde 	.word	0xaddeadde
 8007f20:	addeadde 	.word	0xaddeadde
 8007f24:	addeadde 	.word	0xaddeadde
 8007f28:	addeadde 	.word	0xaddeadde
 8007f2c:	addeadde 	.word	0xaddeadde
 8007f30:	addeadde 	.word	0xaddeadde
 8007f34:	addeadde 	.word	0xaddeadde
 8007f38:	addeadde 	.word	0xaddeadde
 8007f3c:	addeadde 	.word	0xaddeadde
 8007f40:	addeadde 	.word	0xaddeadde
 8007f44:	addeadde 	.word	0xaddeadde
 8007f48:	addeadde 	.word	0xaddeadde
 8007f4c:	addeadde 	.word	0xaddeadde
 8007f50:	addeadde 	.word	0xaddeadde
 8007f54:	addeadde 	.word	0xaddeadde
 8007f58:	addeadde 	.word	0xaddeadde
 8007f5c:	addeadde 	.word	0xaddeadde
 8007f60:	addeadde 	.word	0xaddeadde
 8007f64:	addeadde 	.word	0xaddeadde
 8007f68:	addeadde 	.word	0xaddeadde
 8007f6c:	addeadde 	.word	0xaddeadde
 8007f70:	addeadde 	.word	0xaddeadde
 8007f74:	addeadde 	.word	0xaddeadde
 8007f78:	addeadde 	.word	0xaddeadde
 8007f7c:	addeadde 	.word	0xaddeadde
 8007f80:	addeadde 	.word	0xaddeadde
 8007f84:	addeadde 	.word	0xaddeadde
 8007f88:	addeadde 	.word	0xaddeadde
 8007f8c:	addeadde 	.word	0xaddeadde
 8007f90:	addeadde 	.word	0xaddeadde
 8007f94:	addeadde 	.word	0xaddeadde
 8007f98:	addeadde 	.word	0xaddeadde
 8007f9c:	addeadde 	.word	0xaddeadde
 8007fa0:	addeadde 	.word	0xaddeadde
 8007fa4:	addeadde 	.word	0xaddeadde
 8007fa8:	addeadde 	.word	0xaddeadde
 8007fac:	addeadde 	.word	0xaddeadde
 8007fb0:	addeadde 	.word	0xaddeadde
 8007fb4:	addeadde 	.word	0xaddeadde
 8007fb8:	addeadde 	.word	0xaddeadde
 8007fbc:	addeadde 	.word	0xaddeadde
 8007fc0:	addeadde 	.word	0xaddeadde
 8007fc4:	addeadde 	.word	0xaddeadde
 8007fc8:	addeadde 	.word	0xaddeadde
 8007fcc:	addeadde 	.word	0xaddeadde
 8007fd0:	addeadde 	.word	0xaddeadde
 8007fd4:	addeadde 	.word	0xaddeadde
 8007fd8:	addeadde 	.word	0xaddeadde
 8007fdc:	addeadde 	.word	0xaddeadde
 8007fe0:	addeadde 	.word	0xaddeadde
 8007fe4:	addeadde 	.word	0xaddeadde
 8007fe8:	addeadde 	.word	0xaddeadde
 8007fec:	addeadde 	.word	0xaddeadde
 8007ff0:	addeadde 	.word	0xaddeadde
 8007ff4:	addeadde 	.word	0xaddeadde
 8007ff8:	addeadde 	.word	0xaddeadde
 8007ffc:	addeadde 	.word	0xaddeadde

Disassembly of section .text:

08008000 <__do_global_dtors_aux>:
 8008000:	b510      	push	{r4, lr}
 8008002:	4c05      	ldr	r4, [pc, #20]	; (8008018 <__do_global_dtors_aux+0x18>)
 8008004:	7823      	ldrb	r3, [r4, #0]
 8008006:	b933      	cbnz	r3, 8008016 <__do_global_dtors_aux+0x16>
 8008008:	4b04      	ldr	r3, [pc, #16]	; (800801c <__do_global_dtors_aux+0x1c>)
 800800a:	b113      	cbz	r3, 8008012 <__do_global_dtors_aux+0x12>
 800800c:	4804      	ldr	r0, [pc, #16]	; (8008020 <__do_global_dtors_aux+0x20>)
 800800e:	f3af 8000 	nop.w
 8008012:	2301      	movs	r3, #1
 8008014:	7023      	strb	r3, [r4, #0]
 8008016:	bd10      	pop	{r4, pc}
 8008018:	20008010 	.word	0x20008010
 800801c:	00000000 	.word	0x00000000
 8008020:	0800a008 	.word	0x0800a008

08008024 <frame_dummy>:
 8008024:	b508      	push	{r3, lr}
 8008026:	4b03      	ldr	r3, [pc, #12]	; (8008034 <frame_dummy+0x10>)
 8008028:	b11b      	cbz	r3, 8008032 <frame_dummy+0xe>
 800802a:	4903      	ldr	r1, [pc, #12]	; (8008038 <frame_dummy+0x14>)
 800802c:	4803      	ldr	r0, [pc, #12]	; (800803c <frame_dummy+0x18>)
 800802e:	f3af 8000 	nop.w
 8008032:	bd08      	pop	{r3, pc}
 8008034:	00000000 	.word	0x00000000
 8008038:	20008014 	.word	0x20008014
 800803c:	0800a008 	.word	0x0800a008

08008040 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008044:	f000 f94c 	bl	80082e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008048:	f000 f803 	bl	8008052 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800804c:	f000 f84a 	bl	80080e4 <MX_GPIO_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8008050:	e7fe      	b.n	8008050 <main+0x10>

08008052 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008052:	b580      	push	{r7, lr}
 8008054:	b09e      	sub	sp, #120	; 0x78
 8008056:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008058:	f107 0318 	add.w	r3, r7, #24
 800805c:	2260      	movs	r2, #96	; 0x60
 800805e:	2100      	movs	r1, #0
 8008060:	4618      	mov	r0, r3
 8008062:	f001 ff97 	bl	8009f94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008066:	463b      	mov	r3, r7
 8008068:	2200      	movs	r2, #0
 800806a:	601a      	str	r2, [r3, #0]
 800806c:	605a      	str	r2, [r3, #4]
 800806e:	609a      	str	r2, [r3, #8]
 8008070:	60da      	str	r2, [r3, #12]
 8008072:	611a      	str	r2, [r3, #16]
 8008074:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE4) != HAL_OK)
 8008076:	2000      	movs	r0, #0
 8008078:	f000 fc76 	bl	8008968 <HAL_PWREx_ControlVoltageScaling>
 800807c:	4603      	mov	r3, r0
 800807e:	2b00      	cmp	r3, #0
 8008080:	d001      	beq.n	8008086 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8008082:	f000 f895 	bl	80081b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8008086:	2310      	movs	r3, #16
 8008088:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800808a:	2301      	movs	r3, #1
 800808c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800808e:	2310      	movs	r3, #16
 8008090:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_4;
 8008092:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008096:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8008098:	2300      	movs	r3, #0
 800809a:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800809c:	f107 0318 	add.w	r3, r7, #24
 80080a0:	4618      	mov	r0, r3
 80080a2:	f000 fced 	bl	8008a80 <HAL_RCC_OscConfig>
 80080a6:	4603      	mov	r3, r0
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d001      	beq.n	80080b0 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80080ac:	f000 f880 	bl	80081b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80080b0:	231f      	movs	r3, #31
 80080b2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80080b4:	2300      	movs	r3, #0
 80080b6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80080b8:	2300      	movs	r3, #0
 80080ba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80080bc:	2300      	movs	r3, #0
 80080be:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80080c0:	2300      	movs	r3, #0
 80080c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80080c4:	2300      	movs	r3, #0
 80080c6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80080c8:	463b      	mov	r3, r7
 80080ca:	2100      	movs	r1, #0
 80080cc:	4618      	mov	r0, r3
 80080ce:	f001 fbb3 	bl	8009838 <HAL_RCC_ClockConfig>
 80080d2:	4603      	mov	r3, r0
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d001      	beq.n	80080dc <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80080d8:	f000 f86a 	bl	80081b0 <Error_Handler>
  }
}
 80080dc:	bf00      	nop
 80080de:	3778      	adds	r7, #120	; 0x78
 80080e0:	46bd      	mov	sp, r7
 80080e2:	bd80      	pop	{r7, pc}

080080e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b088      	sub	sp, #32
 80080e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80080ea:	f107 030c 	add.w	r3, r7, #12
 80080ee:	2200      	movs	r2, #0
 80080f0:	601a      	str	r2, [r3, #0]
 80080f2:	605a      	str	r2, [r3, #4]
 80080f4:	609a      	str	r2, [r3, #8]
 80080f6:	60da      	str	r2, [r3, #12]
 80080f8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80080fa:	4b2a      	ldr	r3, [pc, #168]	; (80081a4 <MX_GPIO_Init+0xc0>)
 80080fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008100:	4a28      	ldr	r2, [pc, #160]	; (80081a4 <MX_GPIO_Init+0xc0>)
 8008102:	f043 0304 	orr.w	r3, r3, #4
 8008106:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800810a:	4b26      	ldr	r3, [pc, #152]	; (80081a4 <MX_GPIO_Init+0xc0>)
 800810c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008110:	f003 0304 	and.w	r3, r3, #4
 8008114:	60bb      	str	r3, [r7, #8]
 8008116:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008118:	4b22      	ldr	r3, [pc, #136]	; (80081a4 <MX_GPIO_Init+0xc0>)
 800811a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800811e:	4a21      	ldr	r2, [pc, #132]	; (80081a4 <MX_GPIO_Init+0xc0>)
 8008120:	f043 0302 	orr.w	r3, r3, #2
 8008124:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8008128:	4b1e      	ldr	r3, [pc, #120]	; (80081a4 <MX_GPIO_Init+0xc0>)
 800812a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800812e:	f003 0302 	and.w	r3, r3, #2
 8008132:	607b      	str	r3, [r7, #4]
 8008134:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 8008136:	2200      	movs	r2, #0
 8008138:	2180      	movs	r1, #128	; 0x80
 800813a:	481b      	ldr	r0, [pc, #108]	; (80081a8 <MX_GPIO_Init+0xc4>)
 800813c:	f000 fbfc 	bl	8008938 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8008140:	2200      	movs	r2, #0
 8008142:	2180      	movs	r1, #128	; 0x80
 8008144:	4819      	ldr	r0, [pc, #100]	; (80081ac <MX_GPIO_Init+0xc8>)
 8008146:	f000 fbf7 	bl	8008938 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800814a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800814e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008150:	2300      	movs	r3, #0
 8008152:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008154:	2300      	movs	r3, #0
 8008156:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008158:	f107 030c 	add.w	r3, r7, #12
 800815c:	4619      	mov	r1, r3
 800815e:	4812      	ldr	r0, [pc, #72]	; (80081a8 <MX_GPIO_Init+0xc4>)
 8008160:	f000 fa12 	bl	8008588 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8008164:	2380      	movs	r3, #128	; 0x80
 8008166:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008168:	2301      	movs	r3, #1
 800816a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800816c:	2300      	movs	r3, #0
 800816e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008170:	2300      	movs	r3, #0
 8008172:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008174:	f107 030c 	add.w	r3, r7, #12
 8008178:	4619      	mov	r1, r3
 800817a:	480b      	ldr	r0, [pc, #44]	; (80081a8 <MX_GPIO_Init+0xc4>)
 800817c:	f000 fa04 	bl	8008588 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8008180:	2380      	movs	r3, #128	; 0x80
 8008182:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008184:	2301      	movs	r3, #1
 8008186:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008188:	2300      	movs	r3, #0
 800818a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800818c:	2300      	movs	r3, #0
 800818e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008190:	f107 030c 	add.w	r3, r7, #12
 8008194:	4619      	mov	r1, r3
 8008196:	4805      	ldr	r0, [pc, #20]	; (80081ac <MX_GPIO_Init+0xc8>)
 8008198:	f000 f9f6 	bl	8008588 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800819c:	bf00      	nop
 800819e:	3720      	adds	r7, #32
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bd80      	pop	{r7, pc}
 80081a4:	46020c00 	.word	0x46020c00
 80081a8:	42020800 	.word	0x42020800
 80081ac:	42020400 	.word	0x42020400

080081b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80081b0:	b480      	push	{r7}
 80081b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80081b4:	b672      	cpsid	i
}
 80081b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80081b8:	e7fe      	b.n	80081b8 <Error_Handler+0x8>
	...

080081bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80081bc:	b480      	push	{r7}
 80081be:	b083      	sub	sp, #12
 80081c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80081c2:	4b0a      	ldr	r3, [pc, #40]	; (80081ec <HAL_MspInit+0x30>)
 80081c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80081c8:	4a08      	ldr	r2, [pc, #32]	; (80081ec <HAL_MspInit+0x30>)
 80081ca:	f043 0304 	orr.w	r3, r3, #4
 80081ce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80081d2:	4b06      	ldr	r3, [pc, #24]	; (80081ec <HAL_MspInit+0x30>)
 80081d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80081d8:	f003 0304 	and.w	r3, r3, #4
 80081dc:	607b      	str	r3, [r7, #4]
 80081de:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80081e0:	bf00      	nop
 80081e2:	370c      	adds	r7, #12
 80081e4:	46bd      	mov	sp, r7
 80081e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ea:	4770      	bx	lr
 80081ec:	46020c00 	.word	0x46020c00

080081f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80081f0:	b480      	push	{r7}
 80081f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80081f4:	e7fe      	b.n	80081f4 <NMI_Handler+0x4>

080081f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80081f6:	b480      	push	{r7}
 80081f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80081fa:	e7fe      	b.n	80081fa <HardFault_Handler+0x4>

080081fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80081fc:	b480      	push	{r7}
 80081fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008200:	e7fe      	b.n	8008200 <MemManage_Handler+0x4>

08008202 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008202:	b480      	push	{r7}
 8008204:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008206:	e7fe      	b.n	8008206 <BusFault_Handler+0x4>

08008208 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008208:	b480      	push	{r7}
 800820a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800820c:	e7fe      	b.n	800820c <UsageFault_Handler+0x4>

0800820e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800820e:	b480      	push	{r7}
 8008210:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008212:	bf00      	nop
 8008214:	46bd      	mov	sp, r7
 8008216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821a:	4770      	bx	lr

0800821c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800821c:	b480      	push	{r7}
 800821e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8008220:	4b18      	ldr	r3, [pc, #96]	; (8008284 <SystemInit+0x68>)
 8008222:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008226:	4a17      	ldr	r2, [pc, #92]	; (8008284 <SystemInit+0x68>)
 8008228:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800822c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8008230:	4b15      	ldr	r3, [pc, #84]	; (8008288 <SystemInit+0x6c>)
 8008232:	2201      	movs	r2, #1
 8008234:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8008236:	4b14      	ldr	r3, [pc, #80]	; (8008288 <SystemInit+0x6c>)
 8008238:	2200      	movs	r2, #0
 800823a:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 800823c:	4b12      	ldr	r3, [pc, #72]	; (8008288 <SystemInit+0x6c>)
 800823e:	2200      	movs	r2, #0
 8008240:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8008242:	4b11      	ldr	r3, [pc, #68]	; (8008288 <SystemInit+0x6c>)
 8008244:	2200      	movs	r2, #0
 8008246:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8008248:	4b0f      	ldr	r3, [pc, #60]	; (8008288 <SystemInit+0x6c>)
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	4a0e      	ldr	r2, [pc, #56]	; (8008288 <SystemInit+0x6c>)
 800824e:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8008252:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8008256:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8008258:	4b0b      	ldr	r3, [pc, #44]	; (8008288 <SystemInit+0x6c>)
 800825a:	2200      	movs	r2, #0
 800825c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 800825e:	4b0a      	ldr	r3, [pc, #40]	; (8008288 <SystemInit+0x6c>)
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	4a09      	ldr	r2, [pc, #36]	; (8008288 <SystemInit+0x6c>)
 8008264:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008268:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 800826a:	4b07      	ldr	r3, [pc, #28]	; (8008288 <SystemInit+0x6c>)
 800826c:	2200      	movs	r2, #0
 800826e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8008270:	4b04      	ldr	r3, [pc, #16]	; (8008284 <SystemInit+0x68>)
 8008272:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008276:	609a      	str	r2, [r3, #8]
  #endif
}
 8008278:	bf00      	nop
 800827a:	46bd      	mov	sp, r7
 800827c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008280:	4770      	bx	lr
 8008282:	bf00      	nop
 8008284:	e000ed00 	.word	0xe000ed00
 8008288:	46020c00 	.word	0x46020c00

0800828c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 800828c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80082c4 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8008290:	f7ff ffc4 	bl	800821c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8008294:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8008296:	e003      	b.n	80082a0 <LoopCopyDataInit>

08008298 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8008298:	4b0b      	ldr	r3, [pc, #44]	; (80082c8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800829a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800829c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800829e:	3104      	adds	r1, #4

080082a0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80082a0:	480a      	ldr	r0, [pc, #40]	; (80082cc <LoopForever+0xa>)
	ldr	r3, =_edata
 80082a2:	4b0b      	ldr	r3, [pc, #44]	; (80082d0 <LoopForever+0xe>)
	adds	r2, r0, r1
 80082a4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80082a6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80082a8:	d3f6      	bcc.n	8008298 <CopyDataInit>
	ldr	r2, =_sbss
 80082aa:	4a0a      	ldr	r2, [pc, #40]	; (80082d4 <LoopForever+0x12>)
	b	LoopFillZerobss
 80082ac:	e002      	b.n	80082b4 <LoopFillZerobss>

080082ae <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80082ae:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80082b0:	f842 3b04 	str.w	r3, [r2], #4

080082b4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80082b4:	4b08      	ldr	r3, [pc, #32]	; (80082d8 <LoopForever+0x16>)
	cmp	r2, r3
 80082b6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80082b8:	d3f9      	bcc.n	80082ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80082ba:	f001 fe73 	bl	8009fa4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80082be:	f7ff febf 	bl	8008040 <main>

080082c2 <LoopForever>:

LoopForever:
    b LoopForever
 80082c2:	e7fe      	b.n	80082c2 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80082c4:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 80082c8:	0800a110 	.word	0x0800a110
	ldr	r0, =_sdata
 80082cc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80082d0:	20008010 	.word	0x20008010
	ldr	r2, =_sbss
 80082d4:	20008010 	.word	0x20008010
	ldr	r3, = _ebss
 80082d8:	20008030 	.word	0x20008030

080082dc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80082dc:	e7fe      	b.n	80082dc <ADC1_IRQHandler>
	...

080082e0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80082e4:	4b11      	ldr	r3, [pc, #68]	; (800832c <HAL_Init+0x4c>)
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	4a10      	ldr	r2, [pc, #64]	; (800832c <HAL_Init+0x4c>)
 80082ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80082ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80082f0:	2003      	movs	r0, #3
 80082f2:	f000 f917 	bl	8008524 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80082f6:	f001 fc91 	bl	8009c1c <HAL_RCC_GetSysClockFreq>
 80082fa:	4602      	mov	r2, r0
 80082fc:	4b0c      	ldr	r3, [pc, #48]	; (8008330 <HAL_Init+0x50>)
 80082fe:	6a1b      	ldr	r3, [r3, #32]
 8008300:	f003 030f 	and.w	r3, r3, #15
 8008304:	490b      	ldr	r1, [pc, #44]	; (8008334 <HAL_Init+0x54>)
 8008306:	5ccb      	ldrb	r3, [r1, r3]
 8008308:	fa22 f303 	lsr.w	r3, r2, r3
 800830c:	4a0a      	ldr	r2, [pc, #40]	; (8008338 <HAL_Init+0x58>)
 800830e:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8008310:	200f      	movs	r0, #15
 8008312:	f000 f813 	bl	800833c <HAL_InitTick>
 8008316:	4603      	mov	r3, r0
 8008318:	2b00      	cmp	r3, #0
 800831a:	d001      	beq.n	8008320 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 800831c:	2301      	movs	r3, #1
 800831e:	e002      	b.n	8008326 <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8008320:	f7ff ff4c 	bl	80081bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008324:	2300      	movs	r3, #0
}
 8008326:	4618      	mov	r0, r3
 8008328:	bd80      	pop	{r7, pc}
 800832a:	bf00      	nop
 800832c:	40022000 	.word	0x40022000
 8008330:	46020c00 	.word	0x46020c00
 8008334:	0800a038 	.word	0x0800a038
 8008338:	20008000 	.word	0x20008000

0800833c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b082      	sub	sp, #8
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8008344:	4b15      	ldr	r3, [pc, #84]	; (800839c <HAL_InitTick+0x60>)
 8008346:	781b      	ldrb	r3, [r3, #0]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d101      	bne.n	8008350 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800834c:	2301      	movs	r3, #1
 800834e:	e021      	b.n	8008394 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8008350:	4b13      	ldr	r3, [pc, #76]	; (80083a0 <HAL_InitTick+0x64>)
 8008352:	681a      	ldr	r2, [r3, #0]
 8008354:	4b11      	ldr	r3, [pc, #68]	; (800839c <HAL_InitTick+0x60>)
 8008356:	781b      	ldrb	r3, [r3, #0]
 8008358:	4619      	mov	r1, r3
 800835a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800835e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008362:	fbb2 f3f3 	udiv	r3, r2, r3
 8008366:	4618      	mov	r0, r3
 8008368:	f000 f901 	bl	800856e <HAL_SYSTICK_Config>
 800836c:	4603      	mov	r3, r0
 800836e:	2b00      	cmp	r3, #0
 8008370:	d001      	beq.n	8008376 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8008372:	2301      	movs	r3, #1
 8008374:	e00e      	b.n	8008394 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2b0f      	cmp	r3, #15
 800837a:	d80a      	bhi.n	8008392 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800837c:	2200      	movs	r2, #0
 800837e:	6879      	ldr	r1, [r7, #4]
 8008380:	f04f 30ff 	mov.w	r0, #4294967295
 8008384:	f000 f8d9 	bl	800853a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008388:	4a06      	ldr	r2, [pc, #24]	; (80083a4 <HAL_InitTick+0x68>)
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800838e:	2300      	movs	r3, #0
 8008390:	e000      	b.n	8008394 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8008392:	2301      	movs	r3, #1
}
 8008394:	4618      	mov	r0, r3
 8008396:	3708      	adds	r7, #8
 8008398:	46bd      	mov	sp, r7
 800839a:	bd80      	pop	{r7, pc}
 800839c:	20008008 	.word	0x20008008
 80083a0:	20008000 	.word	0x20008000
 80083a4:	20008004 	.word	0x20008004

080083a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80083a8:	b480      	push	{r7}
 80083aa:	af00      	add	r7, sp, #0
  return uwTick;
 80083ac:	4b03      	ldr	r3, [pc, #12]	; (80083bc <HAL_GetTick+0x14>)
 80083ae:	681b      	ldr	r3, [r3, #0]
}
 80083b0:	4618      	mov	r0, r3
 80083b2:	46bd      	mov	sp, r7
 80083b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b8:	4770      	bx	lr
 80083ba:	bf00      	nop
 80083bc:	2000802c 	.word	0x2000802c

080083c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80083c0:	b480      	push	{r7}
 80083c2:	b085      	sub	sp, #20
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	f003 0307 	and.w	r3, r3, #7
 80083ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80083d0:	4b0c      	ldr	r3, [pc, #48]	; (8008404 <__NVIC_SetPriorityGrouping+0x44>)
 80083d2:	68db      	ldr	r3, [r3, #12]
 80083d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80083d6:	68ba      	ldr	r2, [r7, #8]
 80083d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80083dc:	4013      	ands	r3, r2
 80083de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80083e4:	68bb      	ldr	r3, [r7, #8]
 80083e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80083e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80083ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80083f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80083f2:	4a04      	ldr	r2, [pc, #16]	; (8008404 <__NVIC_SetPriorityGrouping+0x44>)
 80083f4:	68bb      	ldr	r3, [r7, #8]
 80083f6:	60d3      	str	r3, [r2, #12]
}
 80083f8:	bf00      	nop
 80083fa:	3714      	adds	r7, #20
 80083fc:	46bd      	mov	sp, r7
 80083fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008402:	4770      	bx	lr
 8008404:	e000ed00 	.word	0xe000ed00

08008408 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008408:	b480      	push	{r7}
 800840a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800840c:	4b04      	ldr	r3, [pc, #16]	; (8008420 <__NVIC_GetPriorityGrouping+0x18>)
 800840e:	68db      	ldr	r3, [r3, #12]
 8008410:	0a1b      	lsrs	r3, r3, #8
 8008412:	f003 0307 	and.w	r3, r3, #7
}
 8008416:	4618      	mov	r0, r3
 8008418:	46bd      	mov	sp, r7
 800841a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841e:	4770      	bx	lr
 8008420:	e000ed00 	.word	0xe000ed00

08008424 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008424:	b480      	push	{r7}
 8008426:	b083      	sub	sp, #12
 8008428:	af00      	add	r7, sp, #0
 800842a:	4603      	mov	r3, r0
 800842c:	6039      	str	r1, [r7, #0]
 800842e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008430:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008434:	2b00      	cmp	r3, #0
 8008436:	db0a      	blt.n	800844e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	b2da      	uxtb	r2, r3
 800843c:	490c      	ldr	r1, [pc, #48]	; (8008470 <__NVIC_SetPriority+0x4c>)
 800843e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008442:	0112      	lsls	r2, r2, #4
 8008444:	b2d2      	uxtb	r2, r2
 8008446:	440b      	add	r3, r1
 8008448:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800844c:	e00a      	b.n	8008464 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800844e:	683b      	ldr	r3, [r7, #0]
 8008450:	b2da      	uxtb	r2, r3
 8008452:	4908      	ldr	r1, [pc, #32]	; (8008474 <__NVIC_SetPriority+0x50>)
 8008454:	79fb      	ldrb	r3, [r7, #7]
 8008456:	f003 030f 	and.w	r3, r3, #15
 800845a:	3b04      	subs	r3, #4
 800845c:	0112      	lsls	r2, r2, #4
 800845e:	b2d2      	uxtb	r2, r2
 8008460:	440b      	add	r3, r1
 8008462:	761a      	strb	r2, [r3, #24]
}
 8008464:	bf00      	nop
 8008466:	370c      	adds	r7, #12
 8008468:	46bd      	mov	sp, r7
 800846a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846e:	4770      	bx	lr
 8008470:	e000e100 	.word	0xe000e100
 8008474:	e000ed00 	.word	0xe000ed00

08008478 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008478:	b480      	push	{r7}
 800847a:	b089      	sub	sp, #36	; 0x24
 800847c:	af00      	add	r7, sp, #0
 800847e:	60f8      	str	r0, [r7, #12]
 8008480:	60b9      	str	r1, [r7, #8]
 8008482:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	f003 0307 	and.w	r3, r3, #7
 800848a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800848c:	69fb      	ldr	r3, [r7, #28]
 800848e:	f1c3 0307 	rsb	r3, r3, #7
 8008492:	2b04      	cmp	r3, #4
 8008494:	bf28      	it	cs
 8008496:	2304      	movcs	r3, #4
 8008498:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800849a:	69fb      	ldr	r3, [r7, #28]
 800849c:	3304      	adds	r3, #4
 800849e:	2b06      	cmp	r3, #6
 80084a0:	d902      	bls.n	80084a8 <NVIC_EncodePriority+0x30>
 80084a2:	69fb      	ldr	r3, [r7, #28]
 80084a4:	3b03      	subs	r3, #3
 80084a6:	e000      	b.n	80084aa <NVIC_EncodePriority+0x32>
 80084a8:	2300      	movs	r3, #0
 80084aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80084ac:	f04f 32ff 	mov.w	r2, #4294967295
 80084b0:	69bb      	ldr	r3, [r7, #24]
 80084b2:	fa02 f303 	lsl.w	r3, r2, r3
 80084b6:	43da      	mvns	r2, r3
 80084b8:	68bb      	ldr	r3, [r7, #8]
 80084ba:	401a      	ands	r2, r3
 80084bc:	697b      	ldr	r3, [r7, #20]
 80084be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80084c0:	f04f 31ff 	mov.w	r1, #4294967295
 80084c4:	697b      	ldr	r3, [r7, #20]
 80084c6:	fa01 f303 	lsl.w	r3, r1, r3
 80084ca:	43d9      	mvns	r1, r3
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80084d0:	4313      	orrs	r3, r2
         );
}
 80084d2:	4618      	mov	r0, r3
 80084d4:	3724      	adds	r7, #36	; 0x24
 80084d6:	46bd      	mov	sp, r7
 80084d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084dc:	4770      	bx	lr
	...

080084e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b082      	sub	sp, #8
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	3b01      	subs	r3, #1
 80084ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80084f0:	d301      	bcc.n	80084f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80084f2:	2301      	movs	r3, #1
 80084f4:	e00f      	b.n	8008516 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80084f6:	4a0a      	ldr	r2, [pc, #40]	; (8008520 <SysTick_Config+0x40>)
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	3b01      	subs	r3, #1
 80084fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80084fe:	210f      	movs	r1, #15
 8008500:	f04f 30ff 	mov.w	r0, #4294967295
 8008504:	f7ff ff8e 	bl	8008424 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008508:	4b05      	ldr	r3, [pc, #20]	; (8008520 <SysTick_Config+0x40>)
 800850a:	2200      	movs	r2, #0
 800850c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800850e:	4b04      	ldr	r3, [pc, #16]	; (8008520 <SysTick_Config+0x40>)
 8008510:	2207      	movs	r2, #7
 8008512:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008514:	2300      	movs	r3, #0
}
 8008516:	4618      	mov	r0, r3
 8008518:	3708      	adds	r7, #8
 800851a:	46bd      	mov	sp, r7
 800851c:	bd80      	pop	{r7, pc}
 800851e:	bf00      	nop
 8008520:	e000e010 	.word	0xe000e010

08008524 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b082      	sub	sp, #8
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800852c:	6878      	ldr	r0, [r7, #4]
 800852e:	f7ff ff47 	bl	80083c0 <__NVIC_SetPriorityGrouping>
}
 8008532:	bf00      	nop
 8008534:	3708      	adds	r7, #8
 8008536:	46bd      	mov	sp, r7
 8008538:	bd80      	pop	{r7, pc}

0800853a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800853a:	b580      	push	{r7, lr}
 800853c:	b086      	sub	sp, #24
 800853e:	af00      	add	r7, sp, #0
 8008540:	4603      	mov	r3, r0
 8008542:	60b9      	str	r1, [r7, #8]
 8008544:	607a      	str	r2, [r7, #4]
 8008546:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8008548:	f7ff ff5e 	bl	8008408 <__NVIC_GetPriorityGrouping>
 800854c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800854e:	687a      	ldr	r2, [r7, #4]
 8008550:	68b9      	ldr	r1, [r7, #8]
 8008552:	6978      	ldr	r0, [r7, #20]
 8008554:	f7ff ff90 	bl	8008478 <NVIC_EncodePriority>
 8008558:	4602      	mov	r2, r0
 800855a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800855e:	4611      	mov	r1, r2
 8008560:	4618      	mov	r0, r3
 8008562:	f7ff ff5f 	bl	8008424 <__NVIC_SetPriority>
}
 8008566:	bf00      	nop
 8008568:	3718      	adds	r7, #24
 800856a:	46bd      	mov	sp, r7
 800856c:	bd80      	pop	{r7, pc}

0800856e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800856e:	b580      	push	{r7, lr}
 8008570:	b082      	sub	sp, #8
 8008572:	af00      	add	r7, sp, #0
 8008574:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f7ff ffb2 	bl	80084e0 <SysTick_Config>
 800857c:	4603      	mov	r3, r0
}
 800857e:	4618      	mov	r0, r3
 8008580:	3708      	adds	r7, #8
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}
	...

08008588 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8008588:	b480      	push	{r7}
 800858a:	b089      	sub	sp, #36	; 0x24
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
 8008590:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8008592:	2300      	movs	r3, #0
 8008594:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800859a:	e1ba      	b.n	8008912 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	681a      	ldr	r2, [r3, #0]
 80085a0:	2101      	movs	r1, #1
 80085a2:	697b      	ldr	r3, [r7, #20]
 80085a4:	fa01 f303 	lsl.w	r3, r1, r3
 80085a8:	4013      	ands	r3, r2
 80085aa:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 80085ac:	697b      	ldr	r3, [r7, #20]
 80085ae:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	f000 81aa 	beq.w	800890c <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	4a55      	ldr	r2, [pc, #340]	; (8008710 <HAL_GPIO_Init+0x188>)
 80085bc:	4293      	cmp	r3, r2
 80085be:	d15d      	bne.n	800867c <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 80085c6:	2201      	movs	r2, #1
 80085c8:	697b      	ldr	r3, [r7, #20]
 80085ca:	fa02 f303 	lsl.w	r3, r2, r3
 80085ce:	43db      	mvns	r3, r3
 80085d0:	69fa      	ldr	r2, [r7, #28]
 80085d2:	4013      	ands	r3, r2
 80085d4:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	685b      	ldr	r3, [r3, #4]
 80085da:	f003 0201 	and.w	r2, r3, #1
 80085de:	697b      	ldr	r3, [r7, #20]
 80085e0:	fa02 f303 	lsl.w	r3, r2, r3
 80085e4:	69fa      	ldr	r2, [r7, #28]
 80085e6:	4313      	orrs	r3, r2
 80085e8:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	69fa      	ldr	r2, [r7, #28]
 80085ee:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 80085f0:	4a48      	ldr	r2, [pc, #288]	; (8008714 <HAL_GPIO_Init+0x18c>)
 80085f2:	697b      	ldr	r3, [r7, #20]
 80085f4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80085f8:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 80085fa:	4a46      	ldr	r2, [pc, #280]	; (8008714 <HAL_GPIO_Init+0x18c>)
 80085fc:	697b      	ldr	r3, [r7, #20]
 80085fe:	00db      	lsls	r3, r3, #3
 8008600:	4413      	add	r3, r2
 8008602:	685b      	ldr	r3, [r3, #4]
 8008604:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8008606:	69bb      	ldr	r3, [r7, #24]
 8008608:	08da      	lsrs	r2, r3, #3
 800860a:	693b      	ldr	r3, [r7, #16]
 800860c:	3208      	adds	r2, #8
 800860e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008612:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8008614:	69bb      	ldr	r3, [r7, #24]
 8008616:	f003 0307 	and.w	r3, r3, #7
 800861a:	009b      	lsls	r3, r3, #2
 800861c:	220f      	movs	r2, #15
 800861e:	fa02 f303 	lsl.w	r3, r2, r3
 8008622:	43db      	mvns	r3, r3
 8008624:	69fa      	ldr	r2, [r7, #28]
 8008626:	4013      	ands	r3, r2
 8008628:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 800862a:	69bb      	ldr	r3, [r7, #24]
 800862c:	f003 0307 	and.w	r3, r3, #7
 8008630:	009b      	lsls	r3, r3, #2
 8008632:	220b      	movs	r2, #11
 8008634:	fa02 f303 	lsl.w	r3, r2, r3
 8008638:	69fa      	ldr	r2, [r7, #28]
 800863a:	4313      	orrs	r3, r2
 800863c:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 800863e:	69bb      	ldr	r3, [r7, #24]
 8008640:	08da      	lsrs	r2, r3, #3
 8008642:	693b      	ldr	r3, [r7, #16]
 8008644:	3208      	adds	r2, #8
 8008646:	69f9      	ldr	r1, [r7, #28]
 8008648:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 800864c:	693b      	ldr	r3, [r7, #16]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8008652:	69bb      	ldr	r3, [r7, #24]
 8008654:	005b      	lsls	r3, r3, #1
 8008656:	2203      	movs	r2, #3
 8008658:	fa02 f303 	lsl.w	r3, r2, r3
 800865c:	43db      	mvns	r3, r3
 800865e:	69fa      	ldr	r2, [r7, #28]
 8008660:	4013      	ands	r3, r2
 8008662:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 8008664:	69bb      	ldr	r3, [r7, #24]
 8008666:	005b      	lsls	r3, r3, #1
 8008668:	2202      	movs	r2, #2
 800866a:	fa02 f303 	lsl.w	r3, r2, r3
 800866e:	69fa      	ldr	r2, [r7, #28]
 8008670:	4313      	orrs	r3, r2
 8008672:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8008674:	693b      	ldr	r3, [r7, #16]
 8008676:	69fa      	ldr	r2, [r7, #28]
 8008678:	601a      	str	r2, [r3, #0]
 800867a:	e067      	b.n	800874c <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	685b      	ldr	r3, [r3, #4]
 8008680:	2b02      	cmp	r3, #2
 8008682:	d003      	beq.n	800868c <HAL_GPIO_Init+0x104>
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	685b      	ldr	r3, [r3, #4]
 8008688:	2b12      	cmp	r3, #18
 800868a:	d145      	bne.n	8008718 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 800868c:	697b      	ldr	r3, [r7, #20]
 800868e:	08da      	lsrs	r2, r3, #3
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	3208      	adds	r2, #8
 8008694:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008698:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 800869a:	697b      	ldr	r3, [r7, #20]
 800869c:	f003 0307 	and.w	r3, r3, #7
 80086a0:	009b      	lsls	r3, r3, #2
 80086a2:	220f      	movs	r2, #15
 80086a4:	fa02 f303 	lsl.w	r3, r2, r3
 80086a8:	43db      	mvns	r3, r3
 80086aa:	69fa      	ldr	r2, [r7, #28]
 80086ac:	4013      	ands	r3, r2
 80086ae:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	691b      	ldr	r3, [r3, #16]
 80086b4:	f003 020f 	and.w	r2, r3, #15
 80086b8:	697b      	ldr	r3, [r7, #20]
 80086ba:	f003 0307 	and.w	r3, r3, #7
 80086be:	009b      	lsls	r3, r3, #2
 80086c0:	fa02 f303 	lsl.w	r3, r2, r3
 80086c4:	69fa      	ldr	r2, [r7, #28]
 80086c6:	4313      	orrs	r3, r2
 80086c8:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 80086ca:	697b      	ldr	r3, [r7, #20]
 80086cc:	08da      	lsrs	r2, r3, #3
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	3208      	adds	r2, #8
 80086d2:	69f9      	ldr	r1, [r7, #28]
 80086d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80086d8:	693b      	ldr	r3, [r7, #16]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80086de:	69bb      	ldr	r3, [r7, #24]
 80086e0:	005b      	lsls	r3, r3, #1
 80086e2:	2203      	movs	r2, #3
 80086e4:	fa02 f303 	lsl.w	r3, r2, r3
 80086e8:	43db      	mvns	r3, r3
 80086ea:	69fa      	ldr	r2, [r7, #28]
 80086ec:	4013      	ands	r3, r2
 80086ee:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 80086f0:	683b      	ldr	r3, [r7, #0]
 80086f2:	685b      	ldr	r3, [r3, #4]
 80086f4:	f003 0203 	and.w	r2, r3, #3
 80086f8:	69bb      	ldr	r3, [r7, #24]
 80086fa:	005b      	lsls	r3, r3, #1
 80086fc:	fa02 f303 	lsl.w	r3, r2, r3
 8008700:	69fa      	ldr	r2, [r7, #28]
 8008702:	4313      	orrs	r3, r2
 8008704:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8008706:	693b      	ldr	r3, [r7, #16]
 8008708:	69fa      	ldr	r2, [r7, #28]
 800870a:	601a      	str	r2, [r3, #0]
 800870c:	e01e      	b.n	800874c <HAL_GPIO_Init+0x1c4>
 800870e:	bf00      	nop
 8008710:	46020000 	.word	0x46020000
 8008714:	0800a088 	.word	0x0800a088
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8008718:	693b      	ldr	r3, [r7, #16]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800871e:	69bb      	ldr	r3, [r7, #24]
 8008720:	005b      	lsls	r3, r3, #1
 8008722:	2203      	movs	r2, #3
 8008724:	fa02 f303 	lsl.w	r3, r2, r3
 8008728:	43db      	mvns	r3, r3
 800872a:	69fa      	ldr	r2, [r7, #28]
 800872c:	4013      	ands	r3, r2
 800872e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	685b      	ldr	r3, [r3, #4]
 8008734:	f003 0203 	and.w	r2, r3, #3
 8008738:	69bb      	ldr	r3, [r7, #24]
 800873a:	005b      	lsls	r3, r3, #1
 800873c:	fa02 f303 	lsl.w	r3, r2, r3
 8008740:	69fa      	ldr	r2, [r7, #28]
 8008742:	4313      	orrs	r3, r2
 8008744:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8008746:	693b      	ldr	r3, [r7, #16]
 8008748:	69fa      	ldr	r2, [r7, #28]
 800874a:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	685b      	ldr	r3, [r3, #4]
 8008750:	2b01      	cmp	r3, #1
 8008752:	d00b      	beq.n	800876c <HAL_GPIO_Init+0x1e4>
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	685b      	ldr	r3, [r3, #4]
 8008758:	2b02      	cmp	r3, #2
 800875a:	d007      	beq.n	800876c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008760:	2b11      	cmp	r3, #17
 8008762:	d003      	beq.n	800876c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	685b      	ldr	r3, [r3, #4]
 8008768:	2b12      	cmp	r3, #18
 800876a:	d130      	bne.n	80087ce <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 800876c:	693b      	ldr	r3, [r7, #16]
 800876e:	689b      	ldr	r3, [r3, #8]
 8008770:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 8008772:	69bb      	ldr	r3, [r7, #24]
 8008774:	005b      	lsls	r3, r3, #1
 8008776:	2203      	movs	r2, #3
 8008778:	fa02 f303 	lsl.w	r3, r2, r3
 800877c:	43db      	mvns	r3, r3
 800877e:	69fa      	ldr	r2, [r7, #28]
 8008780:	4013      	ands	r3, r2
 8008782:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	68da      	ldr	r2, [r3, #12]
 8008788:	69bb      	ldr	r3, [r7, #24]
 800878a:	005b      	lsls	r3, r3, #1
 800878c:	fa02 f303 	lsl.w	r3, r2, r3
 8008790:	69fa      	ldr	r2, [r7, #28]
 8008792:	4313      	orrs	r3, r2
 8008794:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8008796:	693b      	ldr	r3, [r7, #16]
 8008798:	69fa      	ldr	r2, [r7, #28]
 800879a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 800879c:	693b      	ldr	r3, [r7, #16]
 800879e:	685b      	ldr	r3, [r3, #4]
 80087a0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 80087a2:	2201      	movs	r2, #1
 80087a4:	69bb      	ldr	r3, [r7, #24]
 80087a6:	fa02 f303 	lsl.w	r3, r2, r3
 80087aa:	43db      	mvns	r3, r3
 80087ac:	69fa      	ldr	r2, [r7, #28]
 80087ae:	4013      	ands	r3, r2
 80087b0:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	685b      	ldr	r3, [r3, #4]
 80087b6:	091b      	lsrs	r3, r3, #4
 80087b8:	f003 0201 	and.w	r2, r3, #1
 80087bc:	69bb      	ldr	r3, [r7, #24]
 80087be:	fa02 f303 	lsl.w	r3, r2, r3
 80087c2:	69fa      	ldr	r2, [r7, #28]
 80087c4:	4313      	orrs	r3, r2
 80087c6:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 80087c8:	693b      	ldr	r3, [r7, #16]
 80087ca:	69fa      	ldr	r2, [r7, #28]
 80087cc:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	685b      	ldr	r3, [r3, #4]
 80087d2:	2b03      	cmp	r3, #3
 80087d4:	d017      	beq.n	8008806 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 80087d6:	693b      	ldr	r3, [r7, #16]
 80087d8:	68db      	ldr	r3, [r3, #12]
 80087da:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 80087dc:	69bb      	ldr	r3, [r7, #24]
 80087de:	005b      	lsls	r3, r3, #1
 80087e0:	2203      	movs	r2, #3
 80087e2:	fa02 f303 	lsl.w	r3, r2, r3
 80087e6:	43db      	mvns	r3, r3
 80087e8:	69fa      	ldr	r2, [r7, #28]
 80087ea:	4013      	ands	r3, r2
 80087ec:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	689a      	ldr	r2, [r3, #8]
 80087f2:	69bb      	ldr	r3, [r7, #24]
 80087f4:	005b      	lsls	r3, r3, #1
 80087f6:	fa02 f303 	lsl.w	r3, r2, r3
 80087fa:	69fa      	ldr	r2, [r7, #28]
 80087fc:	4313      	orrs	r3, r2
 80087fe:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8008800:	693b      	ldr	r3, [r7, #16]
 8008802:	69fa      	ldr	r2, [r7, #28]
 8008804:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	685b      	ldr	r3, [r3, #4]
 800880a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800880e:	2b00      	cmp	r3, #0
 8008810:	d07c      	beq.n	800890c <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8008812:	4a47      	ldr	r2, [pc, #284]	; (8008930 <HAL_GPIO_Init+0x3a8>)
 8008814:	697b      	ldr	r3, [r7, #20]
 8008816:	089b      	lsrs	r3, r3, #2
 8008818:	3318      	adds	r3, #24
 800881a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800881e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8008820:	697b      	ldr	r3, [r7, #20]
 8008822:	f003 0303 	and.w	r3, r3, #3
 8008826:	00db      	lsls	r3, r3, #3
 8008828:	220f      	movs	r2, #15
 800882a:	fa02 f303 	lsl.w	r3, r2, r3
 800882e:	43db      	mvns	r3, r3
 8008830:	69fa      	ldr	r2, [r7, #28]
 8008832:	4013      	ands	r3, r2
 8008834:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	0a9a      	lsrs	r2, r3, #10
 800883a:	4b3e      	ldr	r3, [pc, #248]	; (8008934 <HAL_GPIO_Init+0x3ac>)
 800883c:	4013      	ands	r3, r2
 800883e:	697a      	ldr	r2, [r7, #20]
 8008840:	f002 0203 	and.w	r2, r2, #3
 8008844:	00d2      	lsls	r2, r2, #3
 8008846:	4093      	lsls	r3, r2
 8008848:	69fa      	ldr	r2, [r7, #28]
 800884a:	4313      	orrs	r3, r2
 800884c:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 800884e:	4938      	ldr	r1, [pc, #224]	; (8008930 <HAL_GPIO_Init+0x3a8>)
 8008850:	697b      	ldr	r3, [r7, #20]
 8008852:	089b      	lsrs	r3, r3, #2
 8008854:	3318      	adds	r3, #24
 8008856:	69fa      	ldr	r2, [r7, #28]
 8008858:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 800885c:	4b34      	ldr	r3, [pc, #208]	; (8008930 <HAL_GPIO_Init+0x3a8>)
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	43db      	mvns	r3, r3
 8008866:	69fa      	ldr	r2, [r7, #28]
 8008868:	4013      	ands	r3, r2
 800886a:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	685b      	ldr	r3, [r3, #4]
 8008870:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008874:	2b00      	cmp	r3, #0
 8008876:	d003      	beq.n	8008880 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8008878:	69fa      	ldr	r2, [r7, #28]
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	4313      	orrs	r3, r2
 800887e:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8008880:	4a2b      	ldr	r2, [pc, #172]	; (8008930 <HAL_GPIO_Init+0x3a8>)
 8008882:	69fb      	ldr	r3, [r7, #28]
 8008884:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8008886:	4b2a      	ldr	r3, [pc, #168]	; (8008930 <HAL_GPIO_Init+0x3a8>)
 8008888:	685b      	ldr	r3, [r3, #4]
 800888a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	43db      	mvns	r3, r3
 8008890:	69fa      	ldr	r2, [r7, #28]
 8008892:	4013      	ands	r3, r2
 8008894:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	685b      	ldr	r3, [r3, #4]
 800889a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d003      	beq.n	80088aa <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 80088a2:	69fa      	ldr	r2, [r7, #28]
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	4313      	orrs	r3, r2
 80088a8:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 80088aa:	4a21      	ldr	r2, [pc, #132]	; (8008930 <HAL_GPIO_Init+0x3a8>)
 80088ac:	69fb      	ldr	r3, [r7, #28]
 80088ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80088b0:	4b1f      	ldr	r3, [pc, #124]	; (8008930 <HAL_GPIO_Init+0x3a8>)
 80088b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80088b6:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	43db      	mvns	r3, r3
 80088bc:	69fa      	ldr	r2, [r7, #28]
 80088be:	4013      	ands	r3, r2
 80088c0:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80088c2:	683b      	ldr	r3, [r7, #0]
 80088c4:	685b      	ldr	r3, [r3, #4]
 80088c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d003      	beq.n	80088d6 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 80088ce:	69fa      	ldr	r2, [r7, #28]
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	4313      	orrs	r3, r2
 80088d4:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 80088d6:	4a16      	ldr	r2, [pc, #88]	; (8008930 <HAL_GPIO_Init+0x3a8>)
 80088d8:	69fb      	ldr	r3, [r7, #28]
 80088da:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 80088de:	4b14      	ldr	r3, [pc, #80]	; (8008930 <HAL_GPIO_Init+0x3a8>)
 80088e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80088e4:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	43db      	mvns	r3, r3
 80088ea:	69fa      	ldr	r2, [r7, #28]
 80088ec:	4013      	ands	r3, r2
 80088ee:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	685b      	ldr	r3, [r3, #4]
 80088f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d003      	beq.n	8008904 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 80088fc:	69fa      	ldr	r2, [r7, #28]
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	4313      	orrs	r3, r2
 8008902:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8008904:	4a0a      	ldr	r2, [pc, #40]	; (8008930 <HAL_GPIO_Init+0x3a8>)
 8008906:	69fb      	ldr	r3, [r7, #28]
 8008908:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 800890c:	697b      	ldr	r3, [r7, #20]
 800890e:	3301      	adds	r3, #1
 8008910:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	681a      	ldr	r2, [r3, #0]
 8008916:	697b      	ldr	r3, [r7, #20]
 8008918:	fa22 f303 	lsr.w	r3, r2, r3
 800891c:	2b00      	cmp	r3, #0
 800891e:	f47f ae3d 	bne.w	800859c <HAL_GPIO_Init+0x14>
  }
}
 8008922:	bf00      	nop
 8008924:	bf00      	nop
 8008926:	3724      	adds	r7, #36	; 0x24
 8008928:	46bd      	mov	sp, r7
 800892a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892e:	4770      	bx	lr
 8008930:	46022000 	.word	0x46022000
 8008934:	002f7f7f 	.word	0x002f7f7f

08008938 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008938:	b480      	push	{r7}
 800893a:	b083      	sub	sp, #12
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
 8008940:	460b      	mov	r3, r1
 8008942:	807b      	strh	r3, [r7, #2]
 8008944:	4613      	mov	r3, r2
 8008946:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008948:	787b      	ldrb	r3, [r7, #1]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d003      	beq.n	8008956 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800894e:	887a      	ldrh	r2, [r7, #2]
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8008954:	e002      	b.n	800895c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8008956:	887a      	ldrh	r2, [r7, #2]
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800895c:	bf00      	nop
 800895e:	370c      	adds	r7, #12
 8008960:	46bd      	mov	sp, r7
 8008962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008966:	4770      	bx	lr

08008968 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008968:	b480      	push	{r7}
 800896a:	b085      	sub	sp, #20
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8008970:	4b39      	ldr	r3, [pc, #228]	; (8008a58 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8008972:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008974:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008978:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 800897a:	68ba      	ldr	r2, [r7, #8]
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	429a      	cmp	r2, r3
 8008980:	d10b      	bne.n	800899a <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008988:	d905      	bls.n	8008996 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800898a:	4b33      	ldr	r3, [pc, #204]	; (8008a58 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800898c:	68db      	ldr	r3, [r3, #12]
 800898e:	4a32      	ldr	r2, [pc, #200]	; (8008a58 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8008990:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008994:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8008996:	2300      	movs	r3, #0
 8008998:	e057      	b.n	8008a4a <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80089a0:	d90a      	bls.n	80089b8 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 80089a2:	4b2d      	ldr	r3, [pc, #180]	; (8008a58 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80089a4:	68db      	ldr	r3, [r3, #12]
 80089a6:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	4313      	orrs	r3, r2
 80089ae:	4a2a      	ldr	r2, [pc, #168]	; (8008a58 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80089b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80089b4:	60d3      	str	r3, [r2, #12]
 80089b6:	e007      	b.n	80089c8 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 80089b8:	4b27      	ldr	r3, [pc, #156]	; (8008a58 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80089ba:	68db      	ldr	r3, [r3, #12]
 80089bc:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80089c0:	4925      	ldr	r1, [pc, #148]	; (8008a58 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	4313      	orrs	r3, r2
 80089c6:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80089c8:	4b24      	ldr	r3, [pc, #144]	; (8008a5c <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	4a24      	ldr	r2, [pc, #144]	; (8008a60 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80089ce:	fba2 2303 	umull	r2, r3, r2, r3
 80089d2:	099b      	lsrs	r3, r3, #6
 80089d4:	2232      	movs	r2, #50	; 0x32
 80089d6:	fb02 f303 	mul.w	r3, r2, r3
 80089da:	4a21      	ldr	r2, [pc, #132]	; (8008a60 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80089dc:	fba2 2303 	umull	r2, r3, r2, r3
 80089e0:	099b      	lsrs	r3, r3, #6
 80089e2:	3301      	adds	r3, #1
 80089e4:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80089e6:	e002      	b.n	80089ee <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	3b01      	subs	r3, #1
 80089ec:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80089ee:	4b1a      	ldr	r3, [pc, #104]	; (8008a58 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80089f0:	68db      	ldr	r3, [r3, #12]
 80089f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d102      	bne.n	8008a00 <HAL_PWREx_ControlVoltageScaling+0x98>
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d1f3      	bne.n	80089e8 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d01b      	beq.n	8008a3e <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8008a06:	4b15      	ldr	r3, [pc, #84]	; (8008a5c <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	4a15      	ldr	r2, [pc, #84]	; (8008a60 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8008a0c:	fba2 2303 	umull	r2, r3, r2, r3
 8008a10:	099b      	lsrs	r3, r3, #6
 8008a12:	2232      	movs	r2, #50	; 0x32
 8008a14:	fb02 f303 	mul.w	r3, r2, r3
 8008a18:	4a11      	ldr	r2, [pc, #68]	; (8008a60 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8008a1a:	fba2 2303 	umull	r2, r3, r2, r3
 8008a1e:	099b      	lsrs	r3, r3, #6
 8008a20:	3301      	adds	r3, #1
 8008a22:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8008a24:	e002      	b.n	8008a2c <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	3b01      	subs	r3, #1
 8008a2a:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8008a2c:	4b0a      	ldr	r3, [pc, #40]	; (8008a58 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8008a2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d102      	bne.n	8008a3e <HAL_PWREx_ControlVoltageScaling+0xd6>
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d1f3      	bne.n	8008a26 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d101      	bne.n	8008a48 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8008a44:	2303      	movs	r3, #3
 8008a46:	e000      	b.n	8008a4a <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 8008a48:	2300      	movs	r3, #0
}
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	3714      	adds	r7, #20
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a54:	4770      	bx	lr
 8008a56:	bf00      	nop
 8008a58:	46020800 	.word	0x46020800
 8008a5c:	20008000 	.word	0x20008000
 8008a60:	10624dd3 	.word	0x10624dd3

08008a64 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8008a64:	b480      	push	{r7}
 8008a66:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8008a68:	4b04      	ldr	r3, [pc, #16]	; (8008a7c <HAL_PWREx_GetVoltageRange+0x18>)
 8008a6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a6c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8008a70:	4618      	mov	r0, r3
 8008a72:	46bd      	mov	sp, r7
 8008a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a78:	4770      	bx	lr
 8008a7a:	bf00      	nop
 8008a7c:	46020800 	.word	0x46020800

08008a80 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b08e      	sub	sp, #56	; 0x38
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8008a88:	2300      	movs	r3, #0
 8008a8a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d102      	bne.n	8008a9a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8008a94:	2301      	movs	r3, #1
 8008a96:	f000 bec8 	b.w	800982a <__unprivileged_flash_start__+0x92a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008a9a:	4b99      	ldr	r3, [pc, #612]	; (8008d00 <HAL_RCC_OscConfig+0x280>)
 8008a9c:	69db      	ldr	r3, [r3, #28]
 8008a9e:	f003 030c 	and.w	r3, r3, #12
 8008aa2:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008aa4:	4b96      	ldr	r3, [pc, #600]	; (8008d00 <HAL_RCC_OscConfig+0x280>)
 8008aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008aa8:	f003 0303 	and.w	r3, r3, #3
 8008aac:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	f003 0310 	and.w	r3, r3, #16
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	f000 816c 	beq.w	8008d94 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8008abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d007      	beq.n	8008ad2 <HAL_RCC_OscConfig+0x52>
 8008ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ac4:	2b0c      	cmp	r3, #12
 8008ac6:	f040 80de 	bne.w	8008c86 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8008aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008acc:	2b01      	cmp	r3, #1
 8008ace:	f040 80da 	bne.w	8008c86 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	69db      	ldr	r3, [r3, #28]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d102      	bne.n	8008ae0 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8008ada:	2301      	movs	r3, #1
 8008adc:	f000 bea5 	b.w	800982a <__unprivileged_flash_start__+0x92a>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008ae4:	4b86      	ldr	r3, [pc, #536]	; (8008d00 <HAL_RCC_OscConfig+0x280>)
 8008ae6:	689b      	ldr	r3, [r3, #8]
 8008ae8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d004      	beq.n	8008afa <HAL_RCC_OscConfig+0x7a>
 8008af0:	4b83      	ldr	r3, [pc, #524]	; (8008d00 <HAL_RCC_OscConfig+0x280>)
 8008af2:	689b      	ldr	r3, [r3, #8]
 8008af4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008af8:	e005      	b.n	8008b06 <HAL_RCC_OscConfig+0x86>
 8008afa:	4b81      	ldr	r3, [pc, #516]	; (8008d00 <HAL_RCC_OscConfig+0x280>)
 8008afc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008b00:	041b      	lsls	r3, r3, #16
 8008b02:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8008b06:	4293      	cmp	r3, r2
 8008b08:	d255      	bcs.n	8008bb6 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8008b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d10a      	bne.n	8008b26 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b14:	4618      	mov	r0, r3
 8008b16:	f001 f99d 	bl	8009e54 <RCC_SetFlashLatencyFromMSIRange>
 8008b1a:	4603      	mov	r3, r0
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d002      	beq.n	8008b26 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 8008b20:	2301      	movs	r3, #1
 8008b22:	f000 be82 	b.w	800982a <__unprivileged_flash_start__+0x92a>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8008b26:	4b76      	ldr	r3, [pc, #472]	; (8008d00 <HAL_RCC_OscConfig+0x280>)
 8008b28:	689b      	ldr	r3, [r3, #8]
 8008b2a:	4a75      	ldr	r2, [pc, #468]	; (8008d00 <HAL_RCC_OscConfig+0x280>)
 8008b2c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008b30:	6093      	str	r3, [r2, #8]
 8008b32:	4b73      	ldr	r3, [pc, #460]	; (8008d00 <HAL_RCC_OscConfig+0x280>)
 8008b34:	689b      	ldr	r3, [r3, #8]
 8008b36:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b3e:	4970      	ldr	r1, [pc, #448]	; (8008d00 <HAL_RCC_OscConfig+0x280>)
 8008b40:	4313      	orrs	r3, r2
 8008b42:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b48:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8008b4c:	d309      	bcc.n	8008b62 <HAL_RCC_OscConfig+0xe2>
 8008b4e:	4b6c      	ldr	r3, [pc, #432]	; (8008d00 <HAL_RCC_OscConfig+0x280>)
 8008b50:	68db      	ldr	r3, [r3, #12]
 8008b52:	f023 021f 	bic.w	r2, r3, #31
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	6a1b      	ldr	r3, [r3, #32]
 8008b5a:	4969      	ldr	r1, [pc, #420]	; (8008d00 <HAL_RCC_OscConfig+0x280>)
 8008b5c:	4313      	orrs	r3, r2
 8008b5e:	60cb      	str	r3, [r1, #12]
 8008b60:	e07e      	b.n	8008c60 <HAL_RCC_OscConfig+0x1e0>
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	da0a      	bge.n	8008b80 <HAL_RCC_OscConfig+0x100>
 8008b6a:	4b65      	ldr	r3, [pc, #404]	; (8008d00 <HAL_RCC_OscConfig+0x280>)
 8008b6c:	68db      	ldr	r3, [r3, #12]
 8008b6e:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	6a1b      	ldr	r3, [r3, #32]
 8008b76:	015b      	lsls	r3, r3, #5
 8008b78:	4961      	ldr	r1, [pc, #388]	; (8008d00 <HAL_RCC_OscConfig+0x280>)
 8008b7a:	4313      	orrs	r3, r2
 8008b7c:	60cb      	str	r3, [r1, #12]
 8008b7e:	e06f      	b.n	8008c60 <HAL_RCC_OscConfig+0x1e0>
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b88:	d30a      	bcc.n	8008ba0 <HAL_RCC_OscConfig+0x120>
 8008b8a:	4b5d      	ldr	r3, [pc, #372]	; (8008d00 <HAL_RCC_OscConfig+0x280>)
 8008b8c:	68db      	ldr	r3, [r3, #12]
 8008b8e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6a1b      	ldr	r3, [r3, #32]
 8008b96:	029b      	lsls	r3, r3, #10
 8008b98:	4959      	ldr	r1, [pc, #356]	; (8008d00 <HAL_RCC_OscConfig+0x280>)
 8008b9a:	4313      	orrs	r3, r2
 8008b9c:	60cb      	str	r3, [r1, #12]
 8008b9e:	e05f      	b.n	8008c60 <HAL_RCC_OscConfig+0x1e0>
 8008ba0:	4b57      	ldr	r3, [pc, #348]	; (8008d00 <HAL_RCC_OscConfig+0x280>)
 8008ba2:	68db      	ldr	r3, [r3, #12]
 8008ba4:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	6a1b      	ldr	r3, [r3, #32]
 8008bac:	03db      	lsls	r3, r3, #15
 8008bae:	4954      	ldr	r1, [pc, #336]	; (8008d00 <HAL_RCC_OscConfig+0x280>)
 8008bb0:	4313      	orrs	r3, r2
 8008bb2:	60cb      	str	r3, [r1, #12]
 8008bb4:	e054      	b.n	8008c60 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8008bb6:	4b52      	ldr	r3, [pc, #328]	; (8008d00 <HAL_RCC_OscConfig+0x280>)
 8008bb8:	689b      	ldr	r3, [r3, #8]
 8008bba:	4a51      	ldr	r2, [pc, #324]	; (8008d00 <HAL_RCC_OscConfig+0x280>)
 8008bbc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008bc0:	6093      	str	r3, [r2, #8]
 8008bc2:	4b4f      	ldr	r3, [pc, #316]	; (8008d00 <HAL_RCC_OscConfig+0x280>)
 8008bc4:	689b      	ldr	r3, [r3, #8]
 8008bc6:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bce:	494c      	ldr	r1, [pc, #304]	; (8008d00 <HAL_RCC_OscConfig+0x280>)
 8008bd0:	4313      	orrs	r3, r2
 8008bd2:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bd8:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8008bdc:	d309      	bcc.n	8008bf2 <HAL_RCC_OscConfig+0x172>
 8008bde:	4b48      	ldr	r3, [pc, #288]	; (8008d00 <HAL_RCC_OscConfig+0x280>)
 8008be0:	68db      	ldr	r3, [r3, #12]
 8008be2:	f023 021f 	bic.w	r2, r3, #31
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	6a1b      	ldr	r3, [r3, #32]
 8008bea:	4945      	ldr	r1, [pc, #276]	; (8008d00 <HAL_RCC_OscConfig+0x280>)
 8008bec:	4313      	orrs	r3, r2
 8008bee:	60cb      	str	r3, [r1, #12]
 8008bf0:	e028      	b.n	8008c44 <HAL_RCC_OscConfig+0x1c4>
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	da0a      	bge.n	8008c10 <HAL_RCC_OscConfig+0x190>
 8008bfa:	4b41      	ldr	r3, [pc, #260]	; (8008d00 <HAL_RCC_OscConfig+0x280>)
 8008bfc:	68db      	ldr	r3, [r3, #12]
 8008bfe:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	6a1b      	ldr	r3, [r3, #32]
 8008c06:	015b      	lsls	r3, r3, #5
 8008c08:	493d      	ldr	r1, [pc, #244]	; (8008d00 <HAL_RCC_OscConfig+0x280>)
 8008c0a:	4313      	orrs	r3, r2
 8008c0c:	60cb      	str	r3, [r1, #12]
 8008c0e:	e019      	b.n	8008c44 <HAL_RCC_OscConfig+0x1c4>
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c18:	d30a      	bcc.n	8008c30 <HAL_RCC_OscConfig+0x1b0>
 8008c1a:	4b39      	ldr	r3, [pc, #228]	; (8008d00 <HAL_RCC_OscConfig+0x280>)
 8008c1c:	68db      	ldr	r3, [r3, #12]
 8008c1e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	6a1b      	ldr	r3, [r3, #32]
 8008c26:	029b      	lsls	r3, r3, #10
 8008c28:	4935      	ldr	r1, [pc, #212]	; (8008d00 <HAL_RCC_OscConfig+0x280>)
 8008c2a:	4313      	orrs	r3, r2
 8008c2c:	60cb      	str	r3, [r1, #12]
 8008c2e:	e009      	b.n	8008c44 <HAL_RCC_OscConfig+0x1c4>
 8008c30:	4b33      	ldr	r3, [pc, #204]	; (8008d00 <HAL_RCC_OscConfig+0x280>)
 8008c32:	68db      	ldr	r3, [r3, #12]
 8008c34:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	6a1b      	ldr	r3, [r3, #32]
 8008c3c:	03db      	lsls	r3, r3, #15
 8008c3e:	4930      	ldr	r1, [pc, #192]	; (8008d00 <HAL_RCC_OscConfig+0x280>)
 8008c40:	4313      	orrs	r3, r2
 8008c42:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8008c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d10a      	bne.n	8008c60 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c4e:	4618      	mov	r0, r3
 8008c50:	f001 f900 	bl	8009e54 <RCC_SetFlashLatencyFromMSIRange>
 8008c54:	4603      	mov	r3, r0
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d002      	beq.n	8008c60 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 8008c5a:	2301      	movs	r3, #1
 8008c5c:	f000 bde5 	b.w	800982a <__unprivileged_flash_start__+0x92a>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8008c60:	f001 f8de 	bl	8009e20 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8008c64:	4b27      	ldr	r3, [pc, #156]	; (8008d04 <HAL_RCC_OscConfig+0x284>)
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	4618      	mov	r0, r3
 8008c6a:	f7ff fb67 	bl	800833c <HAL_InitTick>
 8008c6e:	4603      	mov	r3, r0
 8008c70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 8008c74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	f000 808a 	beq.w	8008d92 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8008c7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008c82:	f000 bdd2 	b.w	800982a <__unprivileged_flash_start__+0x92a>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	69db      	ldr	r3, [r3, #28]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d066      	beq.n	8008d5c <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8008c8e:	4b1c      	ldr	r3, [pc, #112]	; (8008d00 <HAL_RCC_OscConfig+0x280>)
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	4a1b      	ldr	r2, [pc, #108]	; (8008d00 <HAL_RCC_OscConfig+0x280>)
 8008c94:	f043 0301 	orr.w	r3, r3, #1
 8008c98:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8008c9a:	f7ff fb85 	bl	80083a8 <HAL_GetTick>
 8008c9e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8008ca0:	e009      	b.n	8008cb6 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008ca2:	f7ff fb81 	bl	80083a8 <HAL_GetTick>
 8008ca6:	4602      	mov	r2, r0
 8008ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008caa:	1ad3      	subs	r3, r2, r3
 8008cac:	2b02      	cmp	r3, #2
 8008cae:	d902      	bls.n	8008cb6 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8008cb0:	2303      	movs	r3, #3
 8008cb2:	f000 bdba 	b.w	800982a <__unprivileged_flash_start__+0x92a>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8008cb6:	4b12      	ldr	r3, [pc, #72]	; (8008d00 <HAL_RCC_OscConfig+0x280>)
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	f003 0304 	and.w	r3, r3, #4
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d0ef      	beq.n	8008ca2 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8008cc2:	4b0f      	ldr	r3, [pc, #60]	; (8008d00 <HAL_RCC_OscConfig+0x280>)
 8008cc4:	689b      	ldr	r3, [r3, #8]
 8008cc6:	4a0e      	ldr	r2, [pc, #56]	; (8008d00 <HAL_RCC_OscConfig+0x280>)
 8008cc8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008ccc:	6093      	str	r3, [r2, #8]
 8008cce:	4b0c      	ldr	r3, [pc, #48]	; (8008d00 <HAL_RCC_OscConfig+0x280>)
 8008cd0:	689b      	ldr	r3, [r3, #8]
 8008cd2:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cda:	4909      	ldr	r1, [pc, #36]	; (8008d00 <HAL_RCC_OscConfig+0x280>)
 8008cdc:	4313      	orrs	r3, r2
 8008cde:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ce4:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8008ce8:	d30e      	bcc.n	8008d08 <HAL_RCC_OscConfig+0x288>
 8008cea:	4b05      	ldr	r3, [pc, #20]	; (8008d00 <HAL_RCC_OscConfig+0x280>)
 8008cec:	68db      	ldr	r3, [r3, #12]
 8008cee:	f023 021f 	bic.w	r2, r3, #31
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	6a1b      	ldr	r3, [r3, #32]
 8008cf6:	4902      	ldr	r1, [pc, #8]	; (8008d00 <HAL_RCC_OscConfig+0x280>)
 8008cf8:	4313      	orrs	r3, r2
 8008cfa:	60cb      	str	r3, [r1, #12]
 8008cfc:	e04a      	b.n	8008d94 <HAL_RCC_OscConfig+0x314>
 8008cfe:	bf00      	nop
 8008d00:	46020c00 	.word	0x46020c00
 8008d04:	20008004 	.word	0x20008004
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	da0a      	bge.n	8008d26 <HAL_RCC_OscConfig+0x2a6>
 8008d10:	4b98      	ldr	r3, [pc, #608]	; (8008f74 <__unprivileged_flash_start__+0x74>)
 8008d12:	68db      	ldr	r3, [r3, #12]
 8008d14:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	6a1b      	ldr	r3, [r3, #32]
 8008d1c:	015b      	lsls	r3, r3, #5
 8008d1e:	4995      	ldr	r1, [pc, #596]	; (8008f74 <__unprivileged_flash_start__+0x74>)
 8008d20:	4313      	orrs	r3, r2
 8008d22:	60cb      	str	r3, [r1, #12]
 8008d24:	e036      	b.n	8008d94 <HAL_RCC_OscConfig+0x314>
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d2e:	d30a      	bcc.n	8008d46 <HAL_RCC_OscConfig+0x2c6>
 8008d30:	4b90      	ldr	r3, [pc, #576]	; (8008f74 <__unprivileged_flash_start__+0x74>)
 8008d32:	68db      	ldr	r3, [r3, #12]
 8008d34:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	6a1b      	ldr	r3, [r3, #32]
 8008d3c:	029b      	lsls	r3, r3, #10
 8008d3e:	498d      	ldr	r1, [pc, #564]	; (8008f74 <__unprivileged_flash_start__+0x74>)
 8008d40:	4313      	orrs	r3, r2
 8008d42:	60cb      	str	r3, [r1, #12]
 8008d44:	e026      	b.n	8008d94 <HAL_RCC_OscConfig+0x314>
 8008d46:	4b8b      	ldr	r3, [pc, #556]	; (8008f74 <__unprivileged_flash_start__+0x74>)
 8008d48:	68db      	ldr	r3, [r3, #12]
 8008d4a:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	6a1b      	ldr	r3, [r3, #32]
 8008d52:	03db      	lsls	r3, r3, #15
 8008d54:	4987      	ldr	r1, [pc, #540]	; (8008f74 <__unprivileged_flash_start__+0x74>)
 8008d56:	4313      	orrs	r3, r2
 8008d58:	60cb      	str	r3, [r1, #12]
 8008d5a:	e01b      	b.n	8008d94 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8008d5c:	4b85      	ldr	r3, [pc, #532]	; (8008f74 <__unprivileged_flash_start__+0x74>)
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	4a84      	ldr	r2, [pc, #528]	; (8008f74 <__unprivileged_flash_start__+0x74>)
 8008d62:	f023 0301 	bic.w	r3, r3, #1
 8008d66:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8008d68:	f7ff fb1e 	bl	80083a8 <HAL_GetTick>
 8008d6c:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8008d6e:	e009      	b.n	8008d84 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008d70:	f7ff fb1a 	bl	80083a8 <HAL_GetTick>
 8008d74:	4602      	mov	r2, r0
 8008d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d78:	1ad3      	subs	r3, r2, r3
 8008d7a:	2b02      	cmp	r3, #2
 8008d7c:	d902      	bls.n	8008d84 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8008d7e:	2303      	movs	r3, #3
 8008d80:	f000 bd53 	b.w	800982a <__unprivileged_flash_start__+0x92a>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8008d84:	4b7b      	ldr	r3, [pc, #492]	; (8008f74 <__unprivileged_flash_start__+0x74>)
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	f003 0304 	and.w	r3, r3, #4
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d1ef      	bne.n	8008d70 <HAL_RCC_OscConfig+0x2f0>
 8008d90:	e000      	b.n	8008d94 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8008d92:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	f003 0301 	and.w	r3, r3, #1
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	f000 808b 	beq.w	8008eb8 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8008da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008da4:	2b08      	cmp	r3, #8
 8008da6:	d005      	beq.n	8008db4 <HAL_RCC_OscConfig+0x334>
 8008da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008daa:	2b0c      	cmp	r3, #12
 8008dac:	d109      	bne.n	8008dc2 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8008dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008db0:	2b03      	cmp	r3, #3
 8008db2:	d106      	bne.n	8008dc2 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	685b      	ldr	r3, [r3, #4]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d17d      	bne.n	8008eb8 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8008dbc:	2301      	movs	r3, #1
 8008dbe:	f000 bd34 	b.w	800982a <__unprivileged_flash_start__+0x92a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	685b      	ldr	r3, [r3, #4]
 8008dc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008dca:	d106      	bne.n	8008dda <HAL_RCC_OscConfig+0x35a>
 8008dcc:	4b69      	ldr	r3, [pc, #420]	; (8008f74 <__unprivileged_flash_start__+0x74>)
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	4a68      	ldr	r2, [pc, #416]	; (8008f74 <__unprivileged_flash_start__+0x74>)
 8008dd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008dd6:	6013      	str	r3, [r2, #0]
 8008dd8:	e041      	b.n	8008e5e <HAL_RCC_OscConfig+0x3de>
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	685b      	ldr	r3, [r3, #4]
 8008dde:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008de2:	d112      	bne.n	8008e0a <HAL_RCC_OscConfig+0x38a>
 8008de4:	4b63      	ldr	r3, [pc, #396]	; (8008f74 <__unprivileged_flash_start__+0x74>)
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	4a62      	ldr	r2, [pc, #392]	; (8008f74 <__unprivileged_flash_start__+0x74>)
 8008dea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008dee:	6013      	str	r3, [r2, #0]
 8008df0:	4b60      	ldr	r3, [pc, #384]	; (8008f74 <__unprivileged_flash_start__+0x74>)
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	4a5f      	ldr	r2, [pc, #380]	; (8008f74 <__unprivileged_flash_start__+0x74>)
 8008df6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008dfa:	6013      	str	r3, [r2, #0]
 8008dfc:	4b5d      	ldr	r3, [pc, #372]	; (8008f74 <__unprivileged_flash_start__+0x74>)
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	4a5c      	ldr	r2, [pc, #368]	; (8008f74 <__unprivileged_flash_start__+0x74>)
 8008e02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008e06:	6013      	str	r3, [r2, #0]
 8008e08:	e029      	b.n	8008e5e <HAL_RCC_OscConfig+0x3de>
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	685b      	ldr	r3, [r3, #4]
 8008e0e:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8008e12:	d112      	bne.n	8008e3a <HAL_RCC_OscConfig+0x3ba>
 8008e14:	4b57      	ldr	r3, [pc, #348]	; (8008f74 <__unprivileged_flash_start__+0x74>)
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	4a56      	ldr	r2, [pc, #344]	; (8008f74 <__unprivileged_flash_start__+0x74>)
 8008e1a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008e1e:	6013      	str	r3, [r2, #0]
 8008e20:	4b54      	ldr	r3, [pc, #336]	; (8008f74 <__unprivileged_flash_start__+0x74>)
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	4a53      	ldr	r2, [pc, #332]	; (8008f74 <__unprivileged_flash_start__+0x74>)
 8008e26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008e2a:	6013      	str	r3, [r2, #0]
 8008e2c:	4b51      	ldr	r3, [pc, #324]	; (8008f74 <__unprivileged_flash_start__+0x74>)
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	4a50      	ldr	r2, [pc, #320]	; (8008f74 <__unprivileged_flash_start__+0x74>)
 8008e32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008e36:	6013      	str	r3, [r2, #0]
 8008e38:	e011      	b.n	8008e5e <HAL_RCC_OscConfig+0x3de>
 8008e3a:	4b4e      	ldr	r3, [pc, #312]	; (8008f74 <__unprivileged_flash_start__+0x74>)
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	4a4d      	ldr	r2, [pc, #308]	; (8008f74 <__unprivileged_flash_start__+0x74>)
 8008e40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008e44:	6013      	str	r3, [r2, #0]
 8008e46:	4b4b      	ldr	r3, [pc, #300]	; (8008f74 <__unprivileged_flash_start__+0x74>)
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	4a4a      	ldr	r2, [pc, #296]	; (8008f74 <__unprivileged_flash_start__+0x74>)
 8008e4c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008e50:	6013      	str	r3, [r2, #0]
 8008e52:	4b48      	ldr	r3, [pc, #288]	; (8008f74 <__unprivileged_flash_start__+0x74>)
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	4a47      	ldr	r2, [pc, #284]	; (8008f74 <__unprivileged_flash_start__+0x74>)
 8008e58:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008e5c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	685b      	ldr	r3, [r3, #4]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d014      	beq.n	8008e90 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8008e66:	f7ff fa9f 	bl	80083a8 <HAL_GetTick>
 8008e6a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008e6c:	e009      	b.n	8008e82 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008e6e:	f7ff fa9b 	bl	80083a8 <HAL_GetTick>
 8008e72:	4602      	mov	r2, r0
 8008e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e76:	1ad3      	subs	r3, r2, r3
 8008e78:	2b64      	cmp	r3, #100	; 0x64
 8008e7a:	d902      	bls.n	8008e82 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8008e7c:	2303      	movs	r3, #3
 8008e7e:	f000 bcd4 	b.w	800982a <__unprivileged_flash_start__+0x92a>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008e82:	4b3c      	ldr	r3, [pc, #240]	; (8008f74 <__unprivileged_flash_start__+0x74>)
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d0ef      	beq.n	8008e6e <HAL_RCC_OscConfig+0x3ee>
 8008e8e:	e013      	b.n	8008eb8 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8008e90:	f7ff fa8a 	bl	80083a8 <HAL_GetTick>
 8008e94:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008e96:	e009      	b.n	8008eac <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008e98:	f7ff fa86 	bl	80083a8 <HAL_GetTick>
 8008e9c:	4602      	mov	r2, r0
 8008e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ea0:	1ad3      	subs	r3, r2, r3
 8008ea2:	2b64      	cmp	r3, #100	; 0x64
 8008ea4:	d902      	bls.n	8008eac <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8008ea6:	2303      	movs	r3, #3
 8008ea8:	f000 bcbf 	b.w	800982a <__unprivileged_flash_start__+0x92a>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008eac:	4b31      	ldr	r3, [pc, #196]	; (8008f74 <__unprivileged_flash_start__+0x74>)
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d1ef      	bne.n	8008e98 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	f003 0302 	and.w	r3, r3, #2
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d05f      	beq.n	8008f84 <__unprivileged_flash_start__+0x84>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8008ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ec6:	2b04      	cmp	r3, #4
 8008ec8:	d005      	beq.n	8008ed6 <HAL_RCC_OscConfig+0x456>
 8008eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ecc:	2b0c      	cmp	r3, #12
 8008ece:	d114      	bne.n	8008efa <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8008ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ed2:	2b02      	cmp	r3, #2
 8008ed4:	d111      	bne.n	8008efa <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	68db      	ldr	r3, [r3, #12]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d102      	bne.n	8008ee4 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8008ede:	2301      	movs	r3, #1
 8008ee0:	f000 bca3 	b.w	800982a <__unprivileged_flash_start__+0x92a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8008ee4:	4b23      	ldr	r3, [pc, #140]	; (8008f74 <__unprivileged_flash_start__+0x74>)
 8008ee6:	691b      	ldr	r3, [r3, #16]
 8008ee8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	691b      	ldr	r3, [r3, #16]
 8008ef0:	041b      	lsls	r3, r3, #16
 8008ef2:	4920      	ldr	r1, [pc, #128]	; (8008f74 <__unprivileged_flash_start__+0x74>)
 8008ef4:	4313      	orrs	r3, r2
 8008ef6:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8008ef8:	e044      	b.n	8008f84 <__unprivileged_flash_start__+0x84>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	68db      	ldr	r3, [r3, #12]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d024      	beq.n	8008f4c <__unprivileged_flash_start__+0x4c>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8008f02:	4b1c      	ldr	r3, [pc, #112]	; (8008f74 <__unprivileged_flash_start__+0x74>)
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	4a1b      	ldr	r2, [pc, #108]	; (8008f74 <__unprivileged_flash_start__+0x74>)
 8008f08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008f0c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8008f0e:	f7ff fa4b 	bl	80083a8 <HAL_GetTick>
 8008f12:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008f14:	e009      	b.n	8008f2a <__unprivileged_flash_start__+0x2a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008f16:	f7ff fa47 	bl	80083a8 <HAL_GetTick>
 8008f1a:	4602      	mov	r2, r0
 8008f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f1e:	1ad3      	subs	r3, r2, r3
 8008f20:	2b02      	cmp	r3, #2
 8008f22:	d902      	bls.n	8008f2a <__unprivileged_flash_start__+0x2a>
          {
            return HAL_TIMEOUT;
 8008f24:	2303      	movs	r3, #3
 8008f26:	f000 bc80 	b.w	800982a <__unprivileged_flash_start__+0x92a>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008f2a:	4b12      	ldr	r3, [pc, #72]	; (8008f74 <__unprivileged_flash_start__+0x74>)
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d0ef      	beq.n	8008f16 <__unprivileged_flash_start__+0x16>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8008f36:	4b0f      	ldr	r3, [pc, #60]	; (8008f74 <__unprivileged_flash_start__+0x74>)
 8008f38:	691b      	ldr	r3, [r3, #16]
 8008f3a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	691b      	ldr	r3, [r3, #16]
 8008f42:	041b      	lsls	r3, r3, #16
 8008f44:	490b      	ldr	r1, [pc, #44]	; (8008f74 <__unprivileged_flash_start__+0x74>)
 8008f46:	4313      	orrs	r3, r2
 8008f48:	610b      	str	r3, [r1, #16]
 8008f4a:	e01b      	b.n	8008f84 <__unprivileged_flash_start__+0x84>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8008f4c:	4b09      	ldr	r3, [pc, #36]	; (8008f74 <__unprivileged_flash_start__+0x74>)
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	4a08      	ldr	r2, [pc, #32]	; (8008f74 <__unprivileged_flash_start__+0x74>)
 8008f52:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008f56:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8008f58:	f7ff fa26 	bl	80083a8 <HAL_GetTick>
 8008f5c:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008f5e:	e00b      	b.n	8008f78 <__unprivileged_flash_start__+0x78>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008f60:	f7ff fa22 	bl	80083a8 <HAL_GetTick>
 8008f64:	4602      	mov	r2, r0
 8008f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f68:	1ad3      	subs	r3, r2, r3
 8008f6a:	2b02      	cmp	r3, #2
 8008f6c:	d904      	bls.n	8008f78 <__unprivileged_flash_start__+0x78>
          {
            return HAL_TIMEOUT;
 8008f6e:	2303      	movs	r3, #3
 8008f70:	f000 bc5b 	b.w	800982a <__unprivileged_flash_start__+0x92a>
 8008f74:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008f78:	4baf      	ldr	r3, [pc, #700]	; (8009238 <__unprivileged_flash_start__+0x338>)
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d1ed      	bne.n	8008f60 <__unprivileged_flash_start__+0x60>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	f003 0308 	and.w	r3, r3, #8
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	f000 80c8 	beq.w	8009122 <__unprivileged_flash_start__+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8008f92:	2300      	movs	r3, #0
 8008f94:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008f98:	4ba7      	ldr	r3, [pc, #668]	; (8009238 <__unprivileged_flash_start__+0x338>)
 8008f9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008f9e:	f003 0304 	and.w	r3, r3, #4
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d111      	bne.n	8008fca <__unprivileged_flash_start__+0xca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008fa6:	4ba4      	ldr	r3, [pc, #656]	; (8009238 <__unprivileged_flash_start__+0x338>)
 8008fa8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008fac:	4aa2      	ldr	r2, [pc, #648]	; (8009238 <__unprivileged_flash_start__+0x338>)
 8008fae:	f043 0304 	orr.w	r3, r3, #4
 8008fb2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8008fb6:	4ba0      	ldr	r3, [pc, #640]	; (8009238 <__unprivileged_flash_start__+0x338>)
 8008fb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008fbc:	f003 0304 	and.w	r3, r3, #4
 8008fc0:	617b      	str	r3, [r7, #20]
 8008fc2:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8008fc4:	2301      	movs	r3, #1
 8008fc6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8008fca:	4b9c      	ldr	r3, [pc, #624]	; (800923c <__unprivileged_flash_start__+0x33c>)
 8008fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fce:	f003 0301 	and.w	r3, r3, #1
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d119      	bne.n	800900a <__unprivileged_flash_start__+0x10a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8008fd6:	4b99      	ldr	r3, [pc, #612]	; (800923c <__unprivileged_flash_start__+0x33c>)
 8008fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fda:	4a98      	ldr	r2, [pc, #608]	; (800923c <__unprivileged_flash_start__+0x33c>)
 8008fdc:	f043 0301 	orr.w	r3, r3, #1
 8008fe0:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008fe2:	f7ff f9e1 	bl	80083a8 <HAL_GetTick>
 8008fe6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8008fe8:	e009      	b.n	8008ffe <__unprivileged_flash_start__+0xfe>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008fea:	f7ff f9dd 	bl	80083a8 <HAL_GetTick>
 8008fee:	4602      	mov	r2, r0
 8008ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ff2:	1ad3      	subs	r3, r2, r3
 8008ff4:	2b02      	cmp	r3, #2
 8008ff6:	d902      	bls.n	8008ffe <__unprivileged_flash_start__+0xfe>
        {
          return HAL_TIMEOUT;
 8008ff8:	2303      	movs	r3, #3
 8008ffa:	f000 bc16 	b.w	800982a <__unprivileged_flash_start__+0x92a>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8008ffe:	4b8f      	ldr	r3, [pc, #572]	; (800923c <__unprivileged_flash_start__+0x33c>)
 8009000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009002:	f003 0301 	and.w	r3, r3, #1
 8009006:	2b00      	cmp	r3, #0
 8009008:	d0ef      	beq.n	8008fea <__unprivileged_flash_start__+0xea>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	695b      	ldr	r3, [r3, #20]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d05f      	beq.n	80090d2 <__unprivileged_flash_start__+0x1d2>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8009012:	4b89      	ldr	r3, [pc, #548]	; (8009238 <__unprivileged_flash_start__+0x338>)
 8009014:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009018:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	699a      	ldr	r2, [r3, #24]
 800901e:	6a3b      	ldr	r3, [r7, #32]
 8009020:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009024:	429a      	cmp	r2, r3
 8009026:	d037      	beq.n	8009098 <__unprivileged_flash_start__+0x198>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8009028:	6a3b      	ldr	r3, [r7, #32]
 800902a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800902e:	2b00      	cmp	r3, #0
 8009030:	d006      	beq.n	8009040 <__unprivileged_flash_start__+0x140>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8009032:	6a3b      	ldr	r3, [r7, #32]
 8009034:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8009038:	2b00      	cmp	r3, #0
 800903a:	d101      	bne.n	8009040 <__unprivileged_flash_start__+0x140>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 800903c:	2301      	movs	r3, #1
 800903e:	e3f4      	b.n	800982a <__unprivileged_flash_start__+0x92a>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8009040:	6a3b      	ldr	r3, [r7, #32]
 8009042:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009046:	2b00      	cmp	r3, #0
 8009048:	d01b      	beq.n	8009082 <__unprivileged_flash_start__+0x182>
        {
          __HAL_RCC_LSI_DISABLE();
 800904a:	4b7b      	ldr	r3, [pc, #492]	; (8009238 <__unprivileged_flash_start__+0x338>)
 800904c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009050:	4a79      	ldr	r2, [pc, #484]	; (8009238 <__unprivileged_flash_start__+0x338>)
 8009052:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8009056:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 800905a:	f7ff f9a5 	bl	80083a8 <HAL_GetTick>
 800905e:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8009060:	e008      	b.n	8009074 <__unprivileged_flash_start__+0x174>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009062:	f7ff f9a1 	bl	80083a8 <HAL_GetTick>
 8009066:	4602      	mov	r2, r0
 8009068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800906a:	1ad3      	subs	r3, r2, r3
 800906c:	2b05      	cmp	r3, #5
 800906e:	d901      	bls.n	8009074 <__unprivileged_flash_start__+0x174>
            {
              return HAL_TIMEOUT;
 8009070:	2303      	movs	r3, #3
 8009072:	e3da      	b.n	800982a <__unprivileged_flash_start__+0x92a>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8009074:	4b70      	ldr	r3, [pc, #448]	; (8009238 <__unprivileged_flash_start__+0x338>)
 8009076:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800907a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800907e:	2b00      	cmp	r3, #0
 8009080:	d1ef      	bne.n	8009062 <__unprivileged_flash_start__+0x162>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8009082:	4b6d      	ldr	r3, [pc, #436]	; (8009238 <__unprivileged_flash_start__+0x338>)
 8009084:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009088:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	699b      	ldr	r3, [r3, #24]
 8009090:	4969      	ldr	r1, [pc, #420]	; (8009238 <__unprivileged_flash_start__+0x338>)
 8009092:	4313      	orrs	r3, r2
 8009094:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8009098:	4b67      	ldr	r3, [pc, #412]	; (8009238 <__unprivileged_flash_start__+0x338>)
 800909a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800909e:	4a66      	ldr	r2, [pc, #408]	; (8009238 <__unprivileged_flash_start__+0x338>)
 80090a0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80090a4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 80090a8:	f7ff f97e 	bl	80083a8 <HAL_GetTick>
 80090ac:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80090ae:	e008      	b.n	80090c2 <__unprivileged_flash_start__+0x1c2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80090b0:	f7ff f97a 	bl	80083a8 <HAL_GetTick>
 80090b4:	4602      	mov	r2, r0
 80090b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090b8:	1ad3      	subs	r3, r2, r3
 80090ba:	2b05      	cmp	r3, #5
 80090bc:	d901      	bls.n	80090c2 <__unprivileged_flash_start__+0x1c2>
        {
          return HAL_TIMEOUT;
 80090be:	2303      	movs	r3, #3
 80090c0:	e3b3      	b.n	800982a <__unprivileged_flash_start__+0x92a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80090c2:	4b5d      	ldr	r3, [pc, #372]	; (8009238 <__unprivileged_flash_start__+0x338>)
 80090c4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80090c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d0ef      	beq.n	80090b0 <__unprivileged_flash_start__+0x1b0>
 80090d0:	e01b      	b.n	800910a <__unprivileged_flash_start__+0x20a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 80090d2:	4b59      	ldr	r3, [pc, #356]	; (8009238 <__unprivileged_flash_start__+0x338>)
 80090d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80090d8:	4a57      	ldr	r2, [pc, #348]	; (8009238 <__unprivileged_flash_start__+0x338>)
 80090da:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 80090de:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 80090e2:	f7ff f961 	bl	80083a8 <HAL_GetTick>
 80090e6:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80090e8:	e008      	b.n	80090fc <__unprivileged_flash_start__+0x1fc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80090ea:	f7ff f95d 	bl	80083a8 <HAL_GetTick>
 80090ee:	4602      	mov	r2, r0
 80090f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090f2:	1ad3      	subs	r3, r2, r3
 80090f4:	2b05      	cmp	r3, #5
 80090f6:	d901      	bls.n	80090fc <__unprivileged_flash_start__+0x1fc>
        {
          return HAL_TIMEOUT;
 80090f8:	2303      	movs	r3, #3
 80090fa:	e396      	b.n	800982a <__unprivileged_flash_start__+0x92a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80090fc:	4b4e      	ldr	r3, [pc, #312]	; (8009238 <__unprivileged_flash_start__+0x338>)
 80090fe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009102:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009106:	2b00      	cmp	r3, #0
 8009108:	d1ef      	bne.n	80090ea <__unprivileged_flash_start__+0x1ea>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800910a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800910e:	2b01      	cmp	r3, #1
 8009110:	d107      	bne.n	8009122 <__unprivileged_flash_start__+0x222>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009112:	4b49      	ldr	r3, [pc, #292]	; (8009238 <__unprivileged_flash_start__+0x338>)
 8009114:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009118:	4a47      	ldr	r2, [pc, #284]	; (8009238 <__unprivileged_flash_start__+0x338>)
 800911a:	f023 0304 	bic.w	r3, r3, #4
 800911e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	f003 0304 	and.w	r3, r3, #4
 800912a:	2b00      	cmp	r3, #0
 800912c:	f000 8111 	beq.w	8009352 <__unprivileged_flash_start__+0x452>
  {
    FlagStatus pwrclkchanged = RESET;
 8009130:	2300      	movs	r3, #0
 8009132:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009136:	4b40      	ldr	r3, [pc, #256]	; (8009238 <__unprivileged_flash_start__+0x338>)
 8009138:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800913c:	f003 0304 	and.w	r3, r3, #4
 8009140:	2b00      	cmp	r3, #0
 8009142:	d111      	bne.n	8009168 <__unprivileged_flash_start__+0x268>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009144:	4b3c      	ldr	r3, [pc, #240]	; (8009238 <__unprivileged_flash_start__+0x338>)
 8009146:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800914a:	4a3b      	ldr	r2, [pc, #236]	; (8009238 <__unprivileged_flash_start__+0x338>)
 800914c:	f043 0304 	orr.w	r3, r3, #4
 8009150:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8009154:	4b38      	ldr	r3, [pc, #224]	; (8009238 <__unprivileged_flash_start__+0x338>)
 8009156:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800915a:	f003 0304 	and.w	r3, r3, #4
 800915e:	613b      	str	r3, [r7, #16]
 8009160:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8009162:	2301      	movs	r3, #1
 8009164:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8009168:	4b34      	ldr	r3, [pc, #208]	; (800923c <__unprivileged_flash_start__+0x33c>)
 800916a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800916c:	f003 0301 	and.w	r3, r3, #1
 8009170:	2b00      	cmp	r3, #0
 8009172:	d118      	bne.n	80091a6 <__unprivileged_flash_start__+0x2a6>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8009174:	4b31      	ldr	r3, [pc, #196]	; (800923c <__unprivileged_flash_start__+0x33c>)
 8009176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009178:	4a30      	ldr	r2, [pc, #192]	; (800923c <__unprivileged_flash_start__+0x33c>)
 800917a:	f043 0301 	orr.w	r3, r3, #1
 800917e:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009180:	f7ff f912 	bl	80083a8 <HAL_GetTick>
 8009184:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8009186:	e008      	b.n	800919a <__unprivileged_flash_start__+0x29a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009188:	f7ff f90e 	bl	80083a8 <HAL_GetTick>
 800918c:	4602      	mov	r2, r0
 800918e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009190:	1ad3      	subs	r3, r2, r3
 8009192:	2b02      	cmp	r3, #2
 8009194:	d901      	bls.n	800919a <__unprivileged_flash_start__+0x29a>
        {
          return HAL_TIMEOUT;
 8009196:	2303      	movs	r3, #3
 8009198:	e347      	b.n	800982a <__unprivileged_flash_start__+0x92a>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800919a:	4b28      	ldr	r3, [pc, #160]	; (800923c <__unprivileged_flash_start__+0x33c>)
 800919c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800919e:	f003 0301 	and.w	r3, r3, #1
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d0f0      	beq.n	8009188 <__unprivileged_flash_start__+0x288>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	689b      	ldr	r3, [r3, #8]
 80091aa:	f003 0301 	and.w	r3, r3, #1
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d01f      	beq.n	80091f2 <__unprivileged_flash_start__+0x2f2>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	689b      	ldr	r3, [r3, #8]
 80091b6:	f003 0304 	and.w	r3, r3, #4
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d010      	beq.n	80091e0 <__unprivileged_flash_start__+0x2e0>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80091be:	4b1e      	ldr	r3, [pc, #120]	; (8009238 <__unprivileged_flash_start__+0x338>)
 80091c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80091c4:	4a1c      	ldr	r2, [pc, #112]	; (8009238 <__unprivileged_flash_start__+0x338>)
 80091c6:	f043 0304 	orr.w	r3, r3, #4
 80091ca:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80091ce:	4b1a      	ldr	r3, [pc, #104]	; (8009238 <__unprivileged_flash_start__+0x338>)
 80091d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80091d4:	4a18      	ldr	r2, [pc, #96]	; (8009238 <__unprivileged_flash_start__+0x338>)
 80091d6:	f043 0301 	orr.w	r3, r3, #1
 80091da:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80091de:	e018      	b.n	8009212 <__unprivileged_flash_start__+0x312>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80091e0:	4b15      	ldr	r3, [pc, #84]	; (8009238 <__unprivileged_flash_start__+0x338>)
 80091e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80091e6:	4a14      	ldr	r2, [pc, #80]	; (8009238 <__unprivileged_flash_start__+0x338>)
 80091e8:	f043 0301 	orr.w	r3, r3, #1
 80091ec:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80091f0:	e00f      	b.n	8009212 <__unprivileged_flash_start__+0x312>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80091f2:	4b11      	ldr	r3, [pc, #68]	; (8009238 <__unprivileged_flash_start__+0x338>)
 80091f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80091f8:	4a0f      	ldr	r2, [pc, #60]	; (8009238 <__unprivileged_flash_start__+0x338>)
 80091fa:	f023 0301 	bic.w	r3, r3, #1
 80091fe:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8009202:	4b0d      	ldr	r3, [pc, #52]	; (8009238 <__unprivileged_flash_start__+0x338>)
 8009204:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009208:	4a0b      	ldr	r2, [pc, #44]	; (8009238 <__unprivileged_flash_start__+0x338>)
 800920a:	f023 0304 	bic.w	r3, r3, #4
 800920e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	689b      	ldr	r3, [r3, #8]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d057      	beq.n	80092ca <__unprivileged_flash_start__+0x3ca>
    {
      tickstart = HAL_GetTick();
 800921a:	f7ff f8c5 	bl	80083a8 <HAL_GetTick>
 800921e:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009220:	e00e      	b.n	8009240 <__unprivileged_flash_start__+0x340>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009222:	f7ff f8c1 	bl	80083a8 <HAL_GetTick>
 8009226:	4602      	mov	r2, r0
 8009228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800922a:	1ad3      	subs	r3, r2, r3
 800922c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009230:	4293      	cmp	r3, r2
 8009232:	d905      	bls.n	8009240 <__unprivileged_flash_start__+0x340>
        {
          return HAL_TIMEOUT;
 8009234:	2303      	movs	r3, #3
 8009236:	e2f8      	b.n	800982a <__unprivileged_flash_start__+0x92a>
 8009238:	46020c00 	.word	0x46020c00
 800923c:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009240:	4b9c      	ldr	r3, [pc, #624]	; (80094b4 <__unprivileged_flash_start__+0x5b4>)
 8009242:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009246:	f003 0302 	and.w	r3, r3, #2
 800924a:	2b00      	cmp	r3, #0
 800924c:	d0e9      	beq.n	8009222 <__unprivileged_flash_start__+0x322>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	689b      	ldr	r3, [r3, #8]
 8009252:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009256:	2b00      	cmp	r3, #0
 8009258:	d01b      	beq.n	8009292 <__unprivileged_flash_start__+0x392>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800925a:	4b96      	ldr	r3, [pc, #600]	; (80094b4 <__unprivileged_flash_start__+0x5b4>)
 800925c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009260:	4a94      	ldr	r2, [pc, #592]	; (80094b4 <__unprivileged_flash_start__+0x5b4>)
 8009262:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009266:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800926a:	e00a      	b.n	8009282 <__unprivileged_flash_start__+0x382>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800926c:	f7ff f89c 	bl	80083a8 <HAL_GetTick>
 8009270:	4602      	mov	r2, r0
 8009272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009274:	1ad3      	subs	r3, r2, r3
 8009276:	f241 3288 	movw	r2, #5000	; 0x1388
 800927a:	4293      	cmp	r3, r2
 800927c:	d901      	bls.n	8009282 <__unprivileged_flash_start__+0x382>
          {
            return HAL_TIMEOUT;
 800927e:	2303      	movs	r3, #3
 8009280:	e2d3      	b.n	800982a <__unprivileged_flash_start__+0x92a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8009282:	4b8c      	ldr	r3, [pc, #560]	; (80094b4 <__unprivileged_flash_start__+0x5b4>)
 8009284:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009288:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800928c:	2b00      	cmp	r3, #0
 800928e:	d0ed      	beq.n	800926c <__unprivileged_flash_start__+0x36c>
 8009290:	e053      	b.n	800933a <__unprivileged_flash_start__+0x43a>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8009292:	4b88      	ldr	r3, [pc, #544]	; (80094b4 <__unprivileged_flash_start__+0x5b4>)
 8009294:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009298:	4a86      	ldr	r2, [pc, #536]	; (80094b4 <__unprivileged_flash_start__+0x5b4>)
 800929a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800929e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80092a2:	e00a      	b.n	80092ba <__unprivileged_flash_start__+0x3ba>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80092a4:	f7ff f880 	bl	80083a8 <HAL_GetTick>
 80092a8:	4602      	mov	r2, r0
 80092aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092ac:	1ad3      	subs	r3, r2, r3
 80092ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80092b2:	4293      	cmp	r3, r2
 80092b4:	d901      	bls.n	80092ba <__unprivileged_flash_start__+0x3ba>
          {
            return HAL_TIMEOUT;
 80092b6:	2303      	movs	r3, #3
 80092b8:	e2b7      	b.n	800982a <__unprivileged_flash_start__+0x92a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80092ba:	4b7e      	ldr	r3, [pc, #504]	; (80094b4 <__unprivileged_flash_start__+0x5b4>)
 80092bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80092c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d1ed      	bne.n	80092a4 <__unprivileged_flash_start__+0x3a4>
 80092c8:	e037      	b.n	800933a <__unprivileged_flash_start__+0x43a>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 80092ca:	f7ff f86d 	bl	80083a8 <HAL_GetTick>
 80092ce:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80092d0:	e00a      	b.n	80092e8 <__unprivileged_flash_start__+0x3e8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80092d2:	f7ff f869 	bl	80083a8 <HAL_GetTick>
 80092d6:	4602      	mov	r2, r0
 80092d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092da:	1ad3      	subs	r3, r2, r3
 80092dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80092e0:	4293      	cmp	r3, r2
 80092e2:	d901      	bls.n	80092e8 <__unprivileged_flash_start__+0x3e8>
        {
          return HAL_TIMEOUT;
 80092e4:	2303      	movs	r3, #3
 80092e6:	e2a0      	b.n	800982a <__unprivileged_flash_start__+0x92a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80092e8:	4b72      	ldr	r3, [pc, #456]	; (80094b4 <__unprivileged_flash_start__+0x5b4>)
 80092ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80092ee:	f003 0302 	and.w	r3, r3, #2
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d1ed      	bne.n	80092d2 <__unprivileged_flash_start__+0x3d2>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 80092f6:	4b6f      	ldr	r3, [pc, #444]	; (80094b4 <__unprivileged_flash_start__+0x5b4>)
 80092f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80092fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009300:	2b00      	cmp	r3, #0
 8009302:	d01a      	beq.n	800933a <__unprivileged_flash_start__+0x43a>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8009304:	4b6b      	ldr	r3, [pc, #428]	; (80094b4 <__unprivileged_flash_start__+0x5b4>)
 8009306:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800930a:	4a6a      	ldr	r2, [pc, #424]	; (80094b4 <__unprivileged_flash_start__+0x5b4>)
 800930c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009310:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8009314:	e00a      	b.n	800932c <__unprivileged_flash_start__+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009316:	f7ff f847 	bl	80083a8 <HAL_GetTick>
 800931a:	4602      	mov	r2, r0
 800931c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800931e:	1ad3      	subs	r3, r2, r3
 8009320:	f241 3288 	movw	r2, #5000	; 0x1388
 8009324:	4293      	cmp	r3, r2
 8009326:	d901      	bls.n	800932c <__unprivileged_flash_start__+0x42c>
          {
            return HAL_TIMEOUT;
 8009328:	2303      	movs	r3, #3
 800932a:	e27e      	b.n	800982a <__unprivileged_flash_start__+0x92a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800932c:	4b61      	ldr	r3, [pc, #388]	; (80094b4 <__unprivileged_flash_start__+0x5b4>)
 800932e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009332:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009336:	2b00      	cmp	r3, #0
 8009338:	d1ed      	bne.n	8009316 <__unprivileged_flash_start__+0x416>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800933a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800933e:	2b01      	cmp	r3, #1
 8009340:	d107      	bne.n	8009352 <__unprivileged_flash_start__+0x452>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009342:	4b5c      	ldr	r3, [pc, #368]	; (80094b4 <__unprivileged_flash_start__+0x5b4>)
 8009344:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009348:	4a5a      	ldr	r2, [pc, #360]	; (80094b4 <__unprivileged_flash_start__+0x5b4>)
 800934a:	f023 0304 	bic.w	r3, r3, #4
 800934e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	f003 0320 	and.w	r3, r3, #32
 800935a:	2b00      	cmp	r3, #0
 800935c:	d036      	beq.n	80093cc <__unprivileged_flash_start__+0x4cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009362:	2b00      	cmp	r3, #0
 8009364:	d019      	beq.n	800939a <__unprivileged_flash_start__+0x49a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8009366:	4b53      	ldr	r3, [pc, #332]	; (80094b4 <__unprivileged_flash_start__+0x5b4>)
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	4a52      	ldr	r2, [pc, #328]	; (80094b4 <__unprivileged_flash_start__+0x5b4>)
 800936c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009370:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8009372:	f7ff f819 	bl	80083a8 <HAL_GetTick>
 8009376:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8009378:	e008      	b.n	800938c <__unprivileged_flash_start__+0x48c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800937a:	f7ff f815 	bl	80083a8 <HAL_GetTick>
 800937e:	4602      	mov	r2, r0
 8009380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009382:	1ad3      	subs	r3, r2, r3
 8009384:	2b02      	cmp	r3, #2
 8009386:	d901      	bls.n	800938c <__unprivileged_flash_start__+0x48c>
        {
          return HAL_TIMEOUT;
 8009388:	2303      	movs	r3, #3
 800938a:	e24e      	b.n	800982a <__unprivileged_flash_start__+0x92a>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800938c:	4b49      	ldr	r3, [pc, #292]	; (80094b4 <__unprivileged_flash_start__+0x5b4>)
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009394:	2b00      	cmp	r3, #0
 8009396:	d0f0      	beq.n	800937a <__unprivileged_flash_start__+0x47a>
 8009398:	e018      	b.n	80093cc <__unprivileged_flash_start__+0x4cc>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 800939a:	4b46      	ldr	r3, [pc, #280]	; (80094b4 <__unprivileged_flash_start__+0x5b4>)
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	4a45      	ldr	r2, [pc, #276]	; (80094b4 <__unprivileged_flash_start__+0x5b4>)
 80093a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80093a4:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80093a6:	f7fe ffff 	bl	80083a8 <HAL_GetTick>
 80093aa:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80093ac:	e008      	b.n	80093c0 <__unprivileged_flash_start__+0x4c0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80093ae:	f7fe fffb 	bl	80083a8 <HAL_GetTick>
 80093b2:	4602      	mov	r2, r0
 80093b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093b6:	1ad3      	subs	r3, r2, r3
 80093b8:	2b02      	cmp	r3, #2
 80093ba:	d901      	bls.n	80093c0 <__unprivileged_flash_start__+0x4c0>
        {
          return HAL_TIMEOUT;
 80093bc:	2303      	movs	r3, #3
 80093be:	e234      	b.n	800982a <__unprivileged_flash_start__+0x92a>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80093c0:	4b3c      	ldr	r3, [pc, #240]	; (80094b4 <__unprivileged_flash_start__+0x5b4>)
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d1f0      	bne.n	80093ae <__unprivileged_flash_start__+0x4ae>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d036      	beq.n	8009446 <__unprivileged_flash_start__+0x546>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d019      	beq.n	8009414 <__unprivileged_flash_start__+0x514>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 80093e0:	4b34      	ldr	r3, [pc, #208]	; (80094b4 <__unprivileged_flash_start__+0x5b4>)
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	4a33      	ldr	r2, [pc, #204]	; (80094b4 <__unprivileged_flash_start__+0x5b4>)
 80093e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80093ea:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80093ec:	f7fe ffdc 	bl	80083a8 <HAL_GetTick>
 80093f0:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80093f2:	e008      	b.n	8009406 <__unprivileged_flash_start__+0x506>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80093f4:	f7fe ffd8 	bl	80083a8 <HAL_GetTick>
 80093f8:	4602      	mov	r2, r0
 80093fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093fc:	1ad3      	subs	r3, r2, r3
 80093fe:	2b02      	cmp	r3, #2
 8009400:	d901      	bls.n	8009406 <__unprivileged_flash_start__+0x506>
        {
          return HAL_TIMEOUT;
 8009402:	2303      	movs	r3, #3
 8009404:	e211      	b.n	800982a <__unprivileged_flash_start__+0x92a>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8009406:	4b2b      	ldr	r3, [pc, #172]	; (80094b4 <__unprivileged_flash_start__+0x5b4>)
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800940e:	2b00      	cmp	r3, #0
 8009410:	d0f0      	beq.n	80093f4 <__unprivileged_flash_start__+0x4f4>
 8009412:	e018      	b.n	8009446 <__unprivileged_flash_start__+0x546>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8009414:	4b27      	ldr	r3, [pc, #156]	; (80094b4 <__unprivileged_flash_start__+0x5b4>)
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	4a26      	ldr	r2, [pc, #152]	; (80094b4 <__unprivileged_flash_start__+0x5b4>)
 800941a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800941e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8009420:	f7fe ffc2 	bl	80083a8 <HAL_GetTick>
 8009424:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8009426:	e008      	b.n	800943a <__unprivileged_flash_start__+0x53a>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8009428:	f7fe ffbe 	bl	80083a8 <HAL_GetTick>
 800942c:	4602      	mov	r2, r0
 800942e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009430:	1ad3      	subs	r3, r2, r3
 8009432:	2b02      	cmp	r3, #2
 8009434:	d901      	bls.n	800943a <__unprivileged_flash_start__+0x53a>
        {
          return HAL_TIMEOUT;
 8009436:	2303      	movs	r3, #3
 8009438:	e1f7      	b.n	800982a <__unprivileged_flash_start__+0x92a>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800943a:	4b1e      	ldr	r3, [pc, #120]	; (80094b4 <__unprivileged_flash_start__+0x5b4>)
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009442:	2b00      	cmp	r3, #0
 8009444:	d1f0      	bne.n	8009428 <__unprivileged_flash_start__+0x528>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800944e:	2b00      	cmp	r3, #0
 8009450:	d07f      	beq.n	8009552 <__unprivileged_flash_start__+0x652>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009456:	2b00      	cmp	r3, #0
 8009458:	d062      	beq.n	8009520 <__unprivileged_flash_start__+0x620>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 800945a:	4b16      	ldr	r3, [pc, #88]	; (80094b4 <__unprivileged_flash_start__+0x5b4>)
 800945c:	689b      	ldr	r3, [r3, #8]
 800945e:	4a15      	ldr	r2, [pc, #84]	; (80094b4 <__unprivileged_flash_start__+0x5b4>)
 8009460:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009464:	6093      	str	r3, [r2, #8]
 8009466:	4b13      	ldr	r3, [pc, #76]	; (80094b4 <__unprivileged_flash_start__+0x5b4>)
 8009468:	689b      	ldr	r3, [r3, #8]
 800946a:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009472:	4910      	ldr	r1, [pc, #64]	; (80094b4 <__unprivileged_flash_start__+0x5b4>)
 8009474:	4313      	orrs	r3, r2
 8009476:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800947c:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8009480:	d309      	bcc.n	8009496 <__unprivileged_flash_start__+0x596>
 8009482:	4b0c      	ldr	r3, [pc, #48]	; (80094b4 <__unprivileged_flash_start__+0x5b4>)
 8009484:	68db      	ldr	r3, [r3, #12]
 8009486:	f023 021f 	bic.w	r2, r3, #31
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	6a1b      	ldr	r3, [r3, #32]
 800948e:	4909      	ldr	r1, [pc, #36]	; (80094b4 <__unprivileged_flash_start__+0x5b4>)
 8009490:	4313      	orrs	r3, r2
 8009492:	60cb      	str	r3, [r1, #12]
 8009494:	e02a      	b.n	80094ec <__unprivileged_flash_start__+0x5ec>
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800949a:	2b00      	cmp	r3, #0
 800949c:	da0c      	bge.n	80094b8 <__unprivileged_flash_start__+0x5b8>
 800949e:	4b05      	ldr	r3, [pc, #20]	; (80094b4 <__unprivileged_flash_start__+0x5b4>)
 80094a0:	68db      	ldr	r3, [r3, #12]
 80094a2:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	6a1b      	ldr	r3, [r3, #32]
 80094aa:	015b      	lsls	r3, r3, #5
 80094ac:	4901      	ldr	r1, [pc, #4]	; (80094b4 <__unprivileged_flash_start__+0x5b4>)
 80094ae:	4313      	orrs	r3, r2
 80094b0:	60cb      	str	r3, [r1, #12]
 80094b2:	e01b      	b.n	80094ec <__unprivileged_flash_start__+0x5ec>
 80094b4:	46020c00 	.word	0x46020c00
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094c0:	d30a      	bcc.n	80094d8 <__unprivileged_flash_start__+0x5d8>
 80094c2:	4ba1      	ldr	r3, [pc, #644]	; (8009748 <__unprivileged_flash_start__+0x848>)
 80094c4:	68db      	ldr	r3, [r3, #12]
 80094c6:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	6a1b      	ldr	r3, [r3, #32]
 80094ce:	029b      	lsls	r3, r3, #10
 80094d0:	499d      	ldr	r1, [pc, #628]	; (8009748 <__unprivileged_flash_start__+0x848>)
 80094d2:	4313      	orrs	r3, r2
 80094d4:	60cb      	str	r3, [r1, #12]
 80094d6:	e009      	b.n	80094ec <__unprivileged_flash_start__+0x5ec>
 80094d8:	4b9b      	ldr	r3, [pc, #620]	; (8009748 <__unprivileged_flash_start__+0x848>)
 80094da:	68db      	ldr	r3, [r3, #12]
 80094dc:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	6a1b      	ldr	r3, [r3, #32]
 80094e4:	03db      	lsls	r3, r3, #15
 80094e6:	4998      	ldr	r1, [pc, #608]	; (8009748 <__unprivileged_flash_start__+0x848>)
 80094e8:	4313      	orrs	r3, r2
 80094ea:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 80094ec:	4b96      	ldr	r3, [pc, #600]	; (8009748 <__unprivileged_flash_start__+0x848>)
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	4a95      	ldr	r2, [pc, #596]	; (8009748 <__unprivileged_flash_start__+0x848>)
 80094f2:	f043 0310 	orr.w	r3, r3, #16
 80094f6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80094f8:	f7fe ff56 	bl	80083a8 <HAL_GetTick>
 80094fc:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80094fe:	e008      	b.n	8009512 <__unprivileged_flash_start__+0x612>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8009500:	f7fe ff52 	bl	80083a8 <HAL_GetTick>
 8009504:	4602      	mov	r2, r0
 8009506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009508:	1ad3      	subs	r3, r2, r3
 800950a:	2b02      	cmp	r3, #2
 800950c:	d901      	bls.n	8009512 <__unprivileged_flash_start__+0x612>
        {
          return HAL_TIMEOUT;
 800950e:	2303      	movs	r3, #3
 8009510:	e18b      	b.n	800982a <__unprivileged_flash_start__+0x92a>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8009512:	4b8d      	ldr	r3, [pc, #564]	; (8009748 <__unprivileged_flash_start__+0x848>)
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	f003 0320 	and.w	r3, r3, #32
 800951a:	2b00      	cmp	r3, #0
 800951c:	d0f0      	beq.n	8009500 <__unprivileged_flash_start__+0x600>
 800951e:	e018      	b.n	8009552 <__unprivileged_flash_start__+0x652>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8009520:	4b89      	ldr	r3, [pc, #548]	; (8009748 <__unprivileged_flash_start__+0x848>)
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	4a88      	ldr	r2, [pc, #544]	; (8009748 <__unprivileged_flash_start__+0x848>)
 8009526:	f023 0310 	bic.w	r3, r3, #16
 800952a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800952c:	f7fe ff3c 	bl	80083a8 <HAL_GetTick>
 8009530:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8009532:	e008      	b.n	8009546 <__unprivileged_flash_start__+0x646>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8009534:	f7fe ff38 	bl	80083a8 <HAL_GetTick>
 8009538:	4602      	mov	r2, r0
 800953a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800953c:	1ad3      	subs	r3, r2, r3
 800953e:	2b02      	cmp	r3, #2
 8009540:	d901      	bls.n	8009546 <__unprivileged_flash_start__+0x646>
        {
          return HAL_TIMEOUT;
 8009542:	2303      	movs	r3, #3
 8009544:	e171      	b.n	800982a <__unprivileged_flash_start__+0x92a>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8009546:	4b80      	ldr	r3, [pc, #512]	; (8009748 <__unprivileged_flash_start__+0x848>)
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	f003 0320 	and.w	r3, r3, #32
 800954e:	2b00      	cmp	r3, #0
 8009550:	d1f0      	bne.n	8009534 <__unprivileged_flash_start__+0x634>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009556:	2b00      	cmp	r3, #0
 8009558:	f000 8166 	beq.w	8009828 <__unprivileged_flash_start__+0x928>
  {
    FlagStatus  pwrclkchanged = RESET;
 800955c:	2300      	movs	r3, #0
 800955e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009562:	4b79      	ldr	r3, [pc, #484]	; (8009748 <__unprivileged_flash_start__+0x848>)
 8009564:	69db      	ldr	r3, [r3, #28]
 8009566:	f003 030c 	and.w	r3, r3, #12
 800956a:	2b0c      	cmp	r3, #12
 800956c:	f000 80f2 	beq.w	8009754 <__unprivileged_flash_start__+0x854>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009574:	2b02      	cmp	r3, #2
 8009576:	f040 80c5 	bne.w	8009704 <__unprivileged_flash_start__+0x804>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800957a:	4b73      	ldr	r3, [pc, #460]	; (8009748 <__unprivileged_flash_start__+0x848>)
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	4a72      	ldr	r2, [pc, #456]	; (8009748 <__unprivileged_flash_start__+0x848>)
 8009580:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009584:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8009586:	f7fe ff0f 	bl	80083a8 <HAL_GetTick>
 800958a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800958c:	e008      	b.n	80095a0 <__unprivileged_flash_start__+0x6a0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800958e:	f7fe ff0b 	bl	80083a8 <HAL_GetTick>
 8009592:	4602      	mov	r2, r0
 8009594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009596:	1ad3      	subs	r3, r2, r3
 8009598:	2b02      	cmp	r3, #2
 800959a:	d901      	bls.n	80095a0 <__unprivileged_flash_start__+0x6a0>
          {
            return HAL_TIMEOUT;
 800959c:	2303      	movs	r3, #3
 800959e:	e144      	b.n	800982a <__unprivileged_flash_start__+0x92a>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80095a0:	4b69      	ldr	r3, [pc, #420]	; (8009748 <__unprivileged_flash_start__+0x848>)
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d1f0      	bne.n	800958e <__unprivileged_flash_start__+0x68e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80095ac:	4b66      	ldr	r3, [pc, #408]	; (8009748 <__unprivileged_flash_start__+0x848>)
 80095ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80095b2:	f003 0304 	and.w	r3, r3, #4
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d111      	bne.n	80095de <__unprivileged_flash_start__+0x6de>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 80095ba:	4b63      	ldr	r3, [pc, #396]	; (8009748 <__unprivileged_flash_start__+0x848>)
 80095bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80095c0:	4a61      	ldr	r2, [pc, #388]	; (8009748 <__unprivileged_flash_start__+0x848>)
 80095c2:	f043 0304 	orr.w	r3, r3, #4
 80095c6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80095ca:	4b5f      	ldr	r3, [pc, #380]	; (8009748 <__unprivileged_flash_start__+0x848>)
 80095cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80095d0:	f003 0304 	and.w	r3, r3, #4
 80095d4:	60fb      	str	r3, [r7, #12]
 80095d6:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 80095d8:	2301      	movs	r3, #1
 80095da:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 80095de:	4b5b      	ldr	r3, [pc, #364]	; (800974c <__unprivileged_flash_start__+0x84c>)
 80095e0:	68db      	ldr	r3, [r3, #12]
 80095e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80095e6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80095ea:	d102      	bne.n	80095f2 <__unprivileged_flash_start__+0x6f2>
        {
          pwrboosten = SET;
 80095ec:	2301      	movs	r3, #1
 80095ee:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80095f2:	4b56      	ldr	r3, [pc, #344]	; (800974c <__unprivileged_flash_start__+0x84c>)
 80095f4:	68db      	ldr	r3, [r3, #12]
 80095f6:	4a55      	ldr	r2, [pc, #340]	; (800974c <__unprivileged_flash_start__+0x84c>)
 80095f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80095fc:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 80095fe:	4b52      	ldr	r3, [pc, #328]	; (8009748 <__unprivileged_flash_start__+0x848>)
 8009600:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009602:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009606:	f023 0303 	bic.w	r3, r3, #3
 800960a:	687a      	ldr	r2, [r7, #4]
 800960c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800960e:	687a      	ldr	r2, [r7, #4]
 8009610:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8009612:	3a01      	subs	r2, #1
 8009614:	0212      	lsls	r2, r2, #8
 8009616:	4311      	orrs	r1, r2
 8009618:	687a      	ldr	r2, [r7, #4]
 800961a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800961c:	430a      	orrs	r2, r1
 800961e:	494a      	ldr	r1, [pc, #296]	; (8009748 <__unprivileged_flash_start__+0x848>)
 8009620:	4313      	orrs	r3, r2
 8009622:	628b      	str	r3, [r1, #40]	; 0x28
 8009624:	4b48      	ldr	r3, [pc, #288]	; (8009748 <__unprivileged_flash_start__+0x848>)
 8009626:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009628:	4b49      	ldr	r3, [pc, #292]	; (8009750 <__unprivileged_flash_start__+0x850>)
 800962a:	4013      	ands	r3, r2
 800962c:	687a      	ldr	r2, [r7, #4]
 800962e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009630:	3a01      	subs	r2, #1
 8009632:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8009636:	687a      	ldr	r2, [r7, #4]
 8009638:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800963a:	3a01      	subs	r2, #1
 800963c:	0252      	lsls	r2, r2, #9
 800963e:	b292      	uxth	r2, r2
 8009640:	4311      	orrs	r1, r2
 8009642:	687a      	ldr	r2, [r7, #4]
 8009644:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8009646:	3a01      	subs	r2, #1
 8009648:	0412      	lsls	r2, r2, #16
 800964a:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800964e:	4311      	orrs	r1, r2
 8009650:	687a      	ldr	r2, [r7, #4]
 8009652:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8009654:	3a01      	subs	r2, #1
 8009656:	0612      	lsls	r2, r2, #24
 8009658:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800965c:	430a      	orrs	r2, r1
 800965e:	493a      	ldr	r1, [pc, #232]	; (8009748 <__unprivileged_flash_start__+0x848>)
 8009660:	4313      	orrs	r3, r2
 8009662:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8009664:	4b38      	ldr	r3, [pc, #224]	; (8009748 <__unprivileged_flash_start__+0x848>)
 8009666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009668:	4a37      	ldr	r2, [pc, #220]	; (8009748 <__unprivileged_flash_start__+0x848>)
 800966a:	f023 0310 	bic.w	r3, r3, #16
 800966e:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009674:	4a34      	ldr	r2, [pc, #208]	; (8009748 <__unprivileged_flash_start__+0x848>)
 8009676:	00db      	lsls	r3, r3, #3
 8009678:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800967a:	4b33      	ldr	r3, [pc, #204]	; (8009748 <__unprivileged_flash_start__+0x848>)
 800967c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800967e:	4a32      	ldr	r2, [pc, #200]	; (8009748 <__unprivileged_flash_start__+0x848>)
 8009680:	f043 0310 	orr.w	r3, r3, #16
 8009684:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8009686:	4b30      	ldr	r3, [pc, #192]	; (8009748 <__unprivileged_flash_start__+0x848>)
 8009688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800968a:	f023 020c 	bic.w	r2, r3, #12
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009692:	492d      	ldr	r1, [pc, #180]	; (8009748 <__unprivileged_flash_start__+0x848>)
 8009694:	4313      	orrs	r3, r2
 8009696:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 8009698:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800969c:	2b01      	cmp	r3, #1
 800969e:	d105      	bne.n	80096ac <__unprivileged_flash_start__+0x7ac>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80096a0:	4b2a      	ldr	r3, [pc, #168]	; (800974c <__unprivileged_flash_start__+0x84c>)
 80096a2:	68db      	ldr	r3, [r3, #12]
 80096a4:	4a29      	ldr	r2, [pc, #164]	; (800974c <__unprivileged_flash_start__+0x84c>)
 80096a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80096aa:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 80096ac:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80096b0:	2b01      	cmp	r3, #1
 80096b2:	d107      	bne.n	80096c4 <__unprivileged_flash_start__+0x7c4>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 80096b4:	4b24      	ldr	r3, [pc, #144]	; (8009748 <__unprivileged_flash_start__+0x848>)
 80096b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80096ba:	4a23      	ldr	r2, [pc, #140]	; (8009748 <__unprivileged_flash_start__+0x848>)
 80096bc:	f023 0304 	bic.w	r3, r3, #4
 80096c0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80096c4:	4b20      	ldr	r3, [pc, #128]	; (8009748 <__unprivileged_flash_start__+0x848>)
 80096c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096c8:	4a1f      	ldr	r2, [pc, #124]	; (8009748 <__unprivileged_flash_start__+0x848>)
 80096ca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80096ce:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 80096d0:	4b1d      	ldr	r3, [pc, #116]	; (8009748 <__unprivileged_flash_start__+0x848>)
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	4a1c      	ldr	r2, [pc, #112]	; (8009748 <__unprivileged_flash_start__+0x848>)
 80096d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80096da:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80096dc:	f7fe fe64 	bl	80083a8 <HAL_GetTick>
 80096e0:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80096e2:	e008      	b.n	80096f6 <__unprivileged_flash_start__+0x7f6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80096e4:	f7fe fe60 	bl	80083a8 <HAL_GetTick>
 80096e8:	4602      	mov	r2, r0
 80096ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096ec:	1ad3      	subs	r3, r2, r3
 80096ee:	2b02      	cmp	r3, #2
 80096f0:	d901      	bls.n	80096f6 <__unprivileged_flash_start__+0x7f6>
          {
            return HAL_TIMEOUT;
 80096f2:	2303      	movs	r3, #3
 80096f4:	e099      	b.n	800982a <__unprivileged_flash_start__+0x92a>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80096f6:	4b14      	ldr	r3, [pc, #80]	; (8009748 <__unprivileged_flash_start__+0x848>)
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d0f0      	beq.n	80096e4 <__unprivileged_flash_start__+0x7e4>
 8009702:	e091      	b.n	8009828 <__unprivileged_flash_start__+0x928>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8009704:	4b10      	ldr	r3, [pc, #64]	; (8009748 <__unprivileged_flash_start__+0x848>)
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	4a0f      	ldr	r2, [pc, #60]	; (8009748 <__unprivileged_flash_start__+0x848>)
 800970a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800970e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8009710:	f7fe fe4a 	bl	80083a8 <HAL_GetTick>
 8009714:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8009716:	e008      	b.n	800972a <__unprivileged_flash_start__+0x82a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009718:	f7fe fe46 	bl	80083a8 <HAL_GetTick>
 800971c:	4602      	mov	r2, r0
 800971e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009720:	1ad3      	subs	r3, r2, r3
 8009722:	2b02      	cmp	r3, #2
 8009724:	d901      	bls.n	800972a <__unprivileged_flash_start__+0x82a>
          {
            return HAL_TIMEOUT;
 8009726:	2303      	movs	r3, #3
 8009728:	e07f      	b.n	800982a <__unprivileged_flash_start__+0x92a>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800972a:	4b07      	ldr	r3, [pc, #28]	; (8009748 <__unprivileged_flash_start__+0x848>)
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009732:	2b00      	cmp	r3, #0
 8009734:	d1f0      	bne.n	8009718 <__unprivileged_flash_start__+0x818>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8009736:	4b04      	ldr	r3, [pc, #16]	; (8009748 <__unprivileged_flash_start__+0x848>)
 8009738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800973a:	4a03      	ldr	r2, [pc, #12]	; (8009748 <__unprivileged_flash_start__+0x848>)
 800973c:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8009740:	f023 0303 	bic.w	r3, r3, #3
 8009744:	6293      	str	r3, [r2, #40]	; 0x28
 8009746:	e06f      	b.n	8009828 <__unprivileged_flash_start__+0x928>
 8009748:	46020c00 	.word	0x46020c00
 800974c:	46020800 	.word	0x46020800
 8009750:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8009754:	4b37      	ldr	r3, [pc, #220]	; (8009834 <__unprivileged_flash_start__+0x934>)
 8009756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009758:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800975a:	4b36      	ldr	r3, [pc, #216]	; (8009834 <__unprivileged_flash_start__+0x934>)
 800975c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800975e:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009764:	2b01      	cmp	r3, #1
 8009766:	d039      	beq.n	80097dc <__unprivileged_flash_start__+0x8dc>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8009768:	69fb      	ldr	r3, [r7, #28]
 800976a:	f003 0203 	and.w	r2, r3, #3
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009772:	429a      	cmp	r2, r3
 8009774:	d132      	bne.n	80097dc <__unprivileged_flash_start__+0x8dc>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8009776:	69fb      	ldr	r3, [r7, #28]
 8009778:	0a1b      	lsrs	r3, r3, #8
 800977a:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009782:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8009784:	429a      	cmp	r2, r3
 8009786:	d129      	bne.n	80097dc <__unprivileged_flash_start__+0x8dc>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8009788:	69fb      	ldr	r3, [r7, #28]
 800978a:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8009792:	429a      	cmp	r2, r3
 8009794:	d122      	bne.n	80097dc <__unprivileged_flash_start__+0x8dc>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009796:	69bb      	ldr	r3, [r7, #24]
 8009798:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80097a0:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80097a2:	429a      	cmp	r2, r3
 80097a4:	d11a      	bne.n	80097dc <__unprivileged_flash_start__+0x8dc>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80097a6:	69bb      	ldr	r3, [r7, #24]
 80097a8:	0a5b      	lsrs	r3, r3, #9
 80097aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097b2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80097b4:	429a      	cmp	r2, r3
 80097b6:	d111      	bne.n	80097dc <__unprivileged_flash_start__+0x8dc>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80097b8:	69bb      	ldr	r3, [r7, #24]
 80097ba:	0c1b      	lsrs	r3, r3, #16
 80097bc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097c4:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80097c6:	429a      	cmp	r2, r3
 80097c8:	d108      	bne.n	80097dc <__unprivileged_flash_start__+0x8dc>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 80097ca:	69bb      	ldr	r3, [r7, #24]
 80097cc:	0e1b      	lsrs	r3, r3, #24
 80097ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097d6:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80097d8:	429a      	cmp	r2, r3
 80097da:	d001      	beq.n	80097e0 <__unprivileged_flash_start__+0x8e0>
      {
        return HAL_ERROR;
 80097dc:	2301      	movs	r3, #1
 80097de:	e024      	b.n	800982a <__unprivileged_flash_start__+0x92a>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80097e0:	4b14      	ldr	r3, [pc, #80]	; (8009834 <__unprivileged_flash_start__+0x934>)
 80097e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097e4:	08db      	lsrs	r3, r3, #3
 80097e6:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80097ee:	429a      	cmp	r2, r3
 80097f0:	d01a      	beq.n	8009828 <__unprivileged_flash_start__+0x928>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 80097f2:	4b10      	ldr	r3, [pc, #64]	; (8009834 <__unprivileged_flash_start__+0x934>)
 80097f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097f6:	4a0f      	ldr	r2, [pc, #60]	; (8009834 <__unprivileged_flash_start__+0x934>)
 80097f8:	f023 0310 	bic.w	r3, r3, #16
 80097fc:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80097fe:	f7fe fdd3 	bl	80083a8 <HAL_GetTick>
 8009802:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8009804:	bf00      	nop
 8009806:	f7fe fdcf 	bl	80083a8 <HAL_GetTick>
 800980a:	4602      	mov	r2, r0
 800980c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800980e:	4293      	cmp	r3, r2
 8009810:	d0f9      	beq.n	8009806 <__unprivileged_flash_start__+0x906>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009816:	4a07      	ldr	r2, [pc, #28]	; (8009834 <__unprivileged_flash_start__+0x934>)
 8009818:	00db      	lsls	r3, r3, #3
 800981a:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800981c:	4b05      	ldr	r3, [pc, #20]	; (8009834 <__unprivileged_flash_start__+0x934>)
 800981e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009820:	4a04      	ldr	r2, [pc, #16]	; (8009834 <__unprivileged_flash_start__+0x934>)
 8009822:	f043 0310 	orr.w	r3, r3, #16
 8009826:	6293      	str	r3, [r2, #40]	; 0x28
      }
    }
  }
  return HAL_OK;
 8009828:	2300      	movs	r3, #0
}
 800982a:	4618      	mov	r0, r3
 800982c:	3738      	adds	r7, #56	; 0x38
 800982e:	46bd      	mov	sp, r7
 8009830:	bd80      	pop	{r7, pc}
 8009832:	bf00      	nop
 8009834:	46020c00 	.word	0x46020c00

08009838 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8009838:	b580      	push	{r7, lr}
 800983a:	b086      	sub	sp, #24
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
 8009840:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d101      	bne.n	800984c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009848:	2301      	movs	r3, #1
 800984a:	e1d9      	b.n	8009c00 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800984c:	4b9b      	ldr	r3, [pc, #620]	; (8009abc <HAL_RCC_ClockConfig+0x284>)
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	f003 030f 	and.w	r3, r3, #15
 8009854:	683a      	ldr	r2, [r7, #0]
 8009856:	429a      	cmp	r2, r3
 8009858:	d910      	bls.n	800987c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800985a:	4b98      	ldr	r3, [pc, #608]	; (8009abc <HAL_RCC_ClockConfig+0x284>)
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	f023 020f 	bic.w	r2, r3, #15
 8009862:	4996      	ldr	r1, [pc, #600]	; (8009abc <HAL_RCC_ClockConfig+0x284>)
 8009864:	683b      	ldr	r3, [r7, #0]
 8009866:	4313      	orrs	r3, r2
 8009868:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800986a:	4b94      	ldr	r3, [pc, #592]	; (8009abc <HAL_RCC_ClockConfig+0x284>)
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	f003 030f 	and.w	r3, r3, #15
 8009872:	683a      	ldr	r2, [r7, #0]
 8009874:	429a      	cmp	r2, r3
 8009876:	d001      	beq.n	800987c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009878:	2301      	movs	r3, #1
 800987a:	e1c1      	b.n	8009c00 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	f003 0310 	and.w	r3, r3, #16
 8009884:	2b00      	cmp	r3, #0
 8009886:	d010      	beq.n	80098aa <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	695a      	ldr	r2, [r3, #20]
 800988c:	4b8c      	ldr	r3, [pc, #560]	; (8009ac0 <HAL_RCC_ClockConfig+0x288>)
 800988e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009890:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009894:	429a      	cmp	r2, r3
 8009896:	d908      	bls.n	80098aa <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8009898:	4b89      	ldr	r3, [pc, #548]	; (8009ac0 <HAL_RCC_ClockConfig+0x288>)
 800989a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800989c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	695b      	ldr	r3, [r3, #20]
 80098a4:	4986      	ldr	r1, [pc, #536]	; (8009ac0 <HAL_RCC_ClockConfig+0x288>)
 80098a6:	4313      	orrs	r3, r2
 80098a8:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	f003 0308 	and.w	r3, r3, #8
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d012      	beq.n	80098dc <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	691a      	ldr	r2, [r3, #16]
 80098ba:	4b81      	ldr	r3, [pc, #516]	; (8009ac0 <HAL_RCC_ClockConfig+0x288>)
 80098bc:	6a1b      	ldr	r3, [r3, #32]
 80098be:	091b      	lsrs	r3, r3, #4
 80098c0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80098c4:	429a      	cmp	r2, r3
 80098c6:	d909      	bls.n	80098dc <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80098c8:	4b7d      	ldr	r3, [pc, #500]	; (8009ac0 <HAL_RCC_ClockConfig+0x288>)
 80098ca:	6a1b      	ldr	r3, [r3, #32]
 80098cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	691b      	ldr	r3, [r3, #16]
 80098d4:	011b      	lsls	r3, r3, #4
 80098d6:	497a      	ldr	r1, [pc, #488]	; (8009ac0 <HAL_RCC_ClockConfig+0x288>)
 80098d8:	4313      	orrs	r3, r2
 80098da:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	f003 0304 	and.w	r3, r3, #4
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d010      	beq.n	800990a <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	68da      	ldr	r2, [r3, #12]
 80098ec:	4b74      	ldr	r3, [pc, #464]	; (8009ac0 <HAL_RCC_ClockConfig+0x288>)
 80098ee:	6a1b      	ldr	r3, [r3, #32]
 80098f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80098f4:	429a      	cmp	r2, r3
 80098f6:	d908      	bls.n	800990a <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80098f8:	4b71      	ldr	r3, [pc, #452]	; (8009ac0 <HAL_RCC_ClockConfig+0x288>)
 80098fa:	6a1b      	ldr	r3, [r3, #32]
 80098fc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	68db      	ldr	r3, [r3, #12]
 8009904:	496e      	ldr	r1, [pc, #440]	; (8009ac0 <HAL_RCC_ClockConfig+0x288>)
 8009906:	4313      	orrs	r3, r2
 8009908:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	f003 0302 	and.w	r3, r3, #2
 8009912:	2b00      	cmp	r3, #0
 8009914:	d010      	beq.n	8009938 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	689a      	ldr	r2, [r3, #8]
 800991a:	4b69      	ldr	r3, [pc, #420]	; (8009ac0 <HAL_RCC_ClockConfig+0x288>)
 800991c:	6a1b      	ldr	r3, [r3, #32]
 800991e:	f003 030f 	and.w	r3, r3, #15
 8009922:	429a      	cmp	r2, r3
 8009924:	d908      	bls.n	8009938 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8009926:	4b66      	ldr	r3, [pc, #408]	; (8009ac0 <HAL_RCC_ClockConfig+0x288>)
 8009928:	6a1b      	ldr	r3, [r3, #32]
 800992a:	f023 020f 	bic.w	r2, r3, #15
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	689b      	ldr	r3, [r3, #8]
 8009932:	4963      	ldr	r1, [pc, #396]	; (8009ac0 <HAL_RCC_ClockConfig+0x288>)
 8009934:	4313      	orrs	r3, r2
 8009936:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	f003 0301 	and.w	r3, r3, #1
 8009940:	2b00      	cmp	r3, #0
 8009942:	f000 80d2 	beq.w	8009aea <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8009946:	2300      	movs	r3, #0
 8009948:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	685b      	ldr	r3, [r3, #4]
 800994e:	2b03      	cmp	r3, #3
 8009950:	d143      	bne.n	80099da <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009952:	4b5b      	ldr	r3, [pc, #364]	; (8009ac0 <HAL_RCC_ClockConfig+0x288>)
 8009954:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009958:	f003 0304 	and.w	r3, r3, #4
 800995c:	2b00      	cmp	r3, #0
 800995e:	d110      	bne.n	8009982 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8009960:	4b57      	ldr	r3, [pc, #348]	; (8009ac0 <HAL_RCC_ClockConfig+0x288>)
 8009962:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009966:	4a56      	ldr	r2, [pc, #344]	; (8009ac0 <HAL_RCC_ClockConfig+0x288>)
 8009968:	f043 0304 	orr.w	r3, r3, #4
 800996c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8009970:	4b53      	ldr	r3, [pc, #332]	; (8009ac0 <HAL_RCC_ClockConfig+0x288>)
 8009972:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009976:	f003 0304 	and.w	r3, r3, #4
 800997a:	60bb      	str	r3, [r7, #8]
 800997c:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 800997e:	2301      	movs	r3, #1
 8009980:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8009982:	f7fe fd11 	bl	80083a8 <HAL_GetTick>
 8009986:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8009988:	4b4e      	ldr	r3, [pc, #312]	; (8009ac4 <HAL_RCC_ClockConfig+0x28c>)
 800998a:	68db      	ldr	r3, [r3, #12]
 800998c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009990:	2b00      	cmp	r3, #0
 8009992:	d00f      	beq.n	80099b4 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8009994:	e008      	b.n	80099a8 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8009996:	f7fe fd07 	bl	80083a8 <HAL_GetTick>
 800999a:	4602      	mov	r2, r0
 800999c:	693b      	ldr	r3, [r7, #16]
 800999e:	1ad3      	subs	r3, r2, r3
 80099a0:	2b02      	cmp	r3, #2
 80099a2:	d901      	bls.n	80099a8 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 80099a4:	2303      	movs	r3, #3
 80099a6:	e12b      	b.n	8009c00 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 80099a8:	4b46      	ldr	r3, [pc, #280]	; (8009ac4 <HAL_RCC_ClockConfig+0x28c>)
 80099aa:	68db      	ldr	r3, [r3, #12]
 80099ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d0f0      	beq.n	8009996 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80099b4:	7dfb      	ldrb	r3, [r7, #23]
 80099b6:	2b01      	cmp	r3, #1
 80099b8:	d107      	bne.n	80099ca <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80099ba:	4b41      	ldr	r3, [pc, #260]	; (8009ac0 <HAL_RCC_ClockConfig+0x288>)
 80099bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80099c0:	4a3f      	ldr	r2, [pc, #252]	; (8009ac0 <HAL_RCC_ClockConfig+0x288>)
 80099c2:	f023 0304 	bic.w	r3, r3, #4
 80099c6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80099ca:	4b3d      	ldr	r3, [pc, #244]	; (8009ac0 <HAL_RCC_ClockConfig+0x288>)
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d121      	bne.n	8009a1a <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 80099d6:	2301      	movs	r3, #1
 80099d8:	e112      	b.n	8009c00 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	685b      	ldr	r3, [r3, #4]
 80099de:	2b02      	cmp	r3, #2
 80099e0:	d107      	bne.n	80099f2 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80099e2:	4b37      	ldr	r3, [pc, #220]	; (8009ac0 <HAL_RCC_ClockConfig+0x288>)
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d115      	bne.n	8009a1a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80099ee:	2301      	movs	r3, #1
 80099f0:	e106      	b.n	8009c00 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	685b      	ldr	r3, [r3, #4]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d107      	bne.n	8009a0a <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80099fa:	4b31      	ldr	r3, [pc, #196]	; (8009ac0 <HAL_RCC_ClockConfig+0x288>)
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	f003 0304 	and.w	r3, r3, #4
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d109      	bne.n	8009a1a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8009a06:	2301      	movs	r3, #1
 8009a08:	e0fa      	b.n	8009c00 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009a0a:	4b2d      	ldr	r3, [pc, #180]	; (8009ac0 <HAL_RCC_ClockConfig+0x288>)
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d101      	bne.n	8009a1a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8009a16:	2301      	movs	r3, #1
 8009a18:	e0f2      	b.n	8009c00 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8009a1a:	4b29      	ldr	r3, [pc, #164]	; (8009ac0 <HAL_RCC_ClockConfig+0x288>)
 8009a1c:	69db      	ldr	r3, [r3, #28]
 8009a1e:	f023 0203 	bic.w	r2, r3, #3
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	685b      	ldr	r3, [r3, #4]
 8009a26:	4926      	ldr	r1, [pc, #152]	; (8009ac0 <HAL_RCC_ClockConfig+0x288>)
 8009a28:	4313      	orrs	r3, r2
 8009a2a:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8009a2c:	f7fe fcbc 	bl	80083a8 <HAL_GetTick>
 8009a30:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	685b      	ldr	r3, [r3, #4]
 8009a36:	2b03      	cmp	r3, #3
 8009a38:	d112      	bne.n	8009a60 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009a3a:	e00a      	b.n	8009a52 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009a3c:	f7fe fcb4 	bl	80083a8 <HAL_GetTick>
 8009a40:	4602      	mov	r2, r0
 8009a42:	693b      	ldr	r3, [r7, #16]
 8009a44:	1ad3      	subs	r3, r2, r3
 8009a46:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a4a:	4293      	cmp	r3, r2
 8009a4c:	d901      	bls.n	8009a52 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8009a4e:	2303      	movs	r3, #3
 8009a50:	e0d6      	b.n	8009c00 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009a52:	4b1b      	ldr	r3, [pc, #108]	; (8009ac0 <HAL_RCC_ClockConfig+0x288>)
 8009a54:	69db      	ldr	r3, [r3, #28]
 8009a56:	f003 030c 	and.w	r3, r3, #12
 8009a5a:	2b0c      	cmp	r3, #12
 8009a5c:	d1ee      	bne.n	8009a3c <HAL_RCC_ClockConfig+0x204>
 8009a5e:	e044      	b.n	8009aea <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	685b      	ldr	r3, [r3, #4]
 8009a64:	2b02      	cmp	r3, #2
 8009a66:	d112      	bne.n	8009a8e <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8009a68:	e00a      	b.n	8009a80 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009a6a:	f7fe fc9d 	bl	80083a8 <HAL_GetTick>
 8009a6e:	4602      	mov	r2, r0
 8009a70:	693b      	ldr	r3, [r7, #16]
 8009a72:	1ad3      	subs	r3, r2, r3
 8009a74:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a78:	4293      	cmp	r3, r2
 8009a7a:	d901      	bls.n	8009a80 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8009a7c:	2303      	movs	r3, #3
 8009a7e:	e0bf      	b.n	8009c00 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8009a80:	4b0f      	ldr	r3, [pc, #60]	; (8009ac0 <HAL_RCC_ClockConfig+0x288>)
 8009a82:	69db      	ldr	r3, [r3, #28]
 8009a84:	f003 030c 	and.w	r3, r3, #12
 8009a88:	2b08      	cmp	r3, #8
 8009a8a:	d1ee      	bne.n	8009a6a <HAL_RCC_ClockConfig+0x232>
 8009a8c:	e02d      	b.n	8009aea <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	685b      	ldr	r3, [r3, #4]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d123      	bne.n	8009ade <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8009a96:	e00a      	b.n	8009aae <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009a98:	f7fe fc86 	bl	80083a8 <HAL_GetTick>
 8009a9c:	4602      	mov	r2, r0
 8009a9e:	693b      	ldr	r3, [r7, #16]
 8009aa0:	1ad3      	subs	r3, r2, r3
 8009aa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8009aa6:	4293      	cmp	r3, r2
 8009aa8:	d901      	bls.n	8009aae <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8009aaa:	2303      	movs	r3, #3
 8009aac:	e0a8      	b.n	8009c00 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8009aae:	4b04      	ldr	r3, [pc, #16]	; (8009ac0 <HAL_RCC_ClockConfig+0x288>)
 8009ab0:	69db      	ldr	r3, [r3, #28]
 8009ab2:	f003 030c 	and.w	r3, r3, #12
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d1ee      	bne.n	8009a98 <HAL_RCC_ClockConfig+0x260>
 8009aba:	e016      	b.n	8009aea <HAL_RCC_ClockConfig+0x2b2>
 8009abc:	40022000 	.word	0x40022000
 8009ac0:	46020c00 	.word	0x46020c00
 8009ac4:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009ac8:	f7fe fc6e 	bl	80083a8 <HAL_GetTick>
 8009acc:	4602      	mov	r2, r0
 8009ace:	693b      	ldr	r3, [r7, #16]
 8009ad0:	1ad3      	subs	r3, r2, r3
 8009ad2:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ad6:	4293      	cmp	r3, r2
 8009ad8:	d901      	bls.n	8009ade <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8009ada:	2303      	movs	r3, #3
 8009adc:	e090      	b.n	8009c00 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8009ade:	4b4a      	ldr	r3, [pc, #296]	; (8009c08 <HAL_RCC_ClockConfig+0x3d0>)
 8009ae0:	69db      	ldr	r3, [r3, #28]
 8009ae2:	f003 030c 	and.w	r3, r3, #12
 8009ae6:	2b04      	cmp	r3, #4
 8009ae8:	d1ee      	bne.n	8009ac8 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	f003 0302 	and.w	r3, r3, #2
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d010      	beq.n	8009b18 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	689a      	ldr	r2, [r3, #8]
 8009afa:	4b43      	ldr	r3, [pc, #268]	; (8009c08 <HAL_RCC_ClockConfig+0x3d0>)
 8009afc:	6a1b      	ldr	r3, [r3, #32]
 8009afe:	f003 030f 	and.w	r3, r3, #15
 8009b02:	429a      	cmp	r2, r3
 8009b04:	d208      	bcs.n	8009b18 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8009b06:	4b40      	ldr	r3, [pc, #256]	; (8009c08 <HAL_RCC_ClockConfig+0x3d0>)
 8009b08:	6a1b      	ldr	r3, [r3, #32]
 8009b0a:	f023 020f 	bic.w	r2, r3, #15
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	689b      	ldr	r3, [r3, #8]
 8009b12:	493d      	ldr	r1, [pc, #244]	; (8009c08 <HAL_RCC_ClockConfig+0x3d0>)
 8009b14:	4313      	orrs	r3, r2
 8009b16:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009b18:	4b3c      	ldr	r3, [pc, #240]	; (8009c0c <HAL_RCC_ClockConfig+0x3d4>)
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	f003 030f 	and.w	r3, r3, #15
 8009b20:	683a      	ldr	r2, [r7, #0]
 8009b22:	429a      	cmp	r2, r3
 8009b24:	d210      	bcs.n	8009b48 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009b26:	4b39      	ldr	r3, [pc, #228]	; (8009c0c <HAL_RCC_ClockConfig+0x3d4>)
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	f023 020f 	bic.w	r2, r3, #15
 8009b2e:	4937      	ldr	r1, [pc, #220]	; (8009c0c <HAL_RCC_ClockConfig+0x3d4>)
 8009b30:	683b      	ldr	r3, [r7, #0]
 8009b32:	4313      	orrs	r3, r2
 8009b34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009b36:	4b35      	ldr	r3, [pc, #212]	; (8009c0c <HAL_RCC_ClockConfig+0x3d4>)
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	f003 030f 	and.w	r3, r3, #15
 8009b3e:	683a      	ldr	r2, [r7, #0]
 8009b40:	429a      	cmp	r2, r3
 8009b42:	d001      	beq.n	8009b48 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8009b44:	2301      	movs	r3, #1
 8009b46:	e05b      	b.n	8009c00 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	f003 0304 	and.w	r3, r3, #4
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d010      	beq.n	8009b76 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	68da      	ldr	r2, [r3, #12]
 8009b58:	4b2b      	ldr	r3, [pc, #172]	; (8009c08 <HAL_RCC_ClockConfig+0x3d0>)
 8009b5a:	6a1b      	ldr	r3, [r3, #32]
 8009b5c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009b60:	429a      	cmp	r2, r3
 8009b62:	d208      	bcs.n	8009b76 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8009b64:	4b28      	ldr	r3, [pc, #160]	; (8009c08 <HAL_RCC_ClockConfig+0x3d0>)
 8009b66:	6a1b      	ldr	r3, [r3, #32]
 8009b68:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	68db      	ldr	r3, [r3, #12]
 8009b70:	4925      	ldr	r1, [pc, #148]	; (8009c08 <HAL_RCC_ClockConfig+0x3d0>)
 8009b72:	4313      	orrs	r3, r2
 8009b74:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	f003 0308 	and.w	r3, r3, #8
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d012      	beq.n	8009ba8 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	691a      	ldr	r2, [r3, #16]
 8009b86:	4b20      	ldr	r3, [pc, #128]	; (8009c08 <HAL_RCC_ClockConfig+0x3d0>)
 8009b88:	6a1b      	ldr	r3, [r3, #32]
 8009b8a:	091b      	lsrs	r3, r3, #4
 8009b8c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009b90:	429a      	cmp	r2, r3
 8009b92:	d209      	bcs.n	8009ba8 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8009b94:	4b1c      	ldr	r3, [pc, #112]	; (8009c08 <HAL_RCC_ClockConfig+0x3d0>)
 8009b96:	6a1b      	ldr	r3, [r3, #32]
 8009b98:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	691b      	ldr	r3, [r3, #16]
 8009ba0:	011b      	lsls	r3, r3, #4
 8009ba2:	4919      	ldr	r1, [pc, #100]	; (8009c08 <HAL_RCC_ClockConfig+0x3d0>)
 8009ba4:	4313      	orrs	r3, r2
 8009ba6:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	f003 0310 	and.w	r3, r3, #16
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d010      	beq.n	8009bd6 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	695a      	ldr	r2, [r3, #20]
 8009bb8:	4b13      	ldr	r3, [pc, #76]	; (8009c08 <HAL_RCC_ClockConfig+0x3d0>)
 8009bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bbc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009bc0:	429a      	cmp	r2, r3
 8009bc2:	d208      	bcs.n	8009bd6 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8009bc4:	4b10      	ldr	r3, [pc, #64]	; (8009c08 <HAL_RCC_ClockConfig+0x3d0>)
 8009bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bc8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	695b      	ldr	r3, [r3, #20]
 8009bd0:	490d      	ldr	r1, [pc, #52]	; (8009c08 <HAL_RCC_ClockConfig+0x3d0>)
 8009bd2:	4313      	orrs	r3, r2
 8009bd4:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8009bd6:	f000 f821 	bl	8009c1c <HAL_RCC_GetSysClockFreq>
 8009bda:	4602      	mov	r2, r0
 8009bdc:	4b0a      	ldr	r3, [pc, #40]	; (8009c08 <HAL_RCC_ClockConfig+0x3d0>)
 8009bde:	6a1b      	ldr	r3, [r3, #32]
 8009be0:	f003 030f 	and.w	r3, r3, #15
 8009be4:	490a      	ldr	r1, [pc, #40]	; (8009c10 <HAL_RCC_ClockConfig+0x3d8>)
 8009be6:	5ccb      	ldrb	r3, [r1, r3]
 8009be8:	fa22 f303 	lsr.w	r3, r2, r3
 8009bec:	4a09      	ldr	r2, [pc, #36]	; (8009c14 <HAL_RCC_ClockConfig+0x3dc>)
 8009bee:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8009bf0:	4b09      	ldr	r3, [pc, #36]	; (8009c18 <HAL_RCC_ClockConfig+0x3e0>)
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	f7fe fba1 	bl	800833c <HAL_InitTick>
 8009bfa:	4603      	mov	r3, r0
 8009bfc:	73fb      	strb	r3, [r7, #15]

  return status;
 8009bfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c00:	4618      	mov	r0, r3
 8009c02:	3718      	adds	r7, #24
 8009c04:	46bd      	mov	sp, r7
 8009c06:	bd80      	pop	{r7, pc}
 8009c08:	46020c00 	.word	0x46020c00
 8009c0c:	40022000 	.word	0x40022000
 8009c10:	0800a038 	.word	0x0800a038
 8009c14:	20008000 	.word	0x20008000
 8009c18:	20008004 	.word	0x20008004

08009c1c <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009c1c:	b480      	push	{r7}
 8009c1e:	b08b      	sub	sp, #44	; 0x2c
 8009c20:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8009c22:	2300      	movs	r3, #0
 8009c24:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8009c26:	2300      	movs	r3, #0
 8009c28:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009c2a:	4b78      	ldr	r3, [pc, #480]	; (8009e0c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8009c2c:	69db      	ldr	r3, [r3, #28]
 8009c2e:	f003 030c 	and.w	r3, r3, #12
 8009c32:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009c34:	4b75      	ldr	r3, [pc, #468]	; (8009e0c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8009c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c38:	f003 0303 	and.w	r3, r3, #3
 8009c3c:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8009c3e:	69bb      	ldr	r3, [r7, #24]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d005      	beq.n	8009c50 <HAL_RCC_GetSysClockFreq+0x34>
 8009c44:	69bb      	ldr	r3, [r7, #24]
 8009c46:	2b0c      	cmp	r3, #12
 8009c48:	d121      	bne.n	8009c8e <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8009c4a:	697b      	ldr	r3, [r7, #20]
 8009c4c:	2b01      	cmp	r3, #1
 8009c4e:	d11e      	bne.n	8009c8e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8009c50:	4b6e      	ldr	r3, [pc, #440]	; (8009e0c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8009c52:	689b      	ldr	r3, [r3, #8]
 8009c54:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d107      	bne.n	8009c6c <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8009c5c:	4b6b      	ldr	r3, [pc, #428]	; (8009e0c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8009c5e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009c62:	0b1b      	lsrs	r3, r3, #12
 8009c64:	f003 030f 	and.w	r3, r3, #15
 8009c68:	627b      	str	r3, [r7, #36]	; 0x24
 8009c6a:	e005      	b.n	8009c78 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8009c6c:	4b67      	ldr	r3, [pc, #412]	; (8009e0c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8009c6e:	689b      	ldr	r3, [r3, #8]
 8009c70:	0f1b      	lsrs	r3, r3, #28
 8009c72:	f003 030f 	and.w	r3, r3, #15
 8009c76:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8009c78:	4a65      	ldr	r2, [pc, #404]	; (8009e10 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8009c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009c80:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8009c82:	69bb      	ldr	r3, [r7, #24]
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d110      	bne.n	8009caa <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8009c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c8a:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8009c8c:	e00d      	b.n	8009caa <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009c8e:	4b5f      	ldr	r3, [pc, #380]	; (8009e0c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8009c90:	69db      	ldr	r3, [r3, #28]
 8009c92:	f003 030c 	and.w	r3, r3, #12
 8009c96:	2b04      	cmp	r3, #4
 8009c98:	d102      	bne.n	8009ca0 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8009c9a:	4b5e      	ldr	r3, [pc, #376]	; (8009e14 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8009c9c:	623b      	str	r3, [r7, #32]
 8009c9e:	e004      	b.n	8009caa <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8009ca0:	69bb      	ldr	r3, [r7, #24]
 8009ca2:	2b08      	cmp	r3, #8
 8009ca4:	d101      	bne.n	8009caa <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009ca6:	4b5b      	ldr	r3, [pc, #364]	; (8009e14 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8009ca8:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009caa:	69bb      	ldr	r3, [r7, #24]
 8009cac:	2b0c      	cmp	r3, #12
 8009cae:	f040 80a5 	bne.w	8009dfc <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8009cb2:	4b56      	ldr	r3, [pc, #344]	; (8009e0c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8009cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cb6:	f003 0303 	and.w	r3, r3, #3
 8009cba:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8009cbc:	4b53      	ldr	r3, [pc, #332]	; (8009e0c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8009cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cc0:	0a1b      	lsrs	r3, r3, #8
 8009cc2:	f003 030f 	and.w	r3, r3, #15
 8009cc6:	3301      	adds	r3, #1
 8009cc8:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8009cca:	4b50      	ldr	r3, [pc, #320]	; (8009e0c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8009ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cce:	091b      	lsrs	r3, r3, #4
 8009cd0:	f003 0301 	and.w	r3, r3, #1
 8009cd4:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8009cd6:	4b4d      	ldr	r3, [pc, #308]	; (8009e0c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8009cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cda:	08db      	lsrs	r3, r3, #3
 8009cdc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009ce0:	68ba      	ldr	r2, [r7, #8]
 8009ce2:	fb02 f303 	mul.w	r3, r2, r3
 8009ce6:	ee07 3a90 	vmov	s15, r3
 8009cea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cee:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8009cf2:	693b      	ldr	r3, [r7, #16]
 8009cf4:	2b02      	cmp	r3, #2
 8009cf6:	d003      	beq.n	8009d00 <HAL_RCC_GetSysClockFreq+0xe4>
 8009cf8:	693b      	ldr	r3, [r7, #16]
 8009cfa:	2b03      	cmp	r3, #3
 8009cfc:	d022      	beq.n	8009d44 <HAL_RCC_GetSysClockFreq+0x128>
 8009cfe:	e043      	b.n	8009d88 <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	ee07 3a90 	vmov	s15, r3
 8009d06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d0a:	eddf 6a43 	vldr	s13, [pc, #268]	; 8009e18 <HAL_RCC_GetSysClockFreq+0x1fc>
 8009d0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d12:	4b3e      	ldr	r3, [pc, #248]	; (8009e0c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8009d14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d1a:	ee07 3a90 	vmov	s15, r3
 8009d1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8009d22:	ed97 6a01 	vldr	s12, [r7, #4]
 8009d26:	eddf 5a3d 	vldr	s11, [pc, #244]	; 8009e1c <HAL_RCC_GetSysClockFreq+0x200>
 8009d2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009d2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8009d32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009d36:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009d3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009d42:	e046      	b.n	8009dd2 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	ee07 3a90 	vmov	s15, r3
 8009d4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d4e:	eddf 6a32 	vldr	s13, [pc, #200]	; 8009e18 <HAL_RCC_GetSysClockFreq+0x1fc>
 8009d52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d56:	4b2d      	ldr	r3, [pc, #180]	; (8009e0c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8009d58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d5e:	ee07 3a90 	vmov	s15, r3
 8009d62:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8009d66:	ed97 6a01 	vldr	s12, [r7, #4]
 8009d6a:	eddf 5a2c 	vldr	s11, [pc, #176]	; 8009e1c <HAL_RCC_GetSysClockFreq+0x200>
 8009d6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009d72:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8009d76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009d7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009d7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009d86:	e024      	b.n	8009dd2 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d8a:	ee07 3a90 	vmov	s15, r3
 8009d8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	ee07 3a90 	vmov	s15, r3
 8009d98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d9c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009da0:	4b1a      	ldr	r3, [pc, #104]	; (8009e0c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8009da2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009da4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009da8:	ee07 3a90 	vmov	s15, r3
 8009dac:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8009db0:	ed97 6a01 	vldr	s12, [r7, #4]
 8009db4:	eddf 5a19 	vldr	s11, [pc, #100]	; 8009e1c <HAL_RCC_GetSysClockFreq+0x200>
 8009db8:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009dbc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8009dc0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009dc4:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8009dc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009dcc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009dd0:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8009dd2:	4b0e      	ldr	r3, [pc, #56]	; (8009e0c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8009dd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009dd6:	0e1b      	lsrs	r3, r3, #24
 8009dd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ddc:	3301      	adds	r3, #1
 8009dde:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8009de0:	683b      	ldr	r3, [r7, #0]
 8009de2:	ee07 3a90 	vmov	s15, r3
 8009de6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009dea:	edd7 6a07 	vldr	s13, [r7, #28]
 8009dee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009df2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009df6:	ee17 3a90 	vmov	r3, s15
 8009dfa:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 8009dfc:	6a3b      	ldr	r3, [r7, #32]
}
 8009dfe:	4618      	mov	r0, r3
 8009e00:	372c      	adds	r7, #44	; 0x2c
 8009e02:	46bd      	mov	sp, r7
 8009e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e08:	4770      	bx	lr
 8009e0a:	bf00      	nop
 8009e0c:	46020c00 	.word	0x46020c00
 8009e10:	0800a048 	.word	0x0800a048
 8009e14:	00f42400 	.word	0x00f42400
 8009e18:	4b742400 	.word	0x4b742400
 8009e1c:	46000000 	.word	0x46000000

08009e20 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8009e24:	f7ff fefa 	bl	8009c1c <HAL_RCC_GetSysClockFreq>
 8009e28:	4602      	mov	r2, r0
 8009e2a:	4b07      	ldr	r3, [pc, #28]	; (8009e48 <HAL_RCC_GetHCLKFreq+0x28>)
 8009e2c:	6a1b      	ldr	r3, [r3, #32]
 8009e2e:	f003 030f 	and.w	r3, r3, #15
 8009e32:	4906      	ldr	r1, [pc, #24]	; (8009e4c <HAL_RCC_GetHCLKFreq+0x2c>)
 8009e34:	5ccb      	ldrb	r3, [r1, r3]
 8009e36:	fa22 f303 	lsr.w	r3, r2, r3
 8009e3a:	4a05      	ldr	r2, [pc, #20]	; (8009e50 <HAL_RCC_GetHCLKFreq+0x30>)
 8009e3c:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8009e3e:	4b04      	ldr	r3, [pc, #16]	; (8009e50 <HAL_RCC_GetHCLKFreq+0x30>)
 8009e40:	681b      	ldr	r3, [r3, #0]
}
 8009e42:	4618      	mov	r0, r3
 8009e44:	bd80      	pop	{r7, pc}
 8009e46:	bf00      	nop
 8009e48:	46020c00 	.word	0x46020c00
 8009e4c:	0800a038 	.word	0x0800a038
 8009e50:	20008000 	.word	0x20008000

08009e54 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b086      	sub	sp, #24
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8009e5c:	4b3e      	ldr	r3, [pc, #248]	; (8009f58 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8009e5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009e62:	f003 0304 	and.w	r3, r3, #4
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d003      	beq.n	8009e72 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8009e6a:	f7fe fdfb 	bl	8008a64 <HAL_PWREx_GetVoltageRange>
 8009e6e:	6178      	str	r0, [r7, #20]
 8009e70:	e019      	b.n	8009ea6 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8009e72:	4b39      	ldr	r3, [pc, #228]	; (8009f58 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8009e74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009e78:	4a37      	ldr	r2, [pc, #220]	; (8009f58 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8009e7a:	f043 0304 	orr.w	r3, r3, #4
 8009e7e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8009e82:	4b35      	ldr	r3, [pc, #212]	; (8009f58 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8009e84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009e88:	f003 0304 	and.w	r3, r3, #4
 8009e8c:	60fb      	str	r3, [r7, #12]
 8009e8e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8009e90:	f7fe fde8 	bl	8008a64 <HAL_PWREx_GetVoltageRange>
 8009e94:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8009e96:	4b30      	ldr	r3, [pc, #192]	; (8009f58 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8009e98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009e9c:	4a2e      	ldr	r2, [pc, #184]	; (8009f58 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8009e9e:	f023 0304 	bic.w	r3, r3, #4
 8009ea2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8009ea6:	697b      	ldr	r3, [r7, #20]
 8009ea8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009eac:	d003      	beq.n	8009eb6 <RCC_SetFlashLatencyFromMSIRange+0x62>
 8009eae:	697b      	ldr	r3, [r7, #20]
 8009eb0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009eb4:	d109      	bne.n	8009eca <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009ebc:	d202      	bcs.n	8009ec4 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8009ebe:	2301      	movs	r3, #1
 8009ec0:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8009ec2:	e033      	b.n	8009f2c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8009ec8:	e030      	b.n	8009f2c <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009ed0:	d208      	bcs.n	8009ee4 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8009ed2:	697b      	ldr	r3, [r7, #20]
 8009ed4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ed8:	d102      	bne.n	8009ee0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8009eda:	2303      	movs	r3, #3
 8009edc:	613b      	str	r3, [r7, #16]
 8009ede:	e025      	b.n	8009f2c <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8009ee0:	2301      	movs	r3, #1
 8009ee2:	e035      	b.n	8009f50 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009eea:	d90f      	bls.n	8009f0c <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8009eec:	697b      	ldr	r3, [r7, #20]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d109      	bne.n	8009f06 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009ef8:	d902      	bls.n	8009f00 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8009efa:	2300      	movs	r3, #0
 8009efc:	613b      	str	r3, [r7, #16]
 8009efe:	e015      	b.n	8009f2c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8009f00:	2301      	movs	r3, #1
 8009f02:	613b      	str	r3, [r7, #16]
 8009f04:	e012      	b.n	8009f2c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8009f06:	2300      	movs	r3, #0
 8009f08:	613b      	str	r3, [r7, #16]
 8009f0a:	e00f      	b.n	8009f2c <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009f12:	d109      	bne.n	8009f28 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8009f14:	697b      	ldr	r3, [r7, #20]
 8009f16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f1a:	d102      	bne.n	8009f22 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8009f1c:	2301      	movs	r3, #1
 8009f1e:	613b      	str	r3, [r7, #16]
 8009f20:	e004      	b.n	8009f2c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8009f22:	2302      	movs	r3, #2
 8009f24:	613b      	str	r3, [r7, #16]
 8009f26:	e001      	b.n	8009f2c <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8009f28:	2301      	movs	r3, #1
 8009f2a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8009f2c:	4b0b      	ldr	r3, [pc, #44]	; (8009f5c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	f023 020f 	bic.w	r2, r3, #15
 8009f34:	4909      	ldr	r1, [pc, #36]	; (8009f5c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8009f36:	693b      	ldr	r3, [r7, #16]
 8009f38:	4313      	orrs	r3, r2
 8009f3a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8009f3c:	4b07      	ldr	r3, [pc, #28]	; (8009f5c <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	f003 030f 	and.w	r3, r3, #15
 8009f44:	693a      	ldr	r2, [r7, #16]
 8009f46:	429a      	cmp	r2, r3
 8009f48:	d001      	beq.n	8009f4e <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8009f4a:	2301      	movs	r3, #1
 8009f4c:	e000      	b.n	8009f50 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8009f4e:	2300      	movs	r3, #0
}
 8009f50:	4618      	mov	r0, r3
 8009f52:	3718      	adds	r7, #24
 8009f54:	46bd      	mov	sp, r7
 8009f56:	bd80      	pop	{r7, pc}
 8009f58:	46020c00 	.word	0x46020c00
 8009f5c:	40022000 	.word	0x40022000

08009f60 <prvTaskExitError>:
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b082      	sub	sp, #8
 8009f64:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 8009f66:	2300      	movs	r3, #0
 8009f68:	607b      	str	r3, [r7, #4]
    configASSERT( ulCriticalNesting == ~0UL );
 8009f6a:	4b09      	ldr	r3, [pc, #36]	; (8009f90 <prvTaskExitError+0x30>)
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f72:	d002      	beq.n	8009f7a <prvTaskExitError+0x1a>
 8009f74:	f7fa ff0f 	bl	8004d96 <ulSetInterruptMask>
 8009f78:	e7fe      	b.n	8009f78 <prvTaskExitError+0x18>
    portDISABLE_INTERRUPTS();
 8009f7a:	f7fa ff0c 	bl	8004d96 <ulSetInterruptMask>
    while( ulDummy == 0 )
 8009f7e:	bf00      	nop
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d0fc      	beq.n	8009f80 <prvTaskExitError+0x20>
}
 8009f86:	bf00      	nop
 8009f88:	bf00      	nop
 8009f8a:	3708      	adds	r7, #8
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	bd80      	pop	{r7, pc}
 8009f90:	2000057c 	.word	0x2000057c

08009f94 <memset>:
 8009f94:	4402      	add	r2, r0
 8009f96:	4603      	mov	r3, r0
 8009f98:	4293      	cmp	r3, r2
 8009f9a:	d100      	bne.n	8009f9e <memset+0xa>
 8009f9c:	4770      	bx	lr
 8009f9e:	f803 1b01 	strb.w	r1, [r3], #1
 8009fa2:	e7f9      	b.n	8009f98 <memset+0x4>

08009fa4 <__libc_init_array>:
 8009fa4:	b570      	push	{r4, r5, r6, lr}
 8009fa6:	4d0d      	ldr	r5, [pc, #52]	; (8009fdc <__libc_init_array+0x38>)
 8009fa8:	2600      	movs	r6, #0
 8009faa:	4c0d      	ldr	r4, [pc, #52]	; (8009fe0 <__libc_init_array+0x3c>)
 8009fac:	1b64      	subs	r4, r4, r5
 8009fae:	10a4      	asrs	r4, r4, #2
 8009fb0:	42a6      	cmp	r6, r4
 8009fb2:	d109      	bne.n	8009fc8 <__libc_init_array+0x24>
 8009fb4:	4d0b      	ldr	r5, [pc, #44]	; (8009fe4 <__libc_init_array+0x40>)
 8009fb6:	2600      	movs	r6, #0
 8009fb8:	4c0b      	ldr	r4, [pc, #44]	; (8009fe8 <__libc_init_array+0x44>)
 8009fba:	f000 f825 	bl	800a008 <_init>
 8009fbe:	1b64      	subs	r4, r4, r5
 8009fc0:	10a4      	asrs	r4, r4, #2
 8009fc2:	42a6      	cmp	r6, r4
 8009fc4:	d105      	bne.n	8009fd2 <__libc_init_array+0x2e>
 8009fc6:	bd70      	pop	{r4, r5, r6, pc}
 8009fc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8009fcc:	3601      	adds	r6, #1
 8009fce:	4798      	blx	r3
 8009fd0:	e7ee      	b.n	8009fb0 <__libc_init_array+0xc>
 8009fd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8009fd6:	3601      	adds	r6, #1
 8009fd8:	4798      	blx	r3
 8009fda:	e7f2      	b.n	8009fc2 <__libc_init_array+0x1e>
 8009fdc:	0800a108 	.word	0x0800a108
 8009fe0:	0800a108 	.word	0x0800a108
 8009fe4:	0800a108 	.word	0x0800a108
 8009fe8:	0800a10c 	.word	0x0800a10c

08009fec <memcpy>:
 8009fec:	440a      	add	r2, r1
 8009fee:	1e43      	subs	r3, r0, #1
 8009ff0:	4291      	cmp	r1, r2
 8009ff2:	d100      	bne.n	8009ff6 <memcpy+0xa>
 8009ff4:	4770      	bx	lr
 8009ff6:	b510      	push	{r4, lr}
 8009ff8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009ffc:	4291      	cmp	r1, r2
 8009ffe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a002:	d1f9      	bne.n	8009ff8 <memcpy+0xc>
 800a004:	bd10      	pop	{r4, pc}
	...

0800a008 <_init>:
 800a008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a00a:	bf00      	nop
 800a00c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a00e:	bc08      	pop	{r3}
 800a010:	469e      	mov	lr, r3
 800a012:	4770      	bx	lr

0800a014 <_fini>:
 800a014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a016:	bf00      	nop
 800a018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a01a:	bc08      	pop	{r3}
 800a01c:	469e      	mov	lr, r3
 800a01e:	4770      	bx	lr
